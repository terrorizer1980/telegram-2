{"version":3,"file":"285.3c0486553a317aa8fcc8.js","mappings":"muCA6MA,SAASA,EAAYC,EAAsDC,GACzE,MAAMC,EAAQC,SAASC,cAAc,OACrCF,EAAMG,UAAUC,IAAI,SAEpB,MAAMC,EAAM,IAAIC,MAYhB,GAVsB,iBAAXR,EACTO,EAAIE,IAAMT,EACDA,aAAkBU,iBAC3BH,EAAIE,IAAMT,EAAOW,OAEjBJ,EAAIE,IAAMT,EAAOS,IAGnBP,EAAMU,YAAYL,GAEdN,IAAWY,EAAAA,GAAAA,eAAmCZ,IAAWY,EAAAA,GAAAA,eAAkC,CAC7FX,EAAMG,UAAUC,IAAI,eAChBL,IAAWY,EAAAA,GAAAA,gBACbX,EAAMG,UAAUC,IAAI,QAEtB,MAAMQ,EAAcX,SAASY,cAC3Bd,IAAWY,EAAAA,GAAAA,cACP,kCACA,gCAEFC,GACFZ,EAAMU,YAAYE,EAAYE,WAAU,IAI5C,OAAOd,EAoCT,SAASe,EAA2BC,EAAwBC,GAC1D,MAAMC,EAAqBjB,SAASY,cAA8B,0BAClE,IAAIM,EAAeH,EAAUI,UAAYH,EAAQI,QAAwB,4BAA6BD,UAKtG,OAJIJ,EAAUM,GAAGC,SAAS,kBACxBJ,GAAgBH,EAAUQ,cAAeJ,UAAYJ,EAAUK,QAAwB,YAAaD,WAG/FD,EAAeD,EAAmBO,WACpCN,EAAeF,EAAQS,aAAeR,EAAmBO,UAAYP,EAAmBQ,aAa/F,SAASC,EAAYC,EAAsBC,GACzCC,OAAOC,OAAOH,EAAQI,MAAOH,GAG/B,SAASI,EAASlC,EAA2BmC,GAC3C,IAAIC,EACAC,EAEJ,OAAQrC,GACN,KAAKY,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACHwB,EAAqB,uCAAsCD,EAASZ,KACpEc,EAAgB,cAChB,MAEF,KAAKzB,EAAAA,GAAAA,YACHwB,EAAqB,gBAAeD,EAASZ,KAC7Cc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,aACHwB,EAAqB,gBAAeD,EAASZ,KAC7Cc,EAAgB,MAChB,MAEF,KAAKzB,EAAAA,GAAAA,mBACHwB,EAAoB,kCACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,eACHwB,EAAoB,+CACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,cACHwB,EAAoB,kDACpBC,EAAgB,mBAChB,MAEF,KAAKzB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,OACL,QACEwB,EAAqB,kCAAiCD,EAASZ,KAC/Dc,EAAgB,4DAGpB,MAAMpB,EAAYf,SAASY,cAA2BsB,GAChDE,EAAWrB,GAAaA,EAAUsB,iBAAsDF,GAE9F,MAAO,CACLpB,UAAAA,EACAuB,QAASF,MAAAA,OAAF,EAAEA,EAAWA,EAASG,OAAS,IAI1C,SAASC,EAAWzC,EAAuBD,GACzC,OAAQA,GACN,KAAKY,EAAAA,GAAAA,MACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,OACL,KAAKA,EAAAA,GAAAA,gBACHX,EAAMG,UAAUC,IAAI,mBACpB,MAEF,KAAKO,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACFX,EAAM0C,WAA2BV,MAAMW,UAAY,QACpD,MAEF,KAAKhC,EAAAA,GAAAA,mBACHX,EAAMG,UAAUC,IAAI,W,0FC3U1B,MAoCA,GAAewC,EAAAA,EAAAA,KACb,CAACC,GAAUC,OAAAA,EAAQC,UAAAA,EAAWC,SAAAA,MAC5B,GAAIA,GAAYF,EACd,MAAO,CACLG,QAAQC,EAAAA,EAAAA,IAAcJ,IAAUK,EAAAA,EAAAA,IAAWN,EAAQC,IAAUM,EAAAA,EAAAA,IAAWP,EAAQC,IAIpF,IAAKC,IAAcD,EACjB,MAAO,GAGT,MAAMZ,GAAUmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAElD,MAAO,CACLb,QAAAA,EACAe,OAAQf,IAAWoB,EAAAA,EAAAA,IAAaT,EAAQX,OAG5C,CAACqB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAAoB,kBAnB5E,EApC8D,EAC5DV,OAAAA,EAAQC,UAAAA,EAAWE,OAAAA,EAAQD,SAAAA,EAAUd,QAAAA,EAASwB,iBAAAA,EAAkBC,aAAAA,MAEhE,MAAMC,GAAqBC,EAAAA,EAAAA,KAAY,KACrCH,IACAC,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACD,EAAQa,EAAcZ,EAAWW,IAE/BI,GAAOC,EAAAA,EAAAA,KAEb,IAAKd,IAAYf,IAAYc,EAC3B,OAGF,MAAMgB,EAAaf,EAAO3B,GAAK,EACzB2C,GAAcC,EAAAA,EAAAA,IAAeJ,EAAMb,GAEzC,OACE,0BAAKkB,UAAU,aAAaC,QAASR,GAClCI,EACC,mBAACK,EAAA,EAAD,CAAQC,IAAKrB,EAAO3B,GAAIiD,KAAK,SAASC,KAAMvB,IAE5C,mBAACoB,EAAA,EAAD,CAAQC,IAAKrB,EAAO3B,GAAIiD,KAAK,SAASE,KAAMxB,IAE9C,0BAAKkB,UAAU,QACb,0BAAKA,UAAU,QAAQO,IAAI,QACxBT,IAAeU,EAAAA,EAAAA,GAAWV,IAE7B,0BAAKE,UAAU,OAAOO,IAAI,QACvB1B,EAAWc,EAAK,gCAAiCc,EAAAA,EAAAA,IAAoBd,EAAsB,IAAhB5B,EAAS2C,MAAa,S,4CCpC5G,MAyIA,EAzIyC,EACvCC,UAAAA,EACAC,QAAAA,EACAC,SAAAA,EACA9C,QAAAA,EACA+C,SAAAA,EACAjC,SAAAA,EACAkC,mBAAAA,EACAC,UAAAA,EACAC,aAAAA,MAEA,MAAM,kBACJC,EADI,iBAEJC,EAFI,oBAGJC,IACEC,EAAAA,EAAAA,GACFtD,GAAW6C,GAAUU,EAAAA,EAAAA,IAAoBvD,EAAS,iBAAcwD,EAChET,GAGInB,GAAOC,EAAAA,EAAAA,KAEP4B,GAA8DC,EAAAA,EAAAA,KAAQ,IACnE,EAAGC,UAAAA,EAAWC,OAAAA,KACnB,mBAACC,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN9B,UAAW2B,EAAS,cAAWJ,EAC/BtB,QAASyB,EACTK,UAAU,gBAEV,wBAAG/B,UAAU,gBAGhB,IAEH,OAAIgC,EAAAA,GAEA,0BAAKhC,UAAU,6BACb,mBAACiC,EAAA,EAAD,CACEC,QAASV,EACTW,UAAU,UAERtD,GACA,mBAACuD,EAAA,EAAD,CACEC,KAAK,UACLpC,QAASe,GAERrB,EAAK,YAGTiB,EACC,mBAACwB,EAAA,EAAD,CACEC,KAAMnB,EAAoB,QAAU,WACpCjB,QAASmB,GAERF,EAAqB,GAAEoB,KAAKT,MAAyB,IAAnBV,qBAA4C,YAGjF,mBAACiB,EAAA,EAAD,CACEC,KAAK,WACLE,KAAM5B,EACN6B,SAAU1B,GAETnB,EAAK,uBAIXuB,GAAqB,mBAACuB,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBf,KAAK,IAAIuC,SAAO,KAMvF,0BAAK3C,UAAU,uBACXnB,GACA,sCACE,mBAAC+C,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,EAAK,WAChBM,QAASe,GAET,wBAAGhB,UAAU,mBAIlBY,EACC,mBAACgB,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,EAAK,qBAChBM,QAASmB,GAERF,EACC,mBAACuB,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBf,KAAK,IAAIH,QAASmB,IAE/D,wBAAGpB,UAAU,mBAIjB,mBAAC4B,EAAA,EAAD,CACEW,KAAM5B,EACN6B,SAAU1B,EACVe,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,EAAK,sBAEhB,wBAAGK,UAAU,mBAGjB,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWlB,EAAW,WAAa,UACnCZ,QAASgB,GAET,wBAAGjB,UAAWa,EAAW,gBAAkB,kBAE7C,mBAACe,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,EAAK,SAChBM,QAASc,GAET,wBAAGf,UAAU,kB,wBCrJrB,MAyDA,EAhDwC,EACtC4C,KAAAA,EAAO,GAAIC,SAAAA,EAAUC,WAAAA,EAAY7C,QAAAA,MAEjC,MAAO8C,EAAaC,IAAkBC,EAAAA,EAAAA,KAAS,IAC/CC,EAAAA,EAAAA,KAAU,KACR,MAAMC,EAAgBrH,SAASY,cAAc,kCAEvC0G,EAAmB,KACvB,MAAMC,EAASF,EAAgBA,EAAcG,aAAe,EAE5DN,EAAeK,EAAe,EAANE,EAAAA,KAI1BH,IAEA,MAAMI,GAAeC,EAAAA,EAAAA,IAASL,EAzBP,KAyB6C,GAIpE,OAFAM,OAAOC,iBAAiB,SAAUH,GAAc,GAEzC,KACLE,OAAOE,oBAAoB,SAAUJ,GAAc,MAEpD,IAQH,MAAMK,GAAaC,EAAAA,EAAAA,GACjB,oBACAhB,GAAc,eACdD,GAAY,aAGd,OACE,0BAAK7C,UAAW6D,EAAY5D,QAb9B,SAAmB8D,GACbnB,GACFmB,EAAEC,oBAYDpB,GACC,0BAAK5C,UAAU,8BAA8BC,QAAU+B,EAAAA,QAAoCT,EAAVtB,GAC/E,wBAAGD,UAAY,6BAA2B+C,EAAc,YAAc,IAAMxC,IAAI,QAAQqC,M,wBClDlG,MAAMqB,OA+EsC,IAA/BnI,SAASoI,kBACX,yBAC2C,IAAlCpI,SAASqI,qBAClB,4BAC8C,IAArCrI,SAASsI,wBAClB,0BAGF,G,wBCjGT,MAAMC,EAAQ,CAAC,QAAS,KAAM,KAAM,KAAM,KAAM,MAEhD,EAAgBC,IACd,MAAMC,EAAmB,IAAVD,EAAc,EAAIhC,KAAKkC,MAAMlC,KAAKmC,IAAIH,GAAShC,KAAKmC,IAAI,OAEvE,MAAQ,IAAGH,EAAQ,MAAQhC,KAAKkC,MAAMD,IAASG,QAAQ,MAAML,EAAME,MCwB/DI,GAAaZ,IACjBA,EAAEC,mBAmKJ,GA9JwC,EACtCY,iBAAAA,EACAC,YAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAC,eAAAA,EACAC,qBAAAA,EACAC,SAAAA,EACAC,sBAAAA,EACAC,aAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,OAAAA,MAEA,MAAOC,EAAWC,IAAiBxC,EAAAA,EAAAA,KAAS,GAEtCyC,GAAYC,EAAAA,EAAAA,IAAuB,MACnCC,GAAYD,EAAAA,EAAAA,KAAgB,IAElCzC,EAAAA,EAAAA,KAAU,KACJ8B,GACFS,EAAcT,KAEf,CAACA,KAEJ9B,EAAAA,EAAAA,KAAU,KACR,IAAI2C,EAYJ,OAVKb,IACChD,EAAAA,GACFyD,GAAc,GAEdI,EAAUnC,OAAOoC,YAAW,KAC1BL,GAAc,KAnCS,MAwCtB,KACDI,GACFnC,OAAOqC,aAAaF,MAGvB,CAACb,KAEJ9B,EAAAA,EAAAA,KAAU,MACJsC,GAAaR,IACflJ,SAASkK,KAAKhK,UAAUC,IAAI,0BAGvB,KACLH,SAASkK,KAAKhK,UAAUiK,OAAO,6BAEhC,CAACjB,EAAgBQ,IAEpB,MAAM7F,GAAOC,EAAAA,EAAAA,KAEPsG,GAAaxG,EAAAA,EAAAA,KAAaqE,IAC9B,GAAI6B,EAAUO,SAAWT,EAAUS,QAAS,CAC1C,MAAM,MAAEC,EAAF,KAASC,GAASX,EAAUS,QAAQG,wBACpCC,EAAUxC,aAAayC,WAAazC,EAAEwC,QAAUxC,EAAE0C,cAAc,GAAGF,QACzEhB,EAAOjD,KAAKoE,IAAIpE,KAAKqE,IAAI7B,IAAayB,EAAUF,GAAQD,GAAQtB,GAAW,OAE5E,CAACA,EAAUS,IAERqB,GAAkBlH,EAAAA,EAAAA,KAAaqE,IACnC6B,EAAUO,SAAU,EACpBD,EAAWnC,KACV,CAACmC,IAEEW,GAAiBnH,EAAAA,EAAAA,KAAY,KACjCkG,EAAUO,SAAU,IACnB,IAsDL,IAAwBW,EAA2BC,EA1CjD,IAVA7D,EAAAA,EAAAA,KAAU,KACR,GAAKwC,EAAUS,SAAYX,EAC3B,OAAOwB,EAAAA,EAAAA,GAActB,EAAUS,QAAS,CACtCc,UAAWL,EACXM,UAAWL,EACX5G,QAAS4G,EACTM,OAAQjB,MAET,CAACV,EAAWoB,EAAiBV,EAAYW,IAEvCrB,GAAcR,EAInB,OACE,0BAAKhF,UAAY,wBAAsBiF,EAAuB,SAAW,IAAMhF,QAAS0E,IA6C5F,SACEE,EAAqBC,EAAkBF,EAA0Bc,GAEjE,MAAM0B,EAAoBvC,EAAcC,EAAY,IAC9CuC,EAAwC,IAAnBzC,EAE3B,OACE,0BAAK5E,UAAU,kBAAkBsH,IAAK5B,GACpC,0BAAK1F,UAAU,yBACb,0BACEA,UAAU,2BAEVnC,MAAQ,UAASwJ,GAAsB,OAEzC,0BACErH,UAAU,yBAEVnC,MAAQ,UAASuJ,GAAoB,SA7DxCG,CAAe1C,EAAaC,EAAUF,EAAkBc,GACzD,mBAAC9D,EAAA,EAAD,CACEG,UAAWpC,EAAK,iBAChBS,KAAK,OACLoH,QAASxF,EAAAA,GACTF,MAAM,oBACN9B,UAAU,OACVC,QAASqF,GAET,wBAAGtF,UAAWkF,EAAW,aAAe,eAmBhD,SAAoBL,EAAqBC,GACvC,OACE,0BAAK9E,UAAU,eACX,IAAEyH,EAAAA,EAAAA,IAAoB5C,SAAkB4C,EAAAA,EAAAA,IAAoB3C,MApB7D4C,CAAW7C,EAAaC,GACxBF,EAAmB,IAwBFkC,EAxBsBlC,EAwBKmC,EAxBahC,EA0B5D,0BAAK/E,UAAU,oBACX,GAAE2H,EAAeZ,EAAYD,QAAwBa,EAAeZ,OA1BrE5B,GACC,mBAACvD,EAAA,EAAD,CACEG,UAAU,aACV3B,KAAK,OACL0B,MAAM,oBACN9B,UAAU,aACVC,QAASoF,GAET,wBAAGrF,UAAcoF,EAAe,mBAAqB,uB,iNCnH/D,MAiMA,IAAewC,EAAAA,EAAAA,KA/LmB,EAChCC,IAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,WAAAA,EACA7G,iBAAAA,EACA4D,SAAAA,EACAkD,kBAAAA,EACAC,OAAAA,EACAC,QAAAA,MAGA,MAAMC,GAAWzC,EAAAA,EAAAA,IAAyB,OACnCT,EAAUmD,IAAepF,EAAAA,EAAAA,KAAUqF,EAAAA,KAAiBC,EAAAA,KACpD1D,EAAa2D,IAAkBvF,EAAAA,EAAAA,IAAS,IACxCwF,EAAmBC,IAAwBzF,EAAAA,EAAAA,KAAS,IAEpDmC,EAAcuD,EAAeC,GHtCvB,SAA6BC,EAAgBR,GAC1D,MAAOjD,EAAc0D,IAAmB7F,EAAAA,EAAAA,IAAS8F,QAAQ9E,GAAQnI,SAASmI,KAoE1E,OA9BA+E,EAAAA,EAAAA,KAAgB,KACd,MAAMC,EAAW,KAAQH,EAAgBC,QAAQ9E,GAAQnI,SAASmI,MAC5DiF,EAAgB,KAAQJ,GAAgB,IACxCK,EAAe,KACnBL,GAAgB,GAChBT,GAAY,IAERe,EAAQP,EAAM1C,QAWpB,OATArK,SAAS6H,iBAAiB,mBAAoBsF,GAAU,GACxDnN,SAAS6H,iBAAiB,yBAA0BsF,GAAU,GAC9DnN,SAAS6H,iBAAiB,sBAAuBsF,GAAU,GAEvDG,IACFA,EAAMzF,iBAAiB,wBAAyBuF,GAAe,GAC/DE,EAAMzF,iBAAiB,sBAAuBwF,GAAc,IAGvD,KACLrN,SAAS8H,oBAAoB,mBAAoBqF,GAAU,GAC3DnN,SAAS8H,oBAAoB,yBAA0BqF,GAAU,GACjEnN,SAAS8H,oBAAoB,sBAAuBqF,GAAU,GAC1DG,IACFA,EAAMxF,oBAAoB,wBAAyBsF,GAAe,GAClEE,EAAMxF,oBAAoB,sBAAuBuF,GAAc,OAIlE,IAEElF,GAAyB,QAAjBoF,EAAAA,GAIN,CAACjE,EAtEc,KACfyD,EAAM1C,UAAalC,GAAyB,QAAjBoF,EAAAA,MAI5BR,EAAM1C,QAAQmD,kBAChBT,EAAM1C,QAAQmD,oBACLT,EAAM1C,QAAQoD,wBACvBV,EAAM1C,QAAQoD,0BACLV,EAAM1C,QAAQqD,sBACvBX,EAAM1C,QAAQqD,wBACLX,EAAM1C,QAAQsD,sBACvBZ,EAAM1C,QAAQsD,uBAGhBX,GAAgB,KAGK,KAChBD,EAAM1C,UAIPrK,SAAS8M,eACX9M,SAAS8M,iBACA9M,SAAS4N,oBAClB5N,SAAS4N,sBACA5N,SAAS6N,uBAClB7N,SAAS6N,yBACA7N,SAAS8N,sBAClB9N,SAAS8N,uBAGXd,GAAgB,MAkCT,EAAC,GGhC4Ce,CAAoBzB,EAAUC,IAE9E,WAAEyB,EAAF,iBAAclF,EAAd,kBAAgCmF,IAAsBC,EAAAA,EAAAA,MAE1DC,aAAcC,EACdC,qBAAsBC,IACpBC,EAAAA,EAAAA,IAAmBP,OAAYvI,OAAWA,EAAW,SAEvD0I,aAAcK,EACdH,qBAAsBI,IACpBF,EAAAA,EAAAA,GAAkB9B,EAAAA,KAAWrD,IAAagF,OAAqB3I,OAAWA,EAAW,SAEzF2B,EAAAA,EAAAA,KAAU,KACJgF,IAAWD,EACbG,EAASjC,QAASqE,QACT3C,IAAQS,EAAAA,KAIjBmC,EAAAA,EAAAA,GAASrC,EAASjC,WAEnB,CAAC+B,EAAQD,EAAmBJ,KAE/B3E,EAAAA,EAAAA,KAAU,KACJkF,EAASjC,QAAStB,cAAgBuD,EAASjC,QAASrB,UACtD0D,EAAe,GACfH,GAAY,IAEZG,EAAeJ,EAASjC,QAAStB,eAElC,CAACA,IAEJ,MAAM6F,GAAkBhL,EAAAA,EAAAA,KAAaqE,IACnCA,EAAEC,kBACEkB,GACFkD,EAASjC,QAASqE,QAClBnC,GAAY,MAEZoC,EAAAA,EAAAA,GAASrC,EAASjC,SAClBkC,GAAY,GACRrG,EAAAA,IACF0G,GAAqB,MAGxB,CAACxD,KAEJyF,EAAAA,EAAAA,GAAgBvC,EAAU,IAE1B,MAAMwC,GAAkBlL,EAAAA,EAAAA,KAAY,KAClCgJ,GAAqB,KACpB,IAEGmC,GAAiBnL,EAAAA,EAAAA,KAAY,KACjCgJ,GAAqB,KACpB,IAEGoC,GAAmBpL,EAAAA,EAAAA,KAAaqE,IACpCyE,EAAezE,EAAEgH,cAAclG,eAC9B,IAEGmG,GAActL,EAAAA,EAAAA,KAAY,KAC9B8I,EAAe,GACfH,GAAY,GACZK,GAAqB,KACpB,IAEGuC,GAAyBvL,EAAAA,EAAAA,KAAY,KACrC0F,GAAgBwD,EAClBA,KACUxD,GAAgBuD,GAC1BA,MAED,CAACC,EAAgBxD,EAAcuD,IAE5BzC,GAAaxG,EAAAA,EAAAA,KAAawL,IAC9B9C,EAASjC,QAAStB,YAAcqG,IAC/B,IAEGC,GAAiBzL,EAAAA,EAAAA,KAAaqE,IAClCA,EAAEC,kBACF0E,GAAsBD,GACjBA,IACHL,EAASjC,QAASqE,QAClBnC,GAAY,MAEb,CAACI,KAEJvF,EAAAA,EAAAA,KAAU,KACR,MAAMkI,EAA4BrH,IAClB,UAAVA,EAAE5D,KAA6B,MAAV4D,EAAE5D,MACzB4D,EAAEsH,iBACFX,EAAgB3G,KAMpB,OAFAjI,SAAS6H,iBAAiB,UAAWyH,GAA0B,GAExD,KACLtP,SAAS8H,oBAAoB,UAAWwH,GAA0B,MAEnE,CAACV,IAEJ,MAAMY,EAAetD,GAAe,UAASA,EAAW5B,oBAAoB4B,EAAW3E,WACjFkI,EAAc,yBAAwBxD,KAE5C,OACE,0BACE/H,UAAU,cACVC,SAAU6H,GAAS9F,EAAAA,GAA0BmJ,OAAiB5J,EAC9DiK,YAAc1D,GAAUQ,EAAAA,QAAiC/G,EAAlBqJ,EACvCa,WAAa3D,GAAUQ,EAAAA,QAAgC/G,EAAjBsJ,GAEtC,0BAEEhN,MAAOyN,GAGP,+BACEhE,IAAKc,EACLsD,SAAUpD,EAAAA,GACVqD,aAAW,EACXC,KAAM9D,EAEN+D,MAAO/D,EACP3K,GAAG,qBAEHU,MAAO0N,EACPO,OAAQvD,EAAAA,GAAS,IAAMF,GAAY,QAAQ9G,EAC3CwK,QAASf,EACT/K,QAAU+B,EAAAA,QAA4CT,EAAlBmJ,EACpCsB,cAAef,GAEXlB,EAfN,CAgBEkC,aAAcnB,IAEbjD,GAAO,6BAAQzL,IAAKyL,MAGxByC,GACC,mBAAC1I,EAAA,EAAD,CAAQC,OAAK,EAAC7B,UAAY,eAAcuK,IAAwBtK,QAASyK,GACvE,wBAAG1K,UAAU,eAGhBkK,GACC,0BAAKlK,UAAW,CAAC,oBAAqBoK,GAAmB8B,KAAK,OAC1DpC,GAAc,0BAAK9J,UAAU,aAAf,gBAChB,mBAACyC,EAAA,EAAD,CACErC,KAAK,KACLsC,SAAUoH,EAAa,EAAI3I,EAC3BgL,QAAM,EACNlM,QAASkI,MAIbL,IAAUoC,GACV,mBAAC,GAAD,CACEhF,SAAUA,EACVN,iBAAkBA,EAClBC,YAAaA,EACbM,sBAAuB4D,QAAQJ,GAC/BvD,aAAcA,EACdL,SAAUA,EACVD,SAAUsD,EAASjC,QAAUiC,EAASjC,QAAQrB,SAAW,EACzDE,eAAgByD,EAChBxD,qBAAsB+C,GAAcA,EAAW5B,MAvLpB,IAwL3Bb,OAAQW,EACRb,mBAAoB4F,EACpB3F,YAAaoF,QC5FvB,IAAe9C,EAAAA,EAAAA,KArGoB,EAAGwE,QAAAA,EAASC,aAAAA,MAC7C,MAAM,qBAAElC,IAAyBE,EAAAA,EAAAA,GAAkB+B,GAC7CE,GAAcC,EAAAA,EAAAA,GAAqBH,GAEnCI,GAAW7G,EAAAA,EAAAA,IAAyB,OACnC8G,EAAWC,IAAgBzJ,EAAAA,EAAAA,IAAS,GACrC2C,GAAYD,EAAAA,EAAAA,KAAgB,IAElCzC,EAAAA,EAAAA,KAAU,KACJkJ,IAAYE,GACdI,EAZmB,OAcpB,CAACN,EAASE,IAEb,MAYM1F,GAAkBlH,EAAAA,EAAAA,KAAY,KAClCkG,EAAUO,SAAU,IACnB,IAEGU,GAAiBnH,EAAAA,EAAAA,KAAY,KACjCkG,EAAUO,SAAU,EACF,IAAdsG,GACFJ,EAAaI,GAAY7G,EAAUO,WAEpC,CAACkG,EAAcI,KAMlBvJ,EAAAA,EAAAA,KAAU,KACRmJ,EAAaI,GAAY7G,EAAUO,WAClC,CAACsG,EAAWJ,IAEf,MAAM1M,GAAOC,EAAAA,EAAAA,KAEPI,GAAY8D,EAAAA,EAAAA,GAChB,eACAqG,GAGF,OACE,0BAAKnK,UAAWA,GACd,mBAAC4B,EAAA,EAAD,CACE+K,SA3DsB,IA2DZF,EACVrM,KAAK,OACL0B,MAAM,oBACNC,UAAWpC,EAAK,WAChBK,UAAU,WACVwH,QAASxF,EAAAA,GACT/B,QA/CgB,KAChBuM,EAASrG,SACXuG,EAAapK,KAAKoE,IApBM,EAoBc+F,EAAY,OA+ChD,wBAAGzM,UAAU,mBAEf,mBAAC4B,EAAA,EAAD,CACE+K,SAvEsB,IAuEZF,EACVrM,KAAK,OACL0B,MAAM,oBACNC,UAAU,UACV/B,UAAU,UACVwH,QAASxF,EAAAA,GACT/B,QApDe,KACfuM,EAASrG,SACXuG,EAAapK,KAAKqE,IA3BM,EA2Bc8F,EAAY,OAoDhD,wBAAGzM,UAAU,kBAEf,0BAAKA,UAAU,YACb,0BAAKA,UAAU,kBACb,0BACEA,UAAU,kBAEVnC,MAAQ,UApFK,IAoFK4O,EAAY,QAEhC,4BACEnF,IAAKkF,EACL7F,IAzFkB,EA0FlBD,IA3FkB,EA4FlBkG,KAAK,MACLC,MAAOJ,EACPK,KAAK,QACL9M,UAAU,iBACV+M,SAtDoBhJ,IAC5B2I,EAAapK,KAAKqE,IA3CQ,EA2CYrE,KAAKoE,IAAIsG,OAAOjJ,EAAEkJ,OAAOJ,OA1CrC,MAgGlBK,YAAatG,EACbuG,UAAWtG,UCrFjBuG,GAAiB,CACrB,EAAG,EAAG,EAAG,EAAG,EAAG,GAGXC,GAAe,CACnB,EAAG,EACH,IAAK,IACL,EAAG,IACH,IAAK,IACL,EAAG,KAGCC,GAAiB,IAsKvB,IAAe1F,EAAAA,EAAAA,KA1Ie,EAC5B2F,SAAAA,EACAvN,UAAAA,EACAwN,OAAAA,EACAC,OAAAA,EACAhB,UAAAA,EACAiB,UAAAA,EACAC,UAAAA,EACAC,MAAAA,MAEA,MAAMC,EAAiBR,GAAaZ,IAA2CA,GACxEqB,EAAYC,IAAiB9K,EAAAA,EAAAA,KAAkB,IAC/C+K,EAAUC,IAAehL,EAAAA,EAAAA,IAAoB,CAClDiL,GAAIR,EAAWS,GAAIR,EAAWS,EAAG,EAAGC,EAAG,KAGlCC,EAAYC,IAAiBtL,EAAAA,EAAAA,IAAmBmK,IAGjDoB,GAAgB7I,EAAAA,EAAAA,IAAuB,MAGvC8I,GAAkB9I,EAAAA,EAAAA,IAAuB,MA8F/C,OA5FAzC,EAAAA,EAAAA,KAAU,KACR,MAAMwL,EAAeb,GAAkBS,EAAW,GAC5CK,EAAWjB,GAAaY,EAAW,GACnCM,EAAWjB,GAAaW,EAAW,GAEnCO,EAAgB,IAAIP,GACtBA,EAAW,KAAOI,IACpBG,EAAc,GAAKH,GAAgBG,EAAc,GACjDA,EAAc,GAAKH,GAAgBG,EAAc,IAE/CP,EAAW,KAAOK,IACpBE,EAAc,GAAKF,GAEjBL,EAAW,KAAOM,IACpBC,EAAc,GAAKD,IAGhBE,EAAAA,EAAAA,IAAqBR,EAAYO,IACpCN,EApEN,SAAiCQ,EAAkBT,EAAsBU,GACvE,MAAMC,EAAQD,GAAWA,EAAQtS,cAAc,eAC/C,IAAKsS,IAAYC,EACf,OAAOX,EAET,MAAMY,EAAcF,EAAQ1I,wBACtB6I,EAAYF,EAAM3I,wBAElB8I,EAAeD,EAAU/I,MAAQ2I,EAAYT,EAAW,GACxDe,EAAgBF,EAAU9L,OAAS0L,EAAYT,EAAW,GAC1DgB,GAAWJ,EAAY9I,MAAQgJ,GAAe,EAAId,EAAW,GAC7DiB,GAAWL,EAAY7L,OAASgM,GAAgB,EAAIf,EAAW,GAYrE,OAXIY,EAAY9I,OAAS8I,EAAY9I,MAAQkH,GAAiBgC,EAC5DhB,EAAW,IAAMgB,EAAUJ,EAAY9I,MAAQkH,GACtC8B,GAAeA,EAAcE,EAAUhC,KAChDgB,EAAW,IAAMc,EAAcE,EAAUhC,IAEvC4B,EAAY7L,QAAU6L,EAAY7L,OAASiK,GAAiBiC,EAC9DjB,EAAW,IAAMiB,EAAUL,EAAY7L,OAASiK,GACvC+B,GAAgBA,EAAeE,EAAUjC,KAClDgB,EAAW,IAAMe,EAAeE,EAAUjC,IAGrCgB,EA6CWkB,CAAwBlB,EAAW,GAAIO,EAAeL,EAAcrI,YAGnF,CAACuH,EAAWC,EAAWE,KAE1B3K,EAAAA,EAAAA,KAAU,KACHuK,GACHc,EAAcnB,MAEf,CAACK,KAEJvK,EAAAA,EAAAA,KAAU,KACJuL,EAAgBtI,UAClBsI,EAAgBtI,QAAQtI,MAAM4R,UAAa,UAASnB,EAAWoB,iBAEhE,CAAClC,EAAQc,IA2DRd,EACKD,EAIP,0BACEjG,IAAKkH,EACLxO,UAAY,eAAcA,GAAa,KACvCkN,YAjEqBnJ,IACvB,IAAK0J,EACH,OAGF1J,EAAEC,kBACFD,EAAEsH,iBAEF,MAEMsE,EAAyB,CAC7BzB,GAHcI,EAAW,GAIzBH,GAHcG,EAAW,GAIzBF,EAAGrK,EAAE6L,MACLvB,EAAGtK,EAAE8L,OAEP5B,EAAY0B,GACZ5B,GAAc,GAEVS,EAAcrI,SAChBqI,EAAcrI,QAAQnK,UAAUC,IAAI,SA8CpCkR,UA1CkB,KACpBY,GAAc,GAEVS,EAAcrI,SAChBqI,EAAcrI,QAAQnK,UAAUiK,OAAO,QAGrC2H,GACFA,EAAMU,EAAW,GAAIA,EAAW,KAmChCwB,YArBqB/L,IACvB,GAAI+J,EAAY,CACd,MAAMe,EAZV,SAA0BT,EAAWC,GACnC,MAAMQ,EAAgB,IAAIP,GACpByB,EAAS/B,EAASI,EAAIA,EACtB4B,EAAShC,EAASK,EAAIA,EAI5B,OAHAQ,EAAc,GAAKb,EAASE,GAAK6B,EACjClB,EAAc,GAAKb,EAASG,GAAK6B,EAE1BnB,EAKiBoB,CAAiBlM,EAAE6L,MAAO7L,EAAE8L,OAClDtB,EAAcM,GAEVJ,EAAgBtI,UAClBsI,EAAgBtI,QAAQtI,MAAM4R,UAAa,UAASnB,EAAWoB,kBAiBjE,0BACEpI,IAAKmH,EACLzO,UAAU,iBAETuN,OCjHH2C,GAAqB,IAkgB3B,SAASC,GAAYC,EAAkBC,EAA2BC,GAChE,OAAOF,EAEH,0BACEhU,IAAKgU,EACLG,IAAI,GAEJ1S,MAAOwS,EAAa,UAASA,EAAUjK,UAAY,GACnDoK,UAAWzH,QAAQuH,KAIrB,0BACEtQ,UAAU,kBAEVnC,MAAOwS,EAAa,UAASA,EAAUjK,UAAY,IAEnD,mBAACqK,EAAA,EAAD,CAAS3O,MAAM,WAKvB,UAAe8F,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,OACJC,EADI,SACI+R,EADJ,UACc9R,EADd,cACyB+R,EADzB,kBACwCC,EADxC,OAC2DhV,GAC7D8C,EAAOmS,aACL,eACJC,GACEpS,EAAOqS,SAASC,MAEpB,GAAIpV,IAAWY,EAAAA,GAAAA,aAAgC,CAC7C,IAAMmC,IAAUC,EACd,MAAO,CAAEkS,eAAAA,GAGX,MAAM/S,GAAUmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAClD,OAAKb,EAIE,CACLY,OAAAA,EACAC,UAAAA,EACAqS,SAAUlT,EAAQkT,SAClBrV,OAAAA,EACAmC,QAAAA,EACA+S,eAAAA,GATO,CAAEA,eAAAA,GAab,GAAIH,EAGF,MAAO,CACL/R,WAAY,EACZqS,SAAUN,EACVO,aALalS,EAAAA,EAAAA,IAAWN,EAAQiS,KAAkB1R,EAAAA,EAAAA,IAAWP,EAAQiS,GAMrEC,kBAAmBA,GAAqB,EACxCE,eAAAA,EACAlV,OAAAA,GAIJ,KAAM+C,GAAU+R,GAAY9R,GAC1B,MAAO,CAAEkS,eAAAA,GAGX,IAAI/S,EAWAoT,EAOAC,EAXJ,GALErT,EADEnC,GAAU,CAACY,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAASxB,IACjFyV,EAAAA,EAAAA,IAAuB3S,EAAQC,EAAQC,IAEvCM,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,IAGzCb,EACH,MAAO,CAAE+S,eAAAA,GAYX,GANEK,EADEvV,GAAU,CAACY,EAAAA,GAAAA,eAAkCA,EAAAA,GAAAA,iBAAmCY,SAASxB,IAC5E0V,EAAAA,EAAAA,IAAwB5S,EAAQC,IAEhC4S,EAAAA,EAAAA,IAAmB7S,EAAQC,GAIxC/C,IAAWY,EAAAA,GAAAA,QAA4BZ,IAAWY,EAAAA,GAAAA,MACpD4U,GAAgBI,EAAAA,EAAAA,IAAkB9S,EAAQC,EAAQ+R,KAAae,EAAAA,EAAAA,IAAgB/S,EAAQC,EAAQ+R,QAC1F,GAAI9U,IAAWY,EAAAA,GAAAA,YAA+B,CACnD,MAAMkV,GAAgBC,EAAAA,EAAAA,IAAyBjT,IACzC,SAAEkT,GAAcF,GAAiBA,EAAcG,eAAiBH,EAAcG,cAAcC,OAAU,GAC5GV,EAAgBQ,EAGlB,MAAO,CACLjT,OAAAA,EACA+R,SAAAA,EACA9R,UAAAA,EACAqS,SAAUlT,EAAQkT,SAClBrV,OAAAA,EACAmC,QAAAA,EACAoT,aAAAA,EACAC,cAAAA,EACAN,eAAAA,MAGJ,CAAC1R,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,mBAAoB,kBAAmB,kBAvF1CZ,EAthBgC,EAClDE,OAAAA,EACA+R,SAAAA,EACA9R,UAAAA,EACAqS,SAAAA,EACArV,OAAAA,EACAsV,YAAAA,EACAN,kBAAAA,EACA7S,QAAAA,EACAoT,aAAAA,EACAC,cAAAA,EACAW,gBAAAA,EACAxS,iBAAAA,EACAyS,gBAAAA,EACAxS,aAAAA,EACAsR,eAAAA,MAEA,MAAMnP,EAASoH,QAAQmI,GAAetS,GAEhCqT,EAAoBrW,IAAWY,EAAAA,GAAAA,YAC/B0V,EAAetW,IAAWY,EAAAA,GAAAA,aAG1B2V,EAAQpU,GAAUqU,EAAAA,EAAAA,IAAgBrU,QAAWwD,EAC7C6H,EAAQrL,GAAUsU,EAAAA,EAAAA,IAAgBtU,QAAWwD,EAC7C+Q,EAAevU,GAAUwU,EAAAA,EAAAA,IAAuBxU,QAAWwD,EAC3DiR,EAAezU,GAAU0U,EAAAA,EAAAA,IAAuB1U,QAAWwD,EAC3DmR,IAAkB3U,IAAU4U,EAAAA,EAAAA,IAAuB5U,GACnD6U,KAAkB7U,IAAU8U,EAAAA,EAAAA,IAAuB9U,GACnD6C,GAAUmI,QAAQK,GAASoJ,GAAgBI,IAC3CE,GAAU/J,SAASnI,KAAYuR,GAASG,GAAgBI,KACxD,MAAE5K,IAAUsB,GAASoJ,GAAgB,GACrC3T,GAAWkK,QAAQmI,GAGnB6B,GAAgBhK,QAAQuJ,GAAgBE,GACxCQ,IAAavR,EAAAA,EAAAA,KAAQ,IAClBsR,IAAiBnU,EACpB,CAACA,IACDqU,EAAAA,EAAAA,IAAuB9B,GAAgB,GAAIC,GAAiB,GAAIa,IACnE,CAACc,GAAenU,EAAWuS,EAAcC,EAAea,IAErDiB,GAA4BtU,EAAYoU,GAAWG,QAAQvU,IAAc,EACzEwU,GAAwC,IAA9BF,KAAkE,IAA/BA,GAC7CG,GAASH,KAA8BF,GAAW3U,OAAS,IAAoC,IAA/B6U,GAGhEI,IAAe3N,EAAAA,EAAAA,MACf4N,IAAehH,EAAAA,EAAAA,GAAgC0E,IACjDtP,GAAY4R,IAAgBA,KAAiBtC,GAAaqC,GAAanN,UACzEmN,GAAanN,QAAU+M,IAEzB,MAAMM,GAAiB1C,GAAkB,EAAI,WAAa,OACpD2C,GAAqC,IAAnB3C,EAAuB,aAAe,OACxD4C,GAAsC,IAAnB5C,GAGlB6C,GAAgBC,KAAqB3Q,EAAAA,EAAAA,KAAkB,IACvD4Q,GAAgBC,KAAqB7Q,EAAAA,EAAAA,KAAS,IAC9CpC,GAAUkT,KAAe9Q,EAAAA,EAAAA,KAAkB,IAC3CwJ,GAAWC,KAAgBzJ,EAAAA,EAAAA,IAAiB,IAC5C+Q,GAAUC,KAAehR,EAAAA,EAAAA,IAAS,CAAEmL,EAAG,EAAGC,EAAG,IAGpD,SAAS6F,GAAaC,GACpB,GAAItV,SAAkC0C,IAAtBqP,EAAiC,CAC/C,MAAM,OAAEwD,GAAWlD,EACnB,OAAOkD,GAAUA,EAAOxD,GACnB,QAAOwD,EAAOxD,GAAmBzT,aAClCkX,EAAAA,EAAAA,IAAkBnD,EAAciD,EAAS,MAAQ,UAGvD,OAAOpW,IAAWuD,EAAAA,EAAAA,IAAoBvD,EAASoW,EAAS,aAAe,iBAGzE,MAAMG,IAAmBC,EAAAA,EAAAA,GACvBxW,IAAYkU,GAAqBC,KAAiB5Q,EAAAA,EAAAA,IAAoBvD,EAAS,kBAC/EwD,EACAiT,EAAAA,GAAAA,aACAjT,EACAmS,IAAoBxD,IAEhBuE,GAAmBP,KACnBQ,IAAiBH,EAAAA,EAAAA,GACrBE,QACAlT,EACAiT,EAAAA,GAAAA,aACAjT,EACAmS,IAAoBxD,KAEdvP,UAAWgU,GAAb,iBAA+BxT,KAAqByT,EAAAA,EAAAA,GACxDV,IAAa,QACb3S,EACAxD,IAAW8W,EAAAA,EAAAA,IAAsB9W,EAAS,mBAC1CwD,EACAmS,IAAoBxD,IAGhB4E,GAAgB3C,GAAS/I,GAAU+I,GAAS/I,GAAQgH,aAAU7O,EACpE,IAAIwT,IAAkBnU,KAAYkU,IAAgBH,KAAsBD,IAAkBJ,GAC1F,MAAMU,IAAeC,EAAAA,EAAAA,IAAaF,IAAiBhX,IAAWmX,EAAAA,EAAAA,IAA4BnX,IACrFgX,IAAiBnZ,IAAWY,EAAAA,GAAAA,eAC/BuY,GAAgBC,IAGlB,MAAMG,GAAYpX,GAAUqX,EAAAA,EAAAA,IAAmBrX,QAAWwD,EACpDT,GAAW/C,GACbsX,EAAAA,EAAAA,IAAmBtX,GACnBc,GACG,SAAQqS,EAAa/T,MAAMyT,aAC5BrP,EAEN,IAAI+T,GACAvX,EACE2U,GAAmBE,GACrB0C,IAAaC,EAAAA,EAAAA,IAAmBxX,GAAUyX,UACjCrD,GAASG,EAClBgD,IAAaG,EAAAA,EAAAA,IAAwBtD,GAASG,IACrClJ,GAASoJ,KAClB8C,IAAaI,EAAAA,EAAAA,IAAoBtM,GAASoJ,IAG5C8C,GAAaK,EAAAA,IAGfzS,EAAAA,EAAAA,KAAU,KACHlB,EAAAA,IAILlG,SAASkK,KAAKhK,UAAU4Z,OAAO,uBAAwBjU,KACtD,CAACA,IAEJ,MAAMkU,IAAcC,EAAAA,EAAAA,MACpB5S,EAAAA,EAAAA,KAAU,KACR,MAAM6S,EAAMrS,OAAOsS,WAAWC,EAAAA,IAO9B,MANoC,mBAAzBF,EAAIpS,iBACboS,EAAIpS,iBAAiB,SAAUkS,IACK,mBAApBE,EAAIG,aACpBH,EAAIG,YAAYL,IAGX,KACkC,mBAA5BE,EAAInS,oBACbmS,EAAInS,oBAAoB,SAAUiS,IACK,mBAAvBE,EAAII,gBACpBJ,EAAII,eAAeN,OAGtB,CAACA,KAEJ,MAAMO,IAAc7J,EAAAA,EAAAA,GAAoCxO,GAClDsY,IAAa9J,EAAAA,EAAAA,GAAY3Q,GACzB0a,IAAkB/J,EAAAA,EAAAA,GAA2C2E,GAC7DqF,IAAoBhK,EAAAA,EAAAA,GAAYwI,KACtC7R,EAAAA,EAAAA,KAAU,KACR,GAAIwQ,IAAoB/R,IAAWyU,KAAgBE,GAAiB,EAClEE,EAAAA,EAAAA,IAA4BtG,GAAqBuG,EAAAA,IACjD,MAAMC,EAAY3Y,GAAU4Y,EAAAA,EAAAA,GAAkB5Y,QAAWwD,GV5OxD,SACLqV,EACAhb,EACAmZ,EACAO,EACA1U,EACA7C,GAEA,MAAQK,QAASyY,GAAc/Y,EAASlC,EAAQmC,GAChD,IAAK8Y,EACH,OAGF,MAAQzQ,MAAO0Q,GAAgBC,EAAAA,EAAAA,OAE7B3Q,MAAO4Q,EAAgB3T,OAAQ4T,IAC7BC,EAAAA,EAAAA,IAAkCN,EAAWhW,IACzCwF,MAAO+Q,EAAS9T,OAAQ+T,IAAaC,EAAAA,EAAAA,IAC3CL,EAAgBC,EAAiB3B,EAAWlP,MAAOkP,EAAWjS,QAE1DiU,GAAUR,EAAcK,GAAW,EACnCI,EAuPR,SAAsBX,GACpB,MAAMb,EAAMrS,OAAOsS,WAAWC,EAAAA,IAC9B,IAAIuB,EAAe,MAKnB,OAJIZ,IACFY,GAAgBzB,EAAI0B,QAAU,KAAQ,OAGjCD,EAAejU,EAAAA,GA9PRmU,CAAad,IAAcK,EAAkBG,GAAY,EAEvE,IACEO,IAAKC,EAASvR,KAAMwR,EAAUzR,MAAO0R,EAAWzU,OAAQ0U,GACtDlB,EAAUvQ,wBAEd,GAAI,CACF9J,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAASxB,GAAS,CAClB,MAAMoc,EA+LV,SAAiBC,EAAmBC,EAAoBP,EAAatR,EAAcD,EAAe/C,GAChG,GAAI4U,IAAcC,EAAY,CAC5B,MAAM9X,EAAOkC,KAAKoE,IAAIN,EAAO/C,IAAW4U,EAAYC,GACpD7R,IAASjG,EAAOgG,GAAS,EACzBuR,IAAQvX,EAAOiD,GAAU,EACzB+C,EAAQhG,EACRiD,EAASjD,OACJ,GAAI6X,EAAYC,EAAY,CACjC,MAAMC,EAAW/R,EAEjBC,KADAD,EAAQ/C,GAAU4U,EAAYC,IACbC,GAAY,OACxB,GAAID,EAAaD,EAAW,CACjC,MAAMG,EAAY/U,EAElBsU,KADAtU,EAAS+C,GAAS8R,EAAaD,IACdG,GAAa,EAGhC,MAAO,CACLT,IAAAA,EAAKtR,KAAAA,EAAMD,MAAAA,EAAO/C,OAAAA,GAjNAgV,CAAQlB,EAASC,EAAUQ,EAASC,EAAUC,EAAWC,GAC3EH,EAAUI,EAAUL,IACpBE,EAAWG,EAAU3R,KACrByR,EAAYE,EAAU5R,MACtB2R,EAAaC,EAAU3U,OAGzB,MAAMiV,EAAkBT,EAAWC,EAAY,GAAMR,EAASH,EAAU,GAClEoB,EAAkBX,EAAUG,EAAa,GAAMR,EAAQH,EAAW,GAClEoB,EAAaV,EAAYX,EACzBsB,EAAaV,EAAaX,EAE1Bvb,EAAQH,EAAYqZ,GAAiB8B,GAC3CrZ,EAAY3B,EAAO,CACjB8b,IAAM,GAAEJ,MACRlR,KAAO,GAAEiR,MACTlR,MAAQ,GAAE+Q,MACV9T,OAAS,GAAE+T,MACX3H,UAAY,eAAc6I,QAAqBC,iBAA8BC,MAAeC,OAE9Fna,EAAWzC,EAAOD,GAElBE,SAASkK,KAAKhK,UAAUC,IAAI,mBAE5Byc,uBAAsB,KACpB5c,SAASkK,KAAKzJ,YAAYV,GAE1B6c,uBAAsB,KACpB7c,EAAMgC,MAAM4R,UAAY,GAuS9B,SAAoB5T,GACjBA,EAAM0C,WAA2BV,MAAMW,UAAY,UACpD3C,EAAMG,UAAUiK,OAAO,kBAAmB,UAxStC0S,CAAW9c,GAEXiK,YAAW,KACT4S,uBAAsB,KAChB5c,SAASkK,KAAK4S,SAAS/c,IACzBC,SAASkK,KAAK6S,YAAYhd,GAE5BC,SAASkK,KAAKhK,UAAUiK,OAAO,wBAvEd,IAyEGwQ,EAAAA,UUuKxBqC,CADkB/P,QAAQ2N,GACA9a,EAASmZ,GAAgBO,GAAY1U,GAAS7C,GAGtE2V,KAAqB/R,IAAWyU,IAAeE,OACjDE,EAAAA,EAAAA,IAA4BtG,GAAqBuG,EAAAA,IVtKhD,SAAwB7a,EAA2BmZ,EAAuBhX,GAC/E,MAAM,UAAElB,EAAWuB,QAAS2a,GAAYjb,EAASlC,EAAQmC,GACzD,IAAKgb,EACH,OAGF,MAAMlC,EAAY/a,SAASkd,eAAe,eAAgBtc,cACxD,0EAEF,IAAKma,IAAckC,EACjB,OAGF,MACEpB,IAAKC,EAASvR,KAAMwR,EAAUzR,MAAO0R,EAAWzU,OAAQ0U,GACtDlB,EAAUvQ,yBAEZqR,IAAKsB,EAAW5S,KAAMiR,EAAQlR,MAAO+Q,EAAS9T,OAAQ+T,GACpD2B,EAAQzS,wBAEZ,IAAIiR,EAAQ0B,EACZ,IAqJF,SAA6BC,GAC3B,GAAyB,SAArBA,EAAGrb,MAAMsb,QACX,OAAO,EAGT,MAAMC,EAAOF,EAAG5S,yBACRjD,OAAQgW,GAAiBtC,EAAAA,EAAAA,MAEjC,OAAQqC,EAAKzB,KAAO0B,GAAmBD,EAAKzB,IAAMyB,EAAK/V,QAAW,EA7J7DiW,CAAoBzc,GAAY,CACnC,MAAQwG,OAAQgW,GAAiBtC,EAAAA,EAAAA,MACjCQ,EAAQ0B,EAAYrB,GAAWR,EAAWiC,EAG5C,MAAMf,EAAkBT,EAAWC,EAAY,GAAMR,EAASH,EAAU,GAClEoB,EAAkBX,EAAUG,EAAa,GAAMR,EAAQH,EAAW,GACxE,IAAIoB,EAAaV,EAAYX,EACzBsB,EAAaV,EAAaX,EAE9B,MAAMmC,EACJ,CAAC/c,EAAAA,GAAAA,OAA0BA,EAAAA,GAAAA,iBAAmCY,SAASxB,KACnEgB,EAA2BC,EAAWkc,IAE1C,CAACvc,EAAAA,GAAAA,MAAyBA,EAAAA,GAAAA,gBAAkCY,SAASxB,KACjEgB,EAA2BC,EAAWkc,GAGxC,CACFvc,EAAAA,GAAAA,YACAA,EAAAA,GAAAA,MACAA,EAAAA,GAAAA,eACAA,EAAAA,GAAAA,cACAY,SAASxB,KACL4c,EAAaC,EACfD,EAAaC,EACJA,EAAaD,IACtBC,EAAaD,IAIjB,MAAMgB,EAAgB1d,SAAS2d,uBAAuB,SAAS,GAEzD5d,EAAQ2d,GAAiB9d,EAAYqZ,GAAiBgE,EAASnd,GAChE4d,GACHhc,EAAY3B,EAAO,CACjB8b,IAAM,GAAEJ,MACRlR,KAAO,GAAEiR,MACTlR,MAAQ,GAAE+Q,MACV9T,OAAS,GAAE+T,MACX3H,UAAY,eAAc6I,QAAqBC,iBAA8BC,MAAeC,OAIhGC,uBAAsB,KACpB,GAAIc,EAAe,CACjB,MAAM,IACJ7B,EADI,KAEJtR,EAFI,MAGJD,EAHI,OAIJ/C,GACEmW,EAAclT,wBAIlB9I,EAAY3B,EAAO,CACjB6d,WAAY,OACZ/B,IAAM,GAAEJ,MACRlR,KAAO,GAAEiR,MACTqC,gBAAiB,WACjBlK,UAAY,eAAcpJ,EAAOiR,QAAaK,EAAMJ,iBARvCnR,EAAQ+Q,MACR9T,EAAS+T,KAQtBhR,MAAQ,GAAE+Q,MACV9T,OAAS,GAAE+T,QAGftb,SAASkK,KAAKhK,UAAUC,IAAI,mBACvBud,GAAe1d,SAASkK,KAAKzJ,YAAYV,GAE9C6c,uBAAsB,KAChBc,IACFA,EAAc3b,MAAM6b,WAAa,IAGnC7d,EAAMgC,MAAM4R,UAAY,GAEpB8J,IACF1d,EAAMgC,MAAM+b,QAAU,KAGxBtb,EAAWzC,EAAOD,GAElBkK,YAAW,KACT4S,uBAAsB,KAChB5c,SAASkK,KAAK4S,SAAS/c,IACzBC,SAASkK,KAAK6S,YAAYhd,GAE5BC,SAASkK,KAAKhK,UAAUiK,OAAO,wBAzLd,IA2LGwQ,EAAAA,UU0DxBoD,CAAexD,GAAaE,GAAoBH,SAAe7U,MAEhE,CACDmS,GAAkB/R,EAAQ/F,EAAQya,GAAYtY,EAASqY,GAAaE,GACpEvB,GAAewB,GAAmBjB,GAAY1U,MAGhDsC,EAAAA,EAAAA,KAAU,KACR,IAAI4W,EAUJ,OARIjZ,GACFiT,IAAkB,GAElBgG,EAAQpW,OAAOoC,YAAW,KACxBgO,IAAkB,KACjB5D,IAGE,KACD4J,GACFpW,OAAOqC,aAAa+T,MAGvB,CAACjZ,KAEJ,MAAMkZ,GAAY,KAChBhG,IAAY,GACZrH,GAAa,GACbuH,GAAY,CAAE7F,EAAG,EAAGC,EAAG,KAGnB2L,IAAmBta,EAAAA,EAAAA,KAAY,KACnCqU,IAAalT,IACb6L,GAAc7L,GAAiB,EAAN,KACrBA,IACFoT,GAAY,CAAE7F,EAAG,EAAGC,EAAG,MAExB,CAACxN,KAEEoZ,IAAkBva,EAAAA,EAAAA,KAAY,CAACwa,EAAeC,GAAe,KACjEzN,GAAawN,GACC,IAAVA,GAAeC,GACjBJ,OAED,IAEGK,IAAQ1a,EAAAA,EAAAA,KAAY,KACxBH,IACAwa,OACC,CAACxa,IAEE8a,IAAoB3a,EAAAA,EAAAA,KAAY,KACpC0a,KACA5a,EAAa,CAAEb,OAAAA,EAAQ+R,SAAAA,EAAU9R,UAAAA,MAChC,CAACwb,GAAOzb,EAAQ+R,EAAUlR,EAAcZ,IAErC0b,IAAgB5a,EAAAA,EAAAA,KAAY,KAChCsS,EAAgB,CAAEuI,WAAY5b,EAAQqU,WAAY,CAACpU,KACnDmb,OACC,CAAC/H,EAAiBrT,EAAQC,KAE7BsE,EAAAA,EAAAA,KAAU,IAAOvB,GAAS6Y,EAAAA,EAAAA,IAAsB,KAC1C3Z,GACFkZ,KAEAK,aAEC7Y,GAAY,CAAC6Y,GAAOzY,EAAQd,MAEjCqC,EAAAA,EAAAA,KAAU,KACJtC,KAAYkH,KACd2S,EAAAA,EAAAA,QAED,CAAC3S,GAAOlH,MAGXsC,EAAAA,EAAAA,KAAU,KACR,GAAKvB,EAML,OAFAoV,EAAAA,EAAAA,iBAEO,KACLA,EAAAA,EAAAA,mBAED,CAACpV,IAEJ,MAAM+Y,IAAehb,EAAAA,EAAAA,KAAY,CAACib,EAAgBC,KAChD,IAAIC,EAAQ7H,GAAWG,QAAQwH,GAK/B,QAJoB,IAAfC,GAAoBC,EAAQ,GAAqB,IAAdD,GAAmBC,EAAQ7H,GAAW3U,OAAS,KACrFwc,GAASD,GAGJ5H,GAAW6H,KACjB,CAAC7H,KAEE8H,IAAsBpb,EAAAA,EAAAA,KAAY,KAClC0T,IAIJrB,EAAgB,CACdpT,OAAAA,EACA+R,SAAAA,EACA9R,UAAWA,EAAY8b,GAAa9b,GAAY,QAAK2C,EACrD3F,OAAAA,MAED,CAAC+C,EAAQ+R,EAAUgK,GAActH,GAASxU,EAAWmT,EAAiBnW,IAEnEmf,IAAkBrb,EAAAA,EAAAA,KAAY,KAC9B2T,IAIJtB,EAAgB,CACdpT,OAAAA,EACA+R,SAAAA,EACA9R,UAAWA,EAAY8b,GAAa9b,EAAW,QAAK2C,EACpD3F,OAAAA,MAED,CAAC+C,EAAQ+R,EAAUgK,GAAcrH,GAAQzU,EAAWmT,EAAiBnW,KAExEsH,EAAAA,EAAAA,KAAU,KACR,MAAM8X,EAAiBjX,IACrB,OAAQA,EAAE5D,KACR,IAAK,OACL,IAAK,YACH2a,KACA,MAEF,IAAK,QACL,IAAK,aACHC,OAON,OAFAjf,SAAS6H,iBAAiB,UAAWqX,GAAe,GAE7C,KACLlf,SAAS8H,oBAAoB,UAAWoX,GAAe,QAK3D9X,EAAAA,EAAAA,KAAU,KACR,MAAMzF,EAAU3B,SAASY,cAA8B,sDACvD,IAAKe,EACH,OAGF,MAAMwd,EAAqBnT,KAAUS,EAAAA,GAErC,OAAOvB,EAAAA,EAAAA,GAAcvJ,EAAS,CAE5Byd,wBAA0B,oEAAmED,EAAwC,GAAnB,kBAClHhb,QAAS,KACFY,IAAayH,EAAAA,IAChB8R,MAGJe,QAAS7S,EAAAA,GAAe,CAACvE,EAAG6W,KACtBA,IAAcQ,EAAAA,EAAAA,MAChBN,KACSF,IAAcQ,EAAAA,EAAAA,KACvBL,KACWhX,EAAEkJ,QAAWlJ,EAAEkJ,OAAuB/P,QAAQ,uBACzDkd,MAGK,QACL7Y,MAEL,CAAC6Y,GAAOzG,GAAgB7L,GAAOgL,GAASjS,GAAUka,GAAiBD,KAEtE,MAAMO,IAAY3b,EAAAA,EAAAA,KAAY,CAAC0O,EAAWC,KACxC4F,GAAY,CAAE7F,EAAAA,EAAGC,EAAAA,MAChB,IAEGiN,IAA+B5b,EAAAA,EAAAA,KAAY,KAC3C4I,EAAAA,KAAiBwK,IAAWhL,KAC9B8L,IAAmBD,MAEpB,CAACA,GAAgB7L,GAAOgL,KAErBnT,IAAOC,EAAAA,EAAAA,KAUb,SAAS2b,GAAYC,GACnB,GAAI3c,GACF,OACE,0BAAKsB,IAAKxB,EAAQqB,UAAU,wBACzBmQ,GACCwE,IAAoBD,IACpB+G,EAAAA,EAAAA,IAA+B9F,EAAAA,IAAwB,IACtD3T,EAAAA,KAA4BnB,KAI9B,GAAI9C,EAAS,CAClB,MAAM2Y,GAAYC,EAAAA,EAAAA,GAAkB5Y,GAC9B6Y,EAAY7N,QAAQ2N,GAE1B,OACE,0BACEvW,IAAKvB,EACLoB,UAAY,yBAAuB4W,EAAY,aAAe,IAC9D3W,QAASqb,IAERxI,IAAW3C,GACV2E,IAAgBH,IAAoBD,IAAkBJ,GACtDvW,IAAW0d,EAAAA,EAAAA,IAA+BnG,GAAasB,IACtD5U,EAAAA,KAA4BnB,IAE9BD,IACC,mBAAC,GAAD,CACET,IAAKvB,EACLiJ,IAAKiN,IAAgBH,GACrB7M,MAAOA,GACPC,WAAYgN,GACZ/M,WAAYjK,IAAW0d,EAAAA,EAAAA,IAA+BnG,GAAasB,GAAW,GAC9EzV,iBAAkBA,GAClB4D,SAAUoQ,GACVlN,kBAAmBtG,EACnBuG,QAASsT,EACTrT,QAASiS,KAGZ1D,GACC,mBAAC,EAAD,CACE9T,KAAM8T,EACNzW,QAASoa,GACTxX,SAAU8Q,MAAoB/S,IAAWkH,IACzChF,WAAYlC,KAAYkH,OAUpC,SAAS4T,KACP,OAAO7c,GACL,mBAAC,EAAD,CACEsB,IAAK+Q,EAAa/T,GAClBwB,OAAQuS,EAAa/T,GACrB0B,UAAQ,IAGV,mBAAC,EAAD,CACEsB,IAAKvB,EACLD,OAAQA,EACRC,UAAWA,IAKjB,OA/EA+c,EAAAA,EAAAA,IAAeha,EAAQpC,EAAkBwS,EAAiB,CACxDpT,OAAAA,EACA+R,SAAAA,EACA9R,UAAAA,EACAhD,OAAAA,EACA+U,cAAeO,GAAeA,EAAY/T,KA2E1C,mBAACye,EAAA,EAAD,CACEze,GAAG,cACH6C,UAAWa,GAAW,SAAW,GACjCc,OAAQA,IAEP,IACC,sCACE,0BAAK3B,UAAU,oBAAoBO,IAAKZ,GAAKkc,MAAQ,WAAQta,GAC1DS,EAAAA,IACC,mBAACJ,EAAA,EAAD,CACE5B,UAAU,qBACV6B,OAAK,EACLzB,KAAK,UACL0B,MAAM,oBACNC,UAAWpC,GAAK,SAChBM,QAASma,IAET,wBAAGpa,UAAU,gBAGjB,mBAAC8b,EAAA,EAAD,CAAYC,UAAWzI,GAAanN,QAAU6V,KAAMvI,IACjDiI,IAEH,mBAAC,EAAD,CACE/a,UAAWgU,IAAoBD,GAC/B9T,QAASA,GACTC,SAAUA,GACV9C,QAASA,EACT+C,SAAUA,GACVC,mBAAoBqZ,GACpBpZ,UAAWsZ,GACXrZ,aAAc+Y,GACdnb,SAAUA,MAGd,mBAAC,GAAD,CACE2O,QAASqG,GACTpG,OAAQ5M,GACR6M,UAAWsG,GAAS5F,EACpBT,UAAWqG,GAAS3F,EACpB5B,UAAWA,GACXmB,MAAOyN,IAEP,mBAACS,EAAA,EAAD,CACE9b,UAAU,kBACV+b,UAAW7I,GACX8I,KAAMxI,IAEL+H,MAGHnI,IACA,6BACEtG,KAAK,SACL9M,UAAY,mBAAkBY,KAAYkH,IAAS,WACnD,aAAYnI,GAAK,oBACjBY,IAAKZ,GAAKkc,MAAQ,WAAQta,EAC1BtB,QAAS6a,MAGXzH,IACA,6BACEvG,KAAK,SACL9M,UAAY,mBAAkBY,KAAYkH,IAAS,WACnD,aAAYnI,GAAK,QACjBY,IAAKZ,GAAKkc,MAAQ,WAAQta,EAC1BtB,QAAS8a,KAGb,mBAAC,GAAD,CACE3O,QAASvL,GACTwL,aAAc4N,Y,kHCxiB1B,MAmJA,IAAerS,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MACEud,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJC,GACE5d,EAEJ,MAAO,CACLyd,UAAAA,EACAI,UAAWF,EAAiBG,OAC5BC,cAAeL,EAAQI,OACvBE,gBAAiBN,EAAQO,SACzBL,cAAAA,MAGJ,CAACld,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAAoB,kBAAmB,mBAnB3EZ,EAhJ6C,EAC/D0d,UAAAA,EACAI,UAAAA,EACAE,cAAAA,EACAC,gBAAAA,EACAJ,cAAAA,EACA3a,OAAAA,EACAib,iBAAAA,EACAC,gBAAAA,EACAC,cAAAA,MAEA,MAAOC,EAAQC,IAAa/Z,EAAAA,EAAAA,IAAS,IAE/BuJ,GAAW7G,EAAAA,EAAAA,IAAyB,MAEpChG,GAAOC,EAAAA,EAAAA,MAEbsD,EAAAA,EAAAA,KAAU,KACJvB,EACGK,EAAAA,IACH8D,YAAW,KACT4S,uBAAsB,KAChBlM,EAASrG,SACXqG,EAASrG,QAAQ8W,aA1BR,MAgCbzQ,EAASrG,SACXqG,EAASrG,QAAQ+W,OAGnBpX,YAAW,KACTkX,EAAU,MApCU,QAuCvB,CAACrb,IAEJ,MAAMwb,GAAU1b,EAAAA,EAAAA,KAAQ,KACtB,MAAM2a,EAAU,IACVK,GAAiB,MACjBC,GAAmB,IAGzB,IAAIU,EAAcb,GAAa,GAK/B,OAJID,IACFc,GAAcC,EAAAA,EAAAA,IAAO,CAACf,KAAkBc,MAGnCE,EAAAA,EAAAA,IAAY,IACdlB,EAAQW,QAAQ5f,IACjB,MAAMkD,EAAO8b,EAAUhf,GACvB,OAAKkD,MAIAkd,EAAAA,EAAAA,IAAiBld,EAAMmd,EAAAA,OAIvBT,IAIEU,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa/d,EAAMwc,EAAUhf,QAAKoE,EAAWpE,IAAOmf,GAAgBS,QAExFZ,OAAW5a,EAAW6b,KACxB,CAACX,EAAeC,EAAiBP,EAAWG,EAAeS,EAAQpd,EAAM4c,KAErEoB,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBf,EAAeK,EAASpU,QAAQgU,IAE3Ee,GAAqBpe,EAAAA,EAAAA,KAAaqE,IACtCiZ,EAAUjZ,EAAEgH,cAAc8B,SACzB,IAGGkR,GAAepY,EAAAA,EAAAA,IAAuB,MACtCqV,GAAgBgD,EAAAA,GAAAA,GAA0BD,EAAcpc,GAASkZ,IACjE8C,GAAeA,EAAYtf,OAAS,GACtCue,EAAiB,CAAEzf,GAAIwgB,GAAuB,IAAX9C,EAAe,EAAIA,OAEvD,oBAAoB,GAEjBoD,EACJ,0BAAKje,UAAU,eAAeO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACtD,mBAACK,EAAA,EAAD,CACEC,OAAK,EACLC,MAAM,cACN1B,KAAK,UACL2B,UAAWpC,EAAK,SAChBM,QAAS4c,GAET,wBAAG7c,UAAU,gBAEf,mBAACke,GAAA,EAAD,CACE5W,IAAKkF,EACLK,MAAOkQ,EACPhQ,SAAU+Q,EACVK,UAAWnD,EACXoD,YAAaze,EAAK,gBAKxB,OACE,mBAAC0e,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAAS0U,EACT7c,UAAU,gBACVse,OAAQL,GAEPN,MAAAA,GAAAA,EAAatf,OACZ,mBAACkgB,GAAA,EAAD,CACEve,UAAU,4BACVwe,MAAOb,EACPc,WAAYb,EACZc,gBAAiB3V,QAAQgU,GACzBzV,IAAKyW,EACLI,UAAWnD,GAEV2C,EAAYgB,KAAKxhB,GAChB,mBAACyhB,GAAA,EAAD,CACEze,IAAKhD,EACL6C,UAAU,4CACVC,QAAS,IAAM2c,EAAiB,CAAEzf,GAAAA,MAEjC4B,EAAAA,EAAAA,IAAc5B,GACb,mBAAC0hB,GAAA,EAAD,CAAiBC,OAAQ3hB,IAAOmf,EAAgB3c,EAAK,0BAAuB4B,EAAWwd,OAAQ5hB,IAE/F,mBAAC6hB,GAAA,EAAD,CAAergB,OAAQxB,QAK7BwgB,IAAgBA,EAAYtf,OAC9B,wBAAG2B,UAAU,cAAb,yBAEA,mBAACif,GAAA,EAAD,W,eC9FR,SAASC,GAAeC,GACtB,OAAIA,EAAMC,WACD,mBAGJD,EAAME,YAIJ,uBAHE,WAMX,UAAezX,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,cACtC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,gBAAiB,8BAFrDZ,EAlF4B,EAAG6gB,QAAAA,EAASC,cAAAA,EAAeC,yBAAAA,MACzE,MAAM7f,GAAOC,EAAAA,EAAAA,KAEb,GAAK0f,EAAQjhB,OA4Db,OACE,0BAAKlB,GAAG,WACLmiB,EAAQX,KAVSc,IACpB,MAAI,SAAUA,EAjDMC,CAAAA,IACpB,MAAM,KACJC,EADI,MACEC,EADF,kBACSC,EADT,UAC4BC,GAC9BJ,EASEK,EACFpgB,EADqBmgB,EAChB,cACA,UADeD,EAAmB,KAGrCG,EAAuBrgB,EAAZmgB,EAAiB,cAAsB,aAExD,OACE,mBAACzB,GAAA,EAAD,CACE1c,QAAM,EACNwG,QAASoX,EACTvf,UAAU,QACV4f,MAAOA,QAEgBre,IAAtBse,GAAmC,4BAAIE,GACxC,mBAACne,EAAA,EAAD,CAAQqe,QAAM,EAACjgB,UAAU,wBAAwBC,QArB7B,KACtBuf,EAAyB,CACvBG,KAAAA,IAEFJ,MAiB8ES,GAC5E,mBAACpe,EAAA,EAAD,CAAQqe,QAAM,EAACjgB,UAAU,wBAAwBC,QAASsf,GAAgB5f,EAAK,aAuB1EugB,CAAaT,IAlBHN,EAqBAM,EAnBjB,mBAACpB,GAAA,EAAD,CACE1c,QAAM,EACNwG,QAASoX,EACTvf,UAAU,QACV4f,MAAOV,GAAeC,IAErBA,EAAME,aAAcc,EAAAA,GAAAA,IAAqBhB,IAAS3e,EAAAA,EAAAA,GAAW2e,EAAMphB,QAAU,CAAC,QAAS,OACxF,8BACE,mBAAC6D,EAAA,EAAD,CAAQqe,QAAM,EAAChgB,QAASsf,GAAgB5f,EAAK,UAVhCwf,IAAAA,U,eC5CvB,MAiBA,IAAevX,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,oBACtC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAFpCZ,EAjBkC,EAAG2hB,cAAAA,EAAeC,oBAAAA,MACtE,GAAKD,EAAc/hB,OAInB,OACE,0BAAKlB,GAAG,iBACLijB,EAAczB,KAAI,EAAG5gB,QAAAA,EAASuiB,QAAAA,KAC7B,mBAACC,GAAA,EAAD,CACExiB,SAASyC,EAAAA,EAAAA,GAAWzC,EAAS,CAAC,QAAS,KAAM,QAAS,oBACtDyiB,UAAW,IAAMH,EAAoB,CAAEC,QAAAA,a,0BCTjD,MA0BA,IAAe1Y,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,SAClB8C,GACA,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAFpCZ,EA1BgC,EAAGoJ,IAAAA,EAAK4Y,oBAAAA,MAC1D,MAAM9gB,GAAOC,EAAAA,EAAAA,KAEP8gB,GAAahhB,EAAAA,EAAAA,KAAY,KAC7BgE,OAAOid,KAAK9Y,GACZ4Y,EAAoB,CAAE5Y,SAAKtG,MAC1B,CAACkf,EAAqB5Y,IAEnB+Y,GAAgBlhB,EAAAA,EAAAA,KAAY,KAChC+gB,EAAoB,CAAE5Y,SAAKtG,MAC1B,CAACkf,IAEEI,GAAeC,EAAAA,GAAAA,GAAiBjZ,GAEtC,OACE,mBAACkZ,GAAA,EAAD,CACEpf,OAAQoH,QAAQlB,GAChBM,QAASyY,EACThB,MAAOjgB,EAAK,gBACZ+W,WAAWlW,EAAAA,EAAAA,GAAWb,EAAK,gBAAiBkhB,GAAe,CAAC,UAC5DG,aAAcrhB,EAAK,gBACnBshB,eAAgBP,Q,cCVtB,MAAMQ,GAAkB,CACtB,eACA,eACA,eACA,eACA,eACA,eACA,gBA+RF,SAASC,GAAcC,EAAcC,EAAeC,EAAaC,EAAgBC,GAC/E,MAAMC,EAAc,IAAIC,KAAKN,EAAMC,EAAOC,EAAK,EAAG,EAAG,EAAG,GAClDK,EAAeJ,GAAW,IAAIG,KAAKH,EAAQK,cAAeL,EAAQM,WAAYN,EAAQO,UAAW,EAAG,EAAG,EAAG,GAC1GC,EAAeP,GAAW,IAAIE,KAAKF,EAAQI,cAAeJ,EAAQK,WAAYL,EAAQM,UAAW,EAAG,EAAG,EAAG,GAEhH,SAAIC,GAAgBN,EAAcM,OAEvBJ,GAAgBF,EAAcE,GAO3C,SAASK,GAAgBnV,GACvB,OAAOoV,OAAOpV,GAAOqV,SAAS,EAAG,KAGnC,SAASC,GAAUf,EAAcC,EAAeC,GAC9C,MAAQ,GAAEF,KAAQC,EAAQ,KAAKC,IAcjC,UAAe1Z,EAAAA,EAAAA,KA7TqB,EAClCwa,WAAAA,EACAC,MAAAA,EACAC,aAAAA,EACAC,WAAAA,EACA5gB,OAAAA,EACA6gB,eAAAA,EACAC,kBAAAA,EACAC,kBAAAA,EACAva,QAAAA,EACAwa,SAAAA,EACAC,oBAAAA,MAEA,MAAMjjB,GAAOC,EAAAA,EAAAA,KACPijB,EAAM,IAAInB,KACVoB,GAAsBrhB,EAAAA,EAAAA,KAAQ,IAAO2gB,EAAa,IAAIV,KAAKU,GAAc,IAAIV,MAAS,CAACU,IACvFZ,EAAUa,EAAQ,IAAIX,KAAKW,QAAS9gB,EACpCwhB,GAAaxW,EAAAA,EAAAA,GAAY5K,IACxBqhB,EAAoBC,EAAwBC,IAA4BC,EAAAA,GAAAA,IAAQ,IAEhFC,EAAcC,IAAmBpgB,EAAAA,EAAAA,IAAe6f,IAChDQ,EAAqBC,IAA0BtgB,EAAAA,EAAAA,IACpD,IAAIye,KAAK0B,EAAaxB,cAAewB,EAAavB,WAAY,KAEzD2B,EAAeC,IAAoBxgB,EAAAA,EAAAA,IACxC+e,GAAgBc,EAAoBY,cAE/BC,EAAiBC,IAAsB3gB,EAAAA,EAAAA,IAC5C+e,GAAgBc,EAAoBe,eAGhCpC,EAAcU,GAAUiB,EAAaxB,cAAewB,EAAavB,WAAYuB,EAAatB,WAC1FgC,EAAcR,EAAoB1B,cAClCmC,EAAeT,EAAoBzB,YAEzC3e,EAAAA,EAAAA,KAAU,MACH6f,GAAcphB,IACjB0hB,EAAgBP,GAChBS,EAAuB,IAAI7B,KAAKoB,EAAoBlB,cAAekB,EAAoBjB,WAAY,OAEpG,CAACiB,EAAqBnhB,EAAQohB,KAEjC7f,EAAAA,EAAAA,KAAU,KACJof,IAAiBU,GAAsBI,EAAaY,UAAYlB,EAAoBkB,YACtFX,EAAgBP,GAChBW,EAAiBzB,GAAgBc,EAAoBY,aACrDE,EAAmB5B,GAAgBc,EAAoBe,kBAExD,CAACf,EAAqBE,EAAoBV,EAAcc,IAE3D,MAAMa,EAA0B1B,GAAcuB,GAAejB,EAAIjB,eAAiBmC,GAAgBlB,EAAIhB,YAChGL,GAAWsC,GAAetC,EAAQI,eAAiBmC,GAAgBvC,EAAQK,WAC3EqC,EAAyB5B,GAAgBwB,GAAejB,EAAIjB,eAAiBmC,GAAgBlB,EAAIhB,YAEjG,cAAEsC,EAAF,iBAAiBC,EAAjB,cAAmCC,IAAkB5iB,EAAAA,EAAAA,KAAQ,IAsMrE,SAA2B2f,EAAcC,GACvC,MAAM8C,EAA0B,GAC1BC,EAA6B,GAC7BC,EAA0B,GAE1B3jB,EAAO,IAAIghB,KACjBhhB,EAAK4jB,QAAQ,GACb5jB,EAAK6jB,SAASlD,GACd3gB,EAAK8jB,YAAYpD,GACjB,MAAMqD,EAAW/jB,EAAKgkB,SAChBC,EAAuB,IAAIjD,KAAKN,EAAMC,EAAO,GAAGS,UAEtD,IAAK,IAAI8C,EAAI,EAAGA,EAAIH,EAAUG,IAC5BT,EAAcU,KAAKF,EAAuBF,EAAWG,EAAI,GAG3D,KAAOlkB,EAAKmhB,aAAeR,GAAO,CAChC,MAAMyD,EAAWpkB,EAAKohB,UACtBsC,EAAiBS,KAAKC,GACtBpkB,EAAK4jB,QAAQQ,EAAW,GAG1B,MAAMC,GAAoBX,EAAiB/lB,OAAS8lB,EAAc9lB,QAAU,EAC5E,GAAI0mB,EAAmB,EACrB,IAAK,IAAIH,EAAI,EAAGA,GAAK,EAAIG,EAAkBH,IACzCP,EAAcQ,KAAKD,GAIvB,MAAO,CAAET,cAAAA,EAAeC,iBAAAA,EAAkBC,cAAAA,GAlOxCW,CAAkBlB,EAAaC,IAC9B,CAACA,EAAcD,IAmCZmB,GAAoBvlB,EAAAA,EAAAA,KAAaqE,IACrC,MAAM8I,EAAQ9I,EAAEkJ,OAAOJ,MAAMqY,QAAQ,UAAW,IAChD,IAAKrY,EAAMxO,OAGT,OAFAolB,EAAiB,SACjB1f,EAAEkJ,OAAOJ,MAAQ,IAInB,MAAMsY,EAAQ7iB,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAIqG,OAAOH,GAAQ,KAE5CnM,EAAO,IAAIghB,KAAK0B,EAAaY,WACnCtjB,EAAK0kB,SAASD,GACd9B,EAAgB3iB,GAEhB,MAAM2kB,EAAWrD,GAAgBmD,GACjC1B,EAAiB4B,GACjBthB,EAAEkJ,OAAOJ,MAAQwY,IAChB,CAACjC,IAEEkC,GAAsB5lB,EAAAA,EAAAA,KAAaqE,IACvC,MAAM8I,EAAQ9I,EAAEkJ,OAAOJ,MAAMqY,QAAQ,UAAW,IAChD,IAAKrY,EAAMxO,OAGT,OAFAulB,EAAmB,SACnB7f,EAAEkJ,OAAOJ,MAAQ,IAInB,MAAM0Y,EAAUjjB,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAIqG,OAAOH,GAAQ,KAE9CnM,EAAO,IAAIghB,KAAK0B,EAAaY,WACnCtjB,EAAK8kB,WAAWD,GAChBlC,EAAgB3iB,GAEhB,MAAM+kB,EAAazD,GAAgBuD,GACnC3B,EAAmB6B,GACnB1hB,EAAEkJ,OAAOJ,MAAQ4Y,IAChB,CAACrC,IA4BJ,OACE,mBAAC/E,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAASA,EACTnI,UAAU,iBAEV,0BAAKA,UAAU,aACb,0BAAKA,UAAU,kBACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASkI,GAET,wBAAGnI,UAAU,gBAGf,6BACGL,EAAM,YAAWokB,EAAe,KAChC,IACAD,GAGH,mBAACliB,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN6K,SAAUuX,EACVjkB,QAAUikB,OAA2C3iB,EA7H/D,WACEgiB,GAAwBmC,IACtB,MAAMC,EAAW,IAAIjE,KAAKgE,GAG1B,OAFAC,EAASpB,SAASoB,EAAS9D,WAAa,GAEjC8D,OA0HD,wBAAG3lB,UAAU,mBAGf,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN6K,SAAUsX,EACVhkB,QAAUgkB,OAA2C1iB,EA9H/D,WACEgiB,GAAwBmC,IACtB,MAAMC,EAAW,IAAIjE,KAAKgE,GAG1B,OAFAC,EAASpB,SAASoB,EAAS9D,WAAa,GAEjC8D,OA2HD,wBAAG3lB,UAAU,iBAKnB,0BAAKA,UAAU,oBACb,0BAAKA,UAAU,iBACZkhB,GAAgBvC,KAAK2C,GACpB,0BAAKthB,UAAU,4BACb,+BAAOL,EAAK2hB,OAGf6C,EAAcxF,KAAKmG,GAClB,0BAAK9kB,UAAU,uBAAsB,+BAAO8kB,MAE7CV,EAAiBzF,KAAKmG,GACrB,0BACEc,KAAK,SACLC,SAAU,EACV5lB,QAAS,KAAM6lB,OA1IDplB,EA0IkBokB,OAzI1CzB,GAAiBqC,IACf,MAAMC,EAAW,IAAIjE,KAAKgE,GAK1B,OAJAC,EAASrB,QAAQ5jB,GACjBilB,EAASpB,SAASR,GAClB4B,EAASnB,YAAYV,GAEd6B,KAPX,IAA0BjlB,GA2IdV,WAAW8D,EAAAA,EAAAA,GACT,aACAqd,GACE2C,EAAaC,EAAce,EAAUxC,EAAeO,OAAMthB,EAAWghB,EAAaM,EAAMrB,GAEtF,WACGsD,EAAW,YAAc,GAChCrD,IAAgBU,GAAU2B,EAAaC,EAAce,IAAa,eAGjEA,GACD,+BAAOA,MAIZT,EAAc1F,KAAKmG,GAClB,0BAAK9kB,UAAU,uBAAsB,+BAAO8kB,QAKjDtC,GAzGD,0BAAKxiB,UAAU,cACb,4BACE8M,KAAK,OACL9M,UAAU,eACV+lB,UAAU,UACVlZ,MAAO2W,EACPzW,SAAUkY,EACVe,QAAS/C,EACTgD,OAAQ/C,IARZ,IAWE,4BACEpW,KAAK,OACL9M,UAAU,eACV+lB,UAAU,UACVlZ,MAAO8W,EACP5W,SAAUuY,EACVU,QAAS/C,EACTgD,OAAQ/C,KAyFZ,0BAAKljB,UAAU,UACb,mBAAC4B,EAAA,EAAD,CAAQ3B,QAxJd,WACE0iB,EAASS,KAwJFZ,EAkEX,SAA2B7iB,EAAce,GACvC,MAAM4gB,GAAM4E,EAAAA,EAAAA,IAAmBxlB,EAAMf,EAAKwmB,MAG1C,OAAI7E,KAFU4E,EAAAA,EAAAA,IAAmB,IAAIxE,KAAQ/hB,EAAKwmB,MAGzCxmB,EAAK,0CAA0CymB,EAAAA,EAAAA,IAAW1lB,IAG5Df,EAAK,sCAAuC,CAAC2hB,GAAK8E,EAAAA,EAAAA,IAAW1lB,KA1E1C2lB,CAAkB1mB,EAAMyjB,GAAgBX,GAE3DC,GACC,mBAAC9gB,EAAA,EAAD,CAAQ3B,QAAS2iB,EAAqB3C,QAAM,GACzCyC,QCjPb,IAAe9a,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACQ,CACL0jB,WAAY1jB,EAAO4nB,8BAGvB,CAAClnB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBAAwB,0BAPRZ,EAtB+C,EACjEkD,OAAAA,EAAQygB,WAAAA,EAAYmE,qBAAAA,EAAsBC,qBAAAA,MAE1C,MAAMC,GAAmB/mB,EAAAA,EAAAA,KAAagB,IACpC6lB,EAAqB,CAAEG,UAAWhmB,EAAKimB,UAAY,MACnDH,MACC,CAACA,EAAsBD,IAEpB5mB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC,GAAD,CACE+B,OAAQA,EACRygB,WAAYA,EACZG,YAAU,EACVE,kBAAmB9iB,EAAK,cACxBwI,QAASqe,EACT7D,SAAU8D,QC2EhB,IAAe7e,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,EAAS6oB,WAAAA,MAClB,MAAM,SAAElW,IAAamW,EAAAA,EAAAA,IAAyBnoB,IAAW,IACnD,gBAAEooB,GAAqBpW,IAAYqW,EAAAA,EAAAA,IAA4BroB,EAAQX,EAAS2S,IAAc,GAC9FrQ,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQX,EAAQY,QAQxC,MAAO,CACLmoB,iBAAkBF,GAAcE,EAChCE,YATkB3mB,IAAQtB,EAAAA,EAAAA,IAAcsB,EAAKlD,KAC3C8pB,EAAAA,EAAAA,KAAuBjoB,EAAAA,EAAAA,IAAWN,GAAQwoB,EAAAA,EAAAA,IAAqB7mB,UAC/DkB,EAQF4lB,6BANmC9mB,IAAQ+mB,EAAAA,EAAAA,IAAiB/mB,KAAUymB,EAOtEO,iBANuBhnB,IAAQinB,EAAAA,EAAAA,IAAiBjnB,OASpD,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,6BApBFZ,EAnEkD,EACpEkD,OAAAA,EACAilB,WAAAA,EACA7oB,QAAAA,EACAwpB,MAAAA,EACAT,gBAAAA,EACAE,YAAAA,EACAG,6BAAAA,EACAE,iBAAAA,EACAlf,QAAAA,EACAqf,eAAAA,EACAC,wBAAAA,MAEA,MAAMC,GAA4BhoB,EAAAA,EAAAA,KAAY,KAC5C,MAAMsT,EAAauU,MAAAA,GAAAA,EAAOI,SACtBJ,EAAMI,SAAShJ,KAAI,EAAGxhB,GAAAA,KAASA,IAC/B,CAACY,EAAQZ,IACbqqB,EAAe,CAAExU,WAAAA,EAAY4U,oBAAoB,IACjDzf,MACC,CAACqf,EAAgBzpB,EAAQZ,GAAIgL,EAASof,IAEnCM,GAA6BnoB,EAAAA,EAAAA,KAAY,KAC7C,MAAMsT,EAAauU,MAAAA,GAAAA,EAAOI,SACtBJ,EAAMI,SAAShJ,KAAI,EAAGxhB,GAAAA,KAASA,IAC/B,CAACY,EAAQZ,IACTypB,EACFa,EAAwB,CAAEzU,WAAAA,IAE1BwU,EAAe,CACbxU,WAAAA,EACA4U,oBAAoB,IAGxBzf,MACC,CAACof,EAAOxpB,EAAQZ,GAAIypB,EAAYze,EAASsf,EAAyBD,IAE/D7nB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACye,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAASA,EACT2f,QAASnmB,IAAWmlB,EAAkBe,OAA6BtmB,EACnEvB,UAAU,SACV4f,MAAOjgB,EAAK,8BAEZ,4BAAIA,EAAK,kCACRwnB,GACC,4BAAIxnB,EAAK,8BAA+B,EAAG,MAE5C0nB,GACC,4BAAI1nB,EAAK,+BAAgC,EAAG,MAE7CmnB,GACC,mBAACllB,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASynB,GACtEV,IAAexmB,EAAAA,EAAAA,GAAWb,EAAK,iCAAkCqnB,KAChEA,GAAernB,EAAK,2CAG1B,mBAACiC,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAAS4nB,GACtEloB,EAAKmnB,EAAkB,gCAAkC,WAE5D,mBAACllB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASkI,GAAUxI,EAAK,gBCJ/E,IAAeiI,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAMopB,GAAgBhpB,EAAAA,EAAAA,IAAcJ,GAC9BqpB,GAAiBC,EAAAA,EAAAA,IAAqBvpB,EAAQC,GAC9C0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1BmhB,IAAczf,IAAQ6nB,EAAAA,EAAAA,IAAc7nB,GACpC8nB,IAAY9nB,IAAQ+mB,EAAAA,EAAAA,IAAiB/mB,GACrC+nB,IAAiB/nB,IAAQinB,EAAAA,EAAAA,IAAiBjnB,GAMhD,MAAO,CACL0nB,cAAAA,EACAC,eAAAA,EACAlI,UAAAA,EACAqI,QAAAA,EACAC,aAAAA,EACAC,aAXoBN,IAAkBC,GAAmBI,GAAgBD,EAYzEnB,YAXkB3mB,IAAQtB,EAAAA,EAAAA,IAAcsB,EAAKlD,KAC3C8pB,EAAAA,EAAAA,KAAuBjoB,EAAAA,EAAAA,IAAWN,GAAQwoB,EAAAA,EAAAA,IAAqB7mB,UAC/DkB,MAYN,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,gBAvBpCZ,EA/D+C,EACjEkD,OAAAA,EACA/C,UAAAA,EACAD,OAAAA,EACAmhB,UAAAA,EACAqI,QAAAA,EACAC,aAAAA,EACAC,aAAAA,EACArB,YAAAA,EACA7e,QAAAA,EACAmgB,WAAAA,MAEA,MAAMC,GAAyB7oB,EAAAA,EAAAA,KAAY,KACzC4oB,EAAW,CACT3pB,OAAAA,EAAQC,UAAAA,EAAW4pB,SAAS,IAE9BrgB,MACC,CAACmgB,EAAY3pB,EAAQC,EAAWuJ,IAE7BsgB,GAAmB/oB,EAAAA,EAAAA,KAAY,KACnC4oB,EAAW,CACT3pB,OAAAA,EAAQC,UAAAA,EAAW4pB,SAAS,EAAOE,WAAW,EAAMC,UAAU,IAEhExgB,MACC,CAACxJ,EAAQC,EAAWuJ,EAASmgB,IAE1B3oB,GAAOC,EAAAA,EAAAA,KAcb,OACE,mBAACye,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAASA,EACTnI,UAAU,MACV4f,MAAOjgB,EAAK,yBAEZ,4BAjBOA,EADLmgB,EACU,yBAGVqI,GAAWC,EACD,kBAGF,wBAWV,mBAACxmB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASwoB,GACvD9oB,EAAK,cAEP0oB,GACC,mBAACzmB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASsoB,GACvDvB,GACGxmB,EAAAA,EAAAA,GAAWb,EAAK,8BAA+BqnB,IAC/CrnB,EAAK,qDAGb,mBAACiC,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASkI,GAAUxI,EAAK,gBC3D/E,IAAeiI,EAAAA,EAAAA,KAxB6B,EAC1CjG,OAAAA,EACAinB,oBAAAA,EAAsB,EACtBzgB,QAAAA,EACA0gB,QAAAA,MAEA,MAAMlpB,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACye,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAASA,EACTnI,UAAU,YACV4f,MAAOjgB,EAAK,+BAEZ,4BAAIA,EAAK,oCAAqCipB,EAAqB,MACnE,mBAAChnB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAAS4oB,GACvDlpB,EAAK,gBAER,mBAACiC,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASkI,GAAUxI,EAAK,e,cCK/E,MAyEA,IAAeiI,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUkoB,WAAAA,MACT,MAAQ5T,WAAY8V,GAAuBpqB,EAAOqqB,kBAAoB,IAChE,gBAAEjC,IAAoBkC,EAAAA,EAAAA,IAAgCtqB,GACtD2B,GAAO4oB,EAAAA,EAAAA,IAAkBvqB,GAQ/B,MAAO,CACLoqB,mBAAAA,EACAhC,iBAAkBF,GAAcE,EAChCE,YAVkB3mB,IAAQtB,EAAAA,EAAAA,IAAcsB,EAAKlD,KAC3C8pB,EAAAA,EAAAA,KAAuBjoB,EAAAA,EAAAA,IAAWN,GAAQwoB,EAAAA,EAAAA,IAAqB7mB,UAC/DkB,EASF4lB,6BAPmC9mB,IAAQ+mB,EAAAA,EAAAA,IAAiB/mB,KAAUymB,EAQtEO,iBAPuBhnB,IAAQinB,EAAAA,EAAAA,IAAiBjnB,OAUpD,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBACA,0BACA,2BAvBgBZ,EAzE0D,EAC5EkD,OAAAA,EACAilB,WAAAA,EACAkC,mBAAAA,EACAhC,gBAAAA,EACAE,YAAAA,EACAG,6BAAAA,EACAE,iBAAAA,EACAlf,QAAAA,EACAqf,eAAAA,EACAC,wBAAAA,EACAyB,sBAAAA,MAEA,MAAMnG,GAAaxW,EAAAA,EAAAA,GAAY5K,GAEzB+lB,GAA4BhoB,EAAAA,EAAAA,KAAY,KAC5CyI,IACAqf,EAAe,CAAExU,WAAY8V,EAAoBlB,oBAAoB,MACpE,CAACJ,EAAgBsB,EAAoB3gB,IAElC0f,GAA6BnoB,EAAAA,EAAAA,KAAY,KACzCknB,EACFa,EAAwB,CAAEzU,WAAY8V,IAEtCtB,EAAe,CAAExU,WAAY8V,EAAoBlB,oBAAoB,IAGvEzf,MACC,CAACye,EAAYze,EAASsf,EAAyBqB,EAAoBtB,IAEhE7nB,GAAOC,EAAAA,EAAAA,KASb,IANAsD,EAAAA,EAAAA,KAAU,MACHvB,GAAUohB,GACbmG,MAED,CAACA,EAAuBvnB,EAAQohB,IAE9B+F,EAIL,OACE,mBAACzK,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAASA,EACT2f,QAAShB,OAAkBvlB,EAAYsmB,EACvC7nB,UAAU,SACV4f,MAAOjgB,EAAK,oCAEZ,4BAAIA,EAAK,gCACRwnB,GACC,2GAEDE,GACC,gFAEDP,GACC,mBAACllB,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASynB,GACtEV,GACGxmB,EAAAA,EAAAA,GAAWb,EAAK,6BAA8BqnB,IAC9CrnB,EAAK,2CAGb,mBAACiC,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAAS4nB,GACtEloB,EAAKmnB,EAAkB,gCAAkC,WAE5D,mBAACllB,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASkI,GAAUxI,EAAK,gB,eChF/E,MAkEA,IAAeiI,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,SAClB8C,GAAW,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAC9D,iBAAkB,2BAFFZ,EAlEqC,EACvDkD,OAAAA,EACAqR,WAAAA,EACAmW,eAAAA,EACAD,sBAAAA,EACA/gB,QAAAA,MAEA,MAAOihB,EAAgBC,IAAqBpmB,EAAAA,EAAAA,IAA0B,SAC/DqmB,EAAaC,IAAkBtmB,EAAAA,EAAAA,IAAS,IAEzCumB,EAAe,KACnBL,EAAe,CAAEnW,WAAAA,EAAYyW,OAAQL,EAAgBE,YAAAA,IACrDJ,IACA/gB,KAGIuhB,GAAqBhqB,EAAAA,EAAAA,KAAamN,IACtCwc,EAAkBxc,KACjB,IAEG8c,GAA0BjqB,EAAAA,EAAAA,KAAaqE,IAC3CwlB,EAAexlB,EAAEkJ,OAAOJ,SACvB,IAEGlN,GAAOC,EAAAA,EAAAA,KAEPgqB,EAA8D,CAClE,CAAE/c,MAAO,OAAQgd,MAAOlqB,EAAK,2BAC7B,CAAEkN,MAAO,WAAYgd,MAAOlqB,EAAK,+BACjC,CAAEkN,MAAO,cAAegd,MAAOlqB,EAAK,kCACpC,CAAEkN,MAAO,aAAcgd,MAAOlqB,EAAK,kCACnC,CAAEkN,MAAO,YAAagd,MAAOlqB,EAAK,+BAClC,CAAEkN,MAAO,QAASgd,MAAOlqB,EAAK,6BAGhC,GAAKqT,EAIL,OACE,mBAACqL,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAASA,EACT2f,QAASnmB,EAAS6nB,OAAejoB,EACjCvB,UAAU,SACV4f,MAAOjgB,EAAK,6BAEZ,mBAACmqB,GAAA,EAAD,CACE9N,KAAK,iBACL+N,QAASH,EACT7c,SAAU2c,EACVM,SAAUZ,IAEZ,mBAAClL,GAAA,EAAD,CACE2L,MAAOlqB,EAAK,iCACZkN,MAAOyc,EACPvc,SAAU4c,IAEZ,mBAAC/nB,EAAA,EAAD,CAAQE,MAAM,SAAS9B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASupB,GACtE7pB,EAAK,sBAER,mBAACiC,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASkI,GAAUxI,EAAK,gBC4D/E,IAAeiI,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAQoO,KAAMmd,IAAoBpD,EAAAA,EAAAA,IAAyBnoB,IAAW,IAChE,UAAEwrB,IAAclB,EAAAA,EAAAA,IAAgCtqB,GAChDyrB,GAAYC,EAAAA,EAAAA,IAAgC1rB,IAC1CsU,WAAY8V,GAAuBpqB,EAAOqqB,kBAAoB,GAEtE,MAAO,CACLnC,WAAgC,cAApBqD,EACZI,uBAAuBC,EAAAA,EAAAA,IAA4B5rB,GACnD6rB,kBAAmBL,EACnBM,kBAAmBL,EACnBrB,mBAAAA,MAGJ,CAAC1pB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBAAyB,wCAf7DZ,EA1GoD,EACtEgsB,QAAAA,EACAjP,SAAAA,EACAyO,gBAAAA,EACArD,WAAAA,EACAyD,sBAAAA,EACAE,kBAAAA,EACAC,kBAAAA,EACA1B,mBAAAA,EACAI,sBAAAA,EACAwB,mCAAAA,MAEA,MAAOC,EAAmBC,EAAiBC,IAAoB1H,EAAAA,GAAAA,MACxD2H,EAAmBC,EAAiBC,IAAoB7H,EAAAA,GAAAA,MAE/DjgB,EAAAA,EAAAA,KAAU,KACDsY,GAAamP,GAAsBG,OAMtCvpB,GALA0pB,EAAAA,GAAAA,GAAyB,CACzBC,YAAaN,EACbO,SAAUP,EACVQ,MAAOlC,KAGV,CAAC1N,EAAUmP,EAAmBG,EAAmBF,EAAiB1B,IAErE,MAAMmC,GAA4B9e,EAAAA,EAAAA,GAAY8d,QAAyB9oB,GAAW,GAC5E+pB,EAAiC9P,EAAW6O,EAAwBgB,EAEpE1rB,GAAOC,EAAAA,EAAAA,KAEP2rB,EAAyB5rB,EAAK,kCAAmC2rB,EAAgC,KAEjGtrB,GAAY8D,EAAAA,EAAAA,GAChB,uBACA2mB,GAAW,gBACXjP,GAAY,SAGd,OACE,0BAAKxb,UAAWA,GACd,0BAAKA,UAAU,8BACb,mBAAC4B,EAAA,EAAD,CACEE,MAAM,cACND,OAAK,EACL5B,QAASipB,EACTnnB,UAAU,oBAEV,wBAAG/B,UAAU,gBAEf,2BAAMA,UAAU,6BAA6B4f,MAAO2L,GACjDA,KAGAlB,GACD,0BAAKrqB,UAAU,gCACQ,cAApBiqB,GACC,mBAAC7nB,EAAA,EAAD,CACEC,KAAK,UACLN,UAAU,mBACV9B,QAASyqB,GAET,2BAAM1qB,UAAU,aACbL,EAAK,aAIX6qB,GACC,mBAACpoB,EAAA,EAAD,CACEC,KAAK,OACLpC,QAAS8qB,EACTpe,UAAW6d,EACXzoB,UAAWpC,EAAK,gCAEhB,2BAAMK,UAAU,aACbL,EAAK,YAIZ,mBAACyC,EAAA,EAAD,CACEopB,aAAW,EACXnpB,KAAK,SACLpC,QAAS2qB,EACTje,UAAW4d,EACXxoB,UAAWpC,EAAK,iCAEhB,2BAAMK,UAAU,aACbL,EAAK,cAMhB,mBAAC,GAAD,CACEgC,OAAQgpB,EACR/D,WAAYA,EACZze,QAAS0iB,IAEX,mBAAC,GAAD,CACElpB,OAAQmpB,EACR3iB,QAAS6iB,EACThY,WAAY8V,S,oCC5IpB,SACE2C,IAGA,MAAMC,GAAY/lB,EAAAA,EAAAA,IAAuB,MAEnCqV,GAAgBtb,EAAAA,EAAAA,KAAaqE,IACnB,UAAVA,EAAE5D,KACYurB,EAAUvlB,UAAYrK,SAAS6vB,eAG/CF,MAED,CAACA,IAQJ,OANAvoB,EAAAA,EAAAA,KAAU,KACRQ,OAAOC,iBAAiB,UAAWqX,GAAe,GAE3C,IAAMtX,OAAOE,oBAAoB,UAAWoX,KAClD,CAACA,IAEG0Q,G,wBCWT,MAyDA,IAAe9jB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1BitB,EAAoBvrB,IAAQ6mB,EAAAA,EAAAA,IAAqB7mB,GAOvD,MAAO,CACLA,KAAAA,EACAwrB,gBARsBD,GAAoB5sB,EAAAA,EAAAA,IAAWN,EAAQktB,QAAqBrqB,EASlFuqB,UAReC,EAAAA,EAAAA,IAAmBrtB,EAAQC,GAS1CqtB,QARc3rB,GACZ4rB,EAAAA,EAAAA,IAAkB5rB,GAAM6rB,EAAAA,EAAAA,IAAqBxtB,IAASytB,EAAAA,EAAAA,IAAuBztB,SAC7E6C,KARY9C,EAzDoC,EACtDE,OAAAA,EACA0B,KAAAA,EACAwrB,gBAAAA,EACAC,SAAAA,EACAE,QAAAA,EACAI,aAAAA,EACAnsB,QAAAA,MAEA,MAAO0qB,EAAmBC,EAAiBC,IAAoB1H,EAAAA,GAAAA,MACxDkJ,EAAuBC,EAAqBC,IAAwBpJ,EAAAA,GAAAA,KAErEqJ,GAAiBC,EAAAA,GAAAA,GAAsB,CAC3CpsB,KAAAA,EACAwrB,gBAAAA,EACAC,SAAAA,EACAE,QAAAA,EACAU,aAAc9B,EACd+B,uBAAwBL,IACvB,GAEGM,EAAc,KAClB3sB,EAAQtB,IAGJ+sB,EAAYmB,GAAmBD,GAErC,GAAKvsB,EAIL,OACE,mBAACue,GAAA,EAAD,CACE5e,UAAU,oCACVC,QAAS2sB,EACTJ,eAAgBA,EAChBd,UAAWA,IAEV3sB,EAAAA,EAAAA,IAAcJ,GACb,mBAACkgB,GAAA,EAAD,CAAiBE,OAAQpgB,EAAQytB,aAAcA,EAAcU,WAAW,UAExE,mBAAC9N,GAAA,EAAD,CAAergB,OAAQA,EAAQytB,aAAcA,EAAcU,WAAW,UAExE,mBAACC,GAAA,EAAD,CACEprB,OAAQgpB,EACRxiB,QAAS0iB,EACTxqB,KAAMA,IAER,mBAAC,KAAD,CACEsB,OAAQ0qB,EACRlkB,QAASokB,EACT5tB,OAAQA,S,eClDhB,MAGMquB,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAO,GA6EnD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAQwuB,QAASC,GAAezuB,EAAO0uB,SACjCC,EAAY3uB,EAAO4uB,MAAMpR,MACzB,qBAAEqR,GAAyB7uB,EAAO8uB,aAExC,MAAO,CACLL,WAAAA,EACAE,UAAAA,EACAE,qBAAAA,MAGJ,CAACnuB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,eACA,kBACA,WACA,yBACA,6BAjBgBZ,EA3E8C,EAChE0uB,WAAAA,EAAYE,UAAAA,EAAWE,qBAAAA,EACvBE,QAAAA,EAASC,aAAAA,EAAcC,gBAAAA,EAAiBC,SAAAA,EACxCC,uBAAAA,EAAwBC,wBAAAA,MAGxB,MAAMC,GAAcpoB,EAAAA,EAAAA,IAAuB,OAI3CzC,EAAAA,EAAAA,KAAU,KACR8pB,IAAa,KACXU,IAEAC,SAED,CAACD,EAAcC,KAElBK,EAAAA,GAAAA,GAAoBD,EAAY5nB,SAAUgnB,GAE1C,MAAMP,GAAcltB,EAAAA,EAAAA,KACjBvC,IACCywB,EAAS,CAAEzwB,GAAAA,EAAI8wB,sBAAsB,IACrCR,IACA3nB,YAAW,KACT+nB,EAAuB,CAAE1wB,GAAAA,MA9BD,OAiC5B,CAACywB,EAAUC,EAAwBJ,IAG/B9tB,GAAOC,EAAAA,EAAAA,KAEb,OACE,0BAAKI,UAAU,gCACZmtB,GACC,0BAAKntB,UAAU,oBAAoBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAC3D,0BAAK+F,IAAKymB,EAAa/tB,UAAU,0BAC9BmtB,EAAWxO,KAAKI,GACf,0BAAK/e,UAAU,gBAAgBC,QAAS,IAAM2sB,EAAY7N,GAASxe,IAAKZ,EAAKkc,MAAQ,WAAQta,GAC3F,mBAACrB,EAAA,EAAD,CAAQI,KAAM+sB,EAAUtO,KACxB,0BAAK/e,UAAU,kBAAiBQ,EAAAA,EAAAA,IAAWymB,EAAAA,EAAAA,IAAuBoG,EAAUtO,KA7C/E,WAmDNwO,GACC,0BAAKvtB,UAAU,uBACb,yBAAIA,UAAU,2CAA2CO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAChF5B,EAAK,UAEN,mBAACiC,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACNC,UAAU,qBACV9B,QAAS6tB,EACTjS,MAAOlc,EAAKkc,OAEZ,wBAAG7b,UAAU,iBAGhButB,EAAqB5O,KAAKxhB,GACzB,mBAAC,GAAD,CACEwB,OAAQxB,EACR8C,QAAS2sB,Y,0BCsBvB,UAAehlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAChC,IAAK0B,EACH,MAAO,GAGT,MAAMurB,GAAoB1E,EAAAA,EAAAA,IAAqB7mB,GAE/C,MAAO,CACLA,KAAAA,EACA6tB,aAAcxvB,EAAOwvB,gBACjBtC,GAAqB,CAAEC,iBAAiB7sB,EAAAA,EAAAA,IAAWN,EAAQktB,QAGnE,CAACxsB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAhBgBZ,EA9E2C,EAC7DV,QAAAA,EACAowB,YAAAA,EACAxvB,OAAAA,EACA0B,KAAAA,EACAwrB,gBAAAA,EACArsB,aAAAA,EACA0uB,aAAAA,MAEA,MAAME,GAAiBlZ,EAAAA,EAAAA,IAA4BnX,GAC7CswB,GAAe9Z,EAAAA,EAAAA,IAASjT,EAAAA,EAAAA,IAAoBvD,EAAS,UACrDuwB,EAAevlB,SAAQwlB,EAAAA,EAAAA,IAAqBxwB,IAE5C6uB,GAAcltB,EAAAA,EAAAA,KAAY,KAC9BF,EAAa,CAAEb,OAAAA,EAAQC,UAAWb,EAAQZ,OACzC,CAACwB,EAAQa,EAAczB,EAAQZ,KAE5BwC,GAAOC,EAAAA,EAAAA,KAEP8rB,EAAYmB,GAAmBD,GAErC,GAAKvsB,EAIL,OACE,mBAACue,GAAA,EAAD,CACE5e,UAAU,kCACVwH,QAASxF,EAAAA,GACT/B,QAAS2sB,EACTlB,UAAWA,GAEX,mBAACxrB,EAAA,EAAD,CACEG,KAAMA,EACNC,KAAMurB,EACN2C,kBAAgB,EAChBC,gBAAiB5C,MAAAA,OAAF,EAAEA,EAAiB6C,OAClCR,aAAcA,IAEhB,0BAAKluB,UAAU,QACb,0BAAKA,UAAU,YACb,0BAAKA,UAAU,SACb,yBAAIO,IAAI,SAAQC,EAAAA,EAAAA,IAAWkd,EAAAA,EAAAA,GAAa/d,EAAMU,EAAMwrB,KACnDxrB,EAAKsuB,YAAc,mBAACC,GAAA,EAAD,OAEtB,0BAAK5uB,UAAU,gBACb,mBAAC6uB,GAAA,EAAD,CAAM7uB,UAAU,SACb8uB,EAAAA,EAAAA,IAAoBnvB,EAAqB,IAAf5B,EAAQ2C,SAKzC,0BAAKV,UAAU,YACb,0BAAKA,UAAU,UAAUO,IAAI,QASvC,SACEZ,EAAc5B,EAAqBqS,EAAkB+d,EAAsBG,GAE3E,OAAKle,EAKH,2BAAMpQ,UAAU,iBACd,0BAAK5D,IAAKgU,EAASG,IAAI,GAAGvQ,UAAWsuB,EAAe,aAAU/sB,KAC7D8Q,EAAAA,EAAAA,IAAgBtU,IAAY,wBAAGiC,UAAU,eACzCQ,EAAAA,EAAAA,IAAWuuB,EAAAA,EAAAA,IAAsBpvB,EAAM5B,GAAS,GAAO,CAAC,QAAS,aAAc,CAAEixB,UAAWb,MAPxF3tB,EAAAA,EAAAA,IAAWuuB,EAAAA,EAAAA,IAAsBpvB,EAAM5B,IAZrCkxB,CAAqBtvB,EAAM5B,EAASswB,GAAgBD,EAAgBD,EAAaG,WChD9F,IAAe1mB,EAAAA,EAAAA,KA5CmB,EAChCsnB,WAAAA,EAAYzD,SAAAA,MAEZ,MAAM0D,GAAc1tB,EAAAA,EAAAA,KAAQ,IAmB9B,SAAgCytB,GAE9B,GADgBA,EAAWE,MAAM,0BACpB,CACX,MAAM1uB,EAAO,IAAIghB,KAAKwN,GACtB,MAAO,CAAC,CAAExuB,KAAAA,EAAMkC,MAAMsjB,EAAAA,EAAAA,IAAmBxlB,KAG3C,MAAM2uB,EAAa,GACbC,EAAc,IAAI5N,KAClBoC,EAAcwL,EAAY1N,cAC1B2N,EAAaD,EAAYtL,UAAa,IAAItC,KAAM,GAAEoC,KAAeoL,KAAelL,UAClFF,EACAA,EAAc,EAElB,IAAK,IAAIc,EAAI,EAAGA,EA3CO,EA2CeA,IAAK,CACzC,MAAMlkB,EAAO,IAAIghB,KAAM,GAAE6N,EAAa3K,KAAKsK,KAC3CG,EAAWxK,KAAK,CAAEnkB,KAAAA,EAAMkC,MAAMsjB,EAAAA,EAAAA,IAAmBxlB,KAGnD,OAAO2uB,EAtC2BG,CAAuBN,IAAa,CAACA,IACvE,OACE,8BAASlvB,UAAU,6CAChBmvB,EAAYxQ,KAAI,EAAGje,KAAAA,EAAMkC,KAAAA,KAEtB,0BACE3C,QAAS,IAAMwrB,EAAS/qB,GACxBV,UAAU,YACVG,IAAKyC,GAEL,wBAAG5C,UAAU,kBACb,+BAAO4C,U,0BC2BnB,MAGMoqB,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAK,GA6NjD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IAAuB,MACtB,MAAQwd,KAAMC,GAAczd,EAAOud,OAC3BC,KAAMmR,GAAc3uB,EAAO4uB,OAE3BJ,QAASuC,GAAoB/wB,EAAOgxB,aAAe,GAE3D,IAAKD,EACH,MAAO,CACLtT,UAAAA,EACAkR,UAAAA,GAIJ,MAAM,cACJ/Q,EADI,SACWqL,EADX,aACqBuG,GACvBxvB,GACE,eACJixB,EADI,cACYC,EADZ,aAC2BC,EAD3B,cACyChe,GAC3CnT,EAAO8uB,cACHrQ,QAAS2S,EAAe5C,QAAS6C,GAAkBH,GAAiB,IACpEzS,QAAS6S,EAAc9C,QAAS+C,GAAiBJ,GAAgB,IACjEK,SAAUC,GAA2BxI,EAG7C,MAAO,CACLrL,cAAAA,EACAmT,gBAAAA,EACAO,aAAAA,EACAC,aAAAA,EACAH,cAAAA,EACAC,cAAAA,EACAne,SATeC,MAAAA,GAAH,UAAGA,EAAejP,YAAlB,aAAG,EAAqBgP,SAUpCue,uBAAAA,EACAhU,UAAAA,EACAkR,UAAAA,EACAsC,eAAAA,EACAzB,aAAAA,MAGJ,CAAC9uB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,WACA,yBACA,uBACA,2BA5CgBZ,EA3N2C,EAC7D0vB,YAAAA,EAAae,WAAAA,EAAYkB,gBAAAA,EAAiB9T,cAAAA,EAC1CmT,gBAAAA,EAAiBO,aAAAA,EAAcC,aAAAA,EAAcH,cAAAA,EAAeC,cAAAA,EAC5Dne,SAAAA,EAAUue,uBAAAA,EAAwBhU,UAAAA,EAAWkR,UAAAA,EAAWsC,eAAAA,EAAgBzB,aAAAA,EACxET,QAAAA,EAAS4C,mBAAAA,EAAoBzC,SAAAA,EAAUC,uBAAAA,EAAwByC,qBAAAA,EAAsBC,sBAAAA,MAErF,MAAM5wB,GAAOC,EAAAA,EAAAA,MAEN4wB,EAAqBC,IAA0BxtB,EAAAA,EAAAA,KAAkB,IACjEytB,EAAsBC,IAA2B1tB,EAAAA,EAAAA,KAAkB,GAEpE2tB,GAAiBlxB,EAAAA,EAAAA,KAAY,EAAGkb,UAAAA,MAChCsT,GAAgBtT,IAAciW,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBxjB,KAAM,OACNgkB,MAAO3C,SAIZ,CAACD,EAAcoC,EAAsBnC,IAElC4C,GAAkBrxB,EAAAA,EAAAA,KACrBvC,IACCywB,EAAS,CAAEzwB,GAAAA,EAAI8wB,sBAAsB,IAEjC9wB,IAAOmf,GACTuR,EAAuB,CAAE1wB,GAAAA,IAGtB6E,EAAAA,IACHyrB,MAGJ,CAACnR,EAAesR,EAAUC,EAAwBJ,IAG9CuD,GAAwBtxB,EAAAA,EAAAA,KAAavC,IACzCozB,EAAsB,CAAEpzB,GAAAA,MACvB,CAACozB,IAEEV,GAAepuB,EAAAA,EAAAA,KAAQ,KAC3B,IAAK0sB,GAAgBA,EAAY8C,WAAW,MAAQ9C,EAAY9vB,OAAS,EACvE,OAAO6yB,GAAAA,EAGT,MAAMC,EAAkB1B,EACpBA,EAAgB1S,QAAQ5f,IACxB,MAAMmD,EAAO+sB,EAAUlwB,GACvB,IAAKmD,EACH,OAAO,EAGT,MAAM8wB,GAAWC,EAAAA,EAAAA,IAAgB/wB,GACjC,OAAQ8wB,IAAY3T,EAAAA,GAAAA,GAAY2T,EAAUjD,KAAiB1Q,EAAAA,GAAAA,GAAYnd,EAAKgxB,SAAUnD,MAEtF,GAEJ,MAAO,IACD7R,IAAiBmB,EAAAA,GAAAA,GAAY9d,EAAK,iBAAkBwuB,GAAe,CAAC7R,GAAiB,OACtFgB,EAAAA,EAAAA,KAAYD,EAAAA,EAAAA,IAAO,IACjB8T,KACCnB,GAAgB,MAChBC,GAAgB,KAClB9T,MAEL,CACDgS,EAAasB,EAAiBnT,EAAe3c,EAAMqwB,EAAcC,EAAc9T,EAAWkR,IAGtFuC,GAAgBnuB,EAAAA,EAAAA,KAAQ,KACvB0sB,GAAeA,EAAY9vB,OA5EO,IA4EyCyxB,IAAkBC,EACzFmB,GAAAA,GAGF5T,EAAAA,EAAAA,KAAYD,EAAAA,EAAAA,IAAO,IAAIyS,KAAkBC,IAC9C5T,GAAW,IACZ,CAACA,EAAW2T,EAAeC,EAAe5B,IAEvCoD,GAAgB9vB,EAAAA,EAAAA,KAAQ,KACtB0sB,GAAgBe,IAAgBtd,GAAgC,IAApBA,EAASvT,OAIpDuT,EACJ+M,KAAKxhB,IAAO,MACX,MAAOwB,EAAQC,GAAazB,EAAGq0B,MAAM,KAAK7S,IAAI3R,QAE9C,OAAOmjB,MAAAA,GAAP,UAAOA,EAAyBxxB,UAAhC,aAAO,EAAkCud,KAAKtd,MAE/Cme,OAAmBhU,SACnB0oB,MAAK,CAACC,EAAGC,IAAMA,EAAEjxB,KAAOgxB,EAAEhxB,OAVpBwwB,GAAAA,GAWR,CAACtf,EAAUue,EAAwBhC,EAAae,IAE7C0C,GAA2BlyB,EAAAA,EAAAA,KAAY,KAC3C+wB,GAAwBD,KACvB,CAACA,IAEEqB,GAA4BnyB,EAAAA,EAAAA,KAAY,KAC5CixB,GAAyBD,KACxB,CAACA,IAmBEoB,EAAenC,IAAmBA,EAAe1T,QAAU0T,EAAehI,WAC1EkI,EAAaxxB,SAAWuxB,EAAcvxB,SAAWkzB,EAAclzB,OAErE,OAAK8vB,GAAgBe,EAKnB,mBAAC3Q,GAAA,EAAD,CACEve,UAAU,2BACVwe,MAAO+S,EACP9S,WAAYmS,EAEZmB,sBAAoB,EACpBC,YAAU,GAET5B,GACC,0BAAKpwB,UAAU,4CACb,mBAAC,GAAD,CACEkvB,WAAYkB,EACZ3E,SAAU4E,KAIfyB,GACC,mBAACG,GAAA,EAAD,CACErvB,KAAMjD,EAAK,6BACX2pB,YAAa3pB,EAAK,4CAGnBkwB,EAAaxxB,QACd,0BAAK2B,UAAU,2CAA2CO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjFsuB,EAAalR,KAAKxhB,GACjB,mBAAC+0B,GAAA,EAAD,CACEC,aAAch1B,EACd8C,QAAS+wB,EACToB,SAAUj1B,SAKf0yB,EAAaxxB,QACd,0BAAK2B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKZ,EAAKkc,MAAQ,YAASta,GACxDsuB,EAAaxxB,OAvKK,GAwKjB,mBAACwwB,GAAA,EAAD,CAAM5uB,QAAS2xB,GACZjyB,EAAK6wB,EAAsB,2BAA6B,6BAG5D7wB,EAAK,oCAEPkwB,EAAalR,KAAI,CAACxhB,EAAI0d,KACrB,GAAK2V,KAAuB3V,GA/KT,GAmLnB,OACE,mBAAC,GAAD,CACElc,OAAQxB,EACR8C,QAAS8wB,UAMhBnB,EAAcvxB,QACf,0BAAK2B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKZ,EAAKkc,MAAQ,YAASta,GACxDquB,EAAcvxB,OA/LI,GAgMjB,mBAACwwB,GAAA,EAAD,CAAM5uB,QAAS4xB,GACZlyB,EAAK+wB,EAAuB,2BAA6B,6BAG7D/wB,EAAK,mCAEPiwB,EAAcjR,KAAI,CAACxhB,EAAI0d,KACtB,GAAK6V,KAAwB7V,GAvMV,GA2MnB,OACE,mBAAC,GAAD,CACElc,OAAQxB,EACRivB,cAAY,EACZnsB,QAAS8wB,UAMhBQ,EAAclzB,QACf,0BAAK2B,UAAU,kBACb,yBAAIA,UAAU,kBAAkBO,IAAKZ,EAAKkc,MAAQ,YAASta,GAAY5B,EAAK,mBAC3E4xB,EAAc5S,KA9GvB,SAA4B5gB,GAC1B,MAAM6E,GAAOmsB,EAAAA,EAAAA,IAAsBpvB,EAAM5B,GACnCsC,EAAO8b,EAAUpe,EAAQY,QAE/B,GAAKiE,GAASvC,EAId,OACE,mBAAC,GAAD,CACE1B,OAAQZ,EAAQY,OAChBZ,QAASA,EACTowB,YAAaA,SASV,mBAAC,GAAD,CAAgBV,QAASA,QC/I9BT,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAK,GAyFjD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAQwd,KAAMC,GAAczd,EAAOud,OAC7B,cAAEK,EAAeqL,UAAYuI,SAAUC,GAAvC,aAAiEjC,GAAiBxvB,GAClF,eAAEixB,EAAF,cAAkB9d,GAAkBnT,EAAO8uB,cAE3C,SAAE5b,IAAcC,MAAAA,OAAD,EAACA,EAAejP,OAAS,GAE9C,MAAO,CACL0Z,cAAAA,EACA1K,SAAAA,EACAue,uBAAAA,EACAhU,UAAAA,EACAwT,eAAAA,EACAzB,aAAAA,MAGJ,CAAC9uB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAjBpCZ,EAvFkD,EACpE0vB,YAAAA,EACA7R,cAAAA,EACA8T,gBAAAA,EACAxe,SAAAA,EACAue,uBAAAA,EACAhU,UAAAA,EACAwT,eAAAA,EACAzB,aAAAA,EACAoC,qBAAAA,EACAD,mBAAAA,MAEA,MAAM1wB,GAAOC,EAAAA,EAAAA,KACPgxB,GAAiBlxB,EAAAA,EAAAA,KAAY,EAAGkb,UAAAA,MAChCsT,GAAgBtT,IAAciW,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBxjB,KAAM,OACNgkB,MAAO3C,EACPxvB,OAAQ2d,SAIb,CAACA,EAAe4R,EAAcoC,EAAsBnC,IAEjDoD,GAAgB9vB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAgC,IAApBA,EAASvT,OAInBuT,EACJ+M,KAAKxhB,IAAO,MACX,MAAOwB,EAAQC,GAAazB,EAAGq0B,MAAM,KAAK7S,IAAI3R,QAE9C,OAAOmjB,MAAAA,GAAP,UAAOA,EAAyBxxB,UAAhC,aAAO,EAAkCud,KAAKtd,MAE/Cme,OAAmBhU,SACnB0oB,MAAK,CAACC,EAAGC,IAAMA,EAAEjxB,KAAOgxB,EAAEhxB,OAVpBwwB,GAAAA,GAWR,CAACtf,EAAUue,IAmBR2B,EAAenC,IAAmBA,EAAe1T,QAAU0T,EAAehI,WAAa4J,EAAclzB,OAE3G,OACE,0BAAK2B,UAAU,cACb,mBAACue,GAAA,EAAD,CACEve,UAAU,yCACVwe,MAAO+S,EACP9S,WAAYmS,EACZoB,YAAU,GAET5B,GACC,0BAAKpwB,UAAU,4CACb,mBAAC,GAAD,CACEkvB,WAAYkB,EACZ3E,SAAU4E,KAIfyB,GACC,mBAACG,GAAA,EAAD,CACErvB,KAAMjD,EAAK,6BACX2pB,YAAa3pB,EAAK,4CAGnB4xB,EAAclzB,QAAUkzB,EAAc5S,KAzC/C,SAA4B5gB,GAC1B,MAAM6E,GAAOmsB,EAAAA,EAAAA,IAAsBpvB,EAAM5B,GACnCsC,EAAO8b,EAAUpe,EAAQY,QAE/B,GAAKiE,GAASvC,EAId,OACE,mBAAC,GAAD,CACE1B,OAAQZ,EAAQY,OAChBZ,QAASA,EACTowB,YAAaA,aCzEd,SAASkE,GAAsBvlB,GACpC,MAAO,CAACpO,EAAqB4zB,KAAe,MAC1C,MAAQpW,KAAMC,GAAczd,EAAOud,OAC3BC,KAAMmR,GAAc3uB,EAAO4uB,OAC7B,eACJqC,EADI,cACY9d,EADZ,OAC2BlT,GAC7BD,EAAO8uB,aAKL+E,EAAuB,UAATzlB,EAAmBA,EAAQwlB,MAAAA,GAAAA,EAAOE,QAAU,QAAU,SAElEtC,SAAUC,GAA2BzxB,EAAOipB,SAC9C/V,EAAWC,MAAAA,GAAH,UAAGA,EAAgB0gB,UAAnB,aAAG,EAA8B3gB,SAE/C,MAAO,CACL6gB,OAAOC,EAAAA,EAAAA,IAAYh0B,GACnBi0B,eAAwBpxB,IAAbqQ,KACL+d,GAAiB5mB,QAAQ4mB,EAAe1T,OAAS0T,EAAehI,UACtExL,UAAAA,EACAkR,UAAAA,EACA8C,uBAAAA,EACAve,SAAAA,EACAghB,aAAcj0B,EACduvB,aAAcxvB,EAAOwvB,e,0BCf3B,MAAM2E,GAAe,QACf7F,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAK,GAuGjD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,IAClB4zB,GAAsBQ,KACtB,CAACzzB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,qBAJgBZ,EArG4C,EAC9D0vB,YAAAA,EACAyE,aAAAA,EACAD,UAAAA,EACAxC,uBAAAA,EACAve,SAAAA,EACAsc,aAAAA,EACAoC,qBAAAA,EACAve,gBAAAA,MAEA,MAAMpS,GAAOC,EAAAA,EAAAA,KAEPgxB,GAAiBlxB,EAAAA,EAAAA,KAAY,EAAGkb,UAAAA,MAChCsT,GAAgBtT,IAAciW,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBxjB,KAAM+lB,GACN/B,MAAO3C,EACPxvB,OAAQi0B,SAIb,CAAC1E,EAAcoC,EAAsBnC,EAAayE,IAE/CrB,GAAgB9vB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAaue,EAIXve,EAAS+M,KAAKxhB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGq0B,MAAM,KAAK7S,IAAI3R,QAE9C,iBAAOmjB,EAAuBxxB,UAA9B,aAAO,EAAgCud,KAAKtd,MAC3Cme,OAAOhU,SAPDmoB,GAAAA,GAQR,CAACf,EAAwBve,IAEtBkhB,GAAoBpzB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACxDoT,EAAgB,CACdpT,OAAAA,EACAC,UAAAA,EACAhD,OAAQY,EAAAA,GAAAA,iBAET,CAACuV,IA2BEghB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC7E,GAAc8E,EAAAA,KAA+BN,EACpFO,EAAcH,GAAqBnhB,GAAYA,EAASvT,OAAS,IAAM8vB,EACvEgF,EAAgBJ,GAAqBnhB,GAAYA,EAASvT,OAAS,GAAK8vB,EAExEtqB,GAAaC,EAAAA,EAAAA,GACjB,+BACAqvB,GAAiB,aAGnB,OACE,0BAAKnzB,UAAU,cACb,mBAACue,GAAA,EAAD,CACEve,UAAW6D,EACX2a,MAAO+S,EACP6B,aAAejF,EAAyB,YAAX,SAC7B1P,WAAYmS,EACZoB,YAAU,IAERe,GAAqB,mBAAC9T,GAAA,EAAD,MACtB8T,KAAuBnhB,GAAgC,IAApBA,EAASvT,SAC3C,mBAAC4zB,GAAA,EAAD,CACErvB,KAAMjD,EAAK,6BACX2pB,YAAa3pB,EAAK,0CAGrBuzB,GAhDH,0BAAKlzB,UAAU,aAAaO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACnDgwB,EAAc5S,KAAK5gB,GAClB,mBAACs1B,GAAA,EAAD,CACElzB,IAAKpC,EAAQZ,GACbm2B,SAAS,eACTv1B,QAASA,EACTkC,QAAS6yB,OA2CZK,GAnCE5B,EAAc5S,KAAK5gB,GACxB,mBAAC,GAAD,CACEoC,IAAKpC,EAAQZ,GACbwB,OAAQZ,EAAQY,OAChBZ,QAASA,Y,wBCnEjB,MAAM80B,GAAe,QACf7F,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAK,GA4FjD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,IAClB4zB,GAAsBQ,KACtB,CAACzzB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,kBAJgBZ,EA1F2C,EAC7D0vB,YAAAA,EACAyE,aAAAA,EACAD,UAAAA,EACAxW,UAAAA,EACAkR,UAAAA,EACA8C,uBAAAA,EACAve,SAAAA,EACAsc,aAAAA,EACAoC,qBAAAA,EACA9wB,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACPgxB,GAAiBlxB,EAAAA,EAAAA,KAAY,EAAGkb,UAAAA,MAChCsT,GAAgBtT,IAAciW,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBxjB,KAAM+lB,GACN/B,MAAO3C,EACPxvB,OAAQi0B,SAIb,CAAC1E,EAAcoC,EAAsBnC,EAAayE,IAE/CrB,GAAgB9vB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAaue,EAIXve,EAAS+M,KAAKxhB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGq0B,MAAM,KAAK7S,IAAI3R,QAE9C,iBAAOmjB,EAAuBxxB,UAA9B,aAAO,EAAgCud,KAAKtd,MAC3Cme,OAAOhU,SAPDmoB,GAAAA,GAQR,CAACf,EAAwBve,IAEtB2hB,GAAqB7zB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IA4BEuzB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC7E,GAAc8E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK3yB,UAAU,cACb,mBAACue,GAAA,EAAD,CACEve,UAAU,8CACVwe,MAAO+S,EACP9S,WAAYmS,EACZoB,YAAU,IAERe,GAAqB,mBAAC9T,GAAA,EAAD,MACtB8T,KAAuBnhB,GAAgC,IAApBA,EAASvT,SAC3C,mBAAC4zB,GAAA,EAAD,CACErvB,KAAMjD,EAAK,6BACX2pB,YAAa3pB,EAAK,0CAGrBozB,GAAqBnhB,GAAYA,EAASvT,OAAS,GA1CjDkzB,EAAc5S,KAAI,CAAC5gB,EAAS8c,KACjC,MAAM2Y,EAAkC,IAAV3Y,IACzB4Y,EAAAA,EAAAA,IAAY11B,EAAQ2C,SAAU+yB,EAAAA,EAAAA,IAAYlC,EAAc1W,EAAQ,GAAGna,MACxE,OACE,0BACEV,UAAU,sBACVO,IAAKZ,EAAKkc,MAAQ,WAAQta,EAC1BpB,IAAKpC,EAAQZ,IAEZq2B,GACC,wBAAGxzB,UAAU,kBAAkBO,IAAKZ,EAAKkc,MAAQ,WAAQta,IACtDmyB,EAAAA,EAAAA,IAAmB/zB,EAAM,IAAI+hB,KAAoB,IAAf3jB,EAAQ2C,QAG/C,mBAACizB,GAAA,EAAD,CACExzB,IAAKpC,EAAQZ,GACbY,QAASA,EACT+B,aAAa8zB,EAAAA,GAAAA,GAAcj0B,EAAM5B,EAASoe,EAAWkR,GACrDwG,eAAgBN,c,eC7D5B,MAAMV,GAAe,YACf7F,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAK,GA6FjD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,IAClB4zB,GAAsBQ,KACtB,CAACzzB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,kBAJgBZ,EA3F2C,EAC7D0vB,YAAAA,EACAyE,aAAAA,EACAD,UAAAA,EACAxW,UAAAA,EACAkR,UAAAA,EACA8C,uBAAAA,EACAve,SAAAA,EACAsc,aAAAA,EACAoC,qBAAAA,EACA9wB,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACPgxB,GAAiBlxB,EAAAA,EAAAA,KAAY,EAAGkb,UAAAA,MAChCsT,GAAgBtT,IAAciW,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBxjB,KAAM+lB,GACN/B,MAAO3C,EACPxvB,OAAQi0B,SAIb,CAAC1E,EAAcoC,EAAsBnC,EAAayE,IAE/CrB,GAAgB9vB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAaue,EAIXve,EAAS+M,KAAKxhB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGq0B,MAAM,KAAK7S,IAAI3R,QACxCjP,EAAO,UAAGoyB,EAAuBxxB,UAA1B,aAAG,EAAgCud,KAAKtd,GAErD,OAAOb,IAAWwX,EAAAA,EAAAA,IAAmBxX,GAAWA,OAAUwD,KACzDwb,OAAOhU,SARDmoB,GAAAA,GASR,CAACf,EAAwBve,IAEtB2hB,GAAqB7zB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IA4BEuzB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC7E,GAAc8E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK3yB,UAAU,cACb,mBAACue,GAAA,EAAD,CACEve,UAAU,8CACVwe,MAAO+S,EACP9S,WAAYmS,EACZoB,YAAU,IAERe,GAAqB,mBAAC9T,GAAA,EAAD,MACtB8T,KAAuBnhB,GAAgC,IAApBA,EAASvT,SAC3C,mBAAC4zB,GAAA,EAAD,CACErvB,KAAMjD,EAAK,6BACX2pB,YAAa3pB,EAAK,0CAGrBozB,GAAqBnhB,GAAYA,EAASvT,OAAS,GA1CjDkzB,EAAc5S,KAAI,CAAC5gB,EAAS8c,KACjC,MAAM2Y,EAAkC,IAAV3Y,IACzB4Y,EAAAA,EAAAA,IAAY11B,EAAQ2C,SAAU+yB,EAAAA,EAAAA,IAAYlC,EAAc1W,EAAQ,GAAGna,MACxE,OACE,0BACEV,UAAU,sBACVG,IAAKpC,EAAQZ,IAEZq2B,GACC,wBAAGxzB,UAAU,oBAAmB0zB,EAAAA,EAAAA,IAAmB/zB,EAAM,IAAI+hB,KAAoB,IAAf3jB,EAAQ2C,QAE5E,mBAACozB,GAAA,EAAD,CACE/1B,QAASA,EACTg2B,UAAQ,EACRC,SAAUj2B,EAAQ2C,KAClBuzB,SAAO,EACPn1B,QAAQ80B,EAAAA,GAAAA,GAAcj0B,EAAM5B,EAASoe,EAAWkR,GAChDrtB,UAAU,cACVk0B,YAAaX,c,eCjEzB,MAAMvG,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAK,GAyGjD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,IAClB4zB,GAAsB,UACtB,CAACjzB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,eACA,qBALgBZ,EAvG4C,EAC9Dg0B,MAAAA,EACAD,QAAAA,EACArE,YAAAA,EACAyE,aAAAA,EACAD,UAAAA,EACAxW,UAAAA,EACAkR,UAAAA,EACA8C,uBAAAA,EACAve,SAAAA,EACAsc,aAAAA,EACAoC,qBAAAA,EACA9wB,aAAAA,EACA20B,gBAAAA,MAEA,MAAMx0B,GAAOC,EAAAA,EAAAA,KACP2yB,EAAcC,EAAU,QAAU,QAClC5B,GAAiBlxB,EAAAA,EAAAA,KAAY,EAAGkb,UAAAA,MAChCsT,GAAgBtT,IAAciW,EAAAA,GAAAA,WAChC7D,IAAa,KACXsD,EAAqB,CACnBxjB,KAAMylB,EACNzB,MAAO3C,EACPxvB,OAAQi0B,SAIb,CAACL,EAAarE,EAAcoC,EAAsBnC,EAAayE,IAE5DrB,GAAgB9vB,EAAAA,EAAAA,KAAQ,IACvBmQ,GAAaue,EAIXve,EAAS+M,KAAKxhB,IAAO,MAC1B,MAAOwB,EAAQC,GAAazB,EAAGq0B,MAAM,KAAK7S,IAAI3R,QAE9C,iBAAOmjB,EAAuBxxB,UAA9B,aAAO,EAAgCud,KAAKtd,MAC3Cme,OAAOhU,SAPDmoB,GAAAA,GAQR,CAACf,EAAwBve,IAEtB2hB,GAAqB7zB,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACzDa,EAAa,CAAEb,OAAAA,EAAQC,UAAAA,MACtB,CAACY,IAEE40B,GAAkB10B,EAAAA,EAAAA,KAAY,CAACd,EAAmBD,KACtDw1B,EAAgB,CAAEx1B,OAAAA,EAAQC,UAAAA,EAAWhD,OAAQy4B,EAAAA,GAAAA,WAC5C,CAACF,IAiCEpB,GAAoBC,EAAAA,GAAAA,GAAkB,CAAC7E,GAAc8E,EAAAA,KAA+BN,EAE1F,OACE,0BAAK3yB,UAAU,cACb,mBAACue,GAAA,EAAD,CACEve,UAAU,8CACVwe,MAAO+S,EACP9S,WAAYmS,EACZoB,YAAU,IAERe,GAAqB,mBAAC9T,GAAA,EAAD,MACtB8T,KAAuBnhB,GAAgC,IAApBA,EAASvT,SAC3C,mBAAC4zB,GAAA,EAAD,CACErvB,KAAMjD,EAAK,6BACX2pB,YAAa3pB,EAAK,0CAGrBozB,GAAqBnhB,GAAYA,EAASvT,OAAS,GA/CjDkzB,EAAc5S,KAAI,CAAC5gB,EAAS8c,KACjC,MAAM2Y,EAAkC,IAAV3Y,IACzB4Y,EAAAA,EAAAA,IAAY11B,EAAQ2C,SAAU+yB,EAAAA,EAAAA,IAAYlC,EAAc1W,EAAQ,GAAGna,MACxE,OACE,0BACEV,UAAU,sBACVG,IAAKpC,EAAQZ,IAEZq2B,GACC,wBAAGxzB,UAAU,kBAAkBO,IAAKZ,EAAKkc,MAAQ,WAAQta,IACtDmyB,EAAAA,EAAAA,IAAmB/zB,EAAM,IAAI+hB,KAAoB,IAAf3jB,EAAQ2C,QAG/C,mBAAC4zB,GAAA,EAAD,CACEn0B,IAAKpC,EAAQZ,GACbs1B,MAAOA,EACP10B,QAASA,EACTnC,OAAQy4B,EAAAA,GAAAA,OACRv0B,aAAa8zB,EAAAA,GAAAA,GAAcj0B,EAAM5B,EAASoe,EAAWkR,GACrD3sB,KAAM3C,EAAQ2C,KACdwtB,aAAcA,EACdluB,UAAU,cACV8L,OAAQsoB,EACRF,YAAaX,cClEnBgB,GAAO,CACX,CAAEznB,KAAM0nB,EAAAA,GAAAA,SAA8B5U,MAAO,uBAC7C,CAAE9S,KAAM0nB,EAAAA,GAAAA,MAA2B5U,MAAO,mBAC1C,CAAE9S,KAAM0nB,EAAAA,GAAAA,MAA2B5U,MAAO,mBAC1C,CAAE9S,KAAM0nB,EAAAA,GAAAA,MAA2B5U,MAAO,mBAC1C,CAAE9S,KAAM0nB,EAAAA,GAAAA,MAA2B5U,MAAO,mBAC1C,CAAE9S,KAAM0nB,EAAAA,GAAAA,MAA2B5U,MAAO,oBAGtC6U,GAAY,CAChB,CAAE3nB,KAAM0nB,EAAAA,GAAAA,SAA8B5U,MAAO,mBAC1C2U,GAAKG,MAAM,IAGVC,GAA0Bh3B,OAAOi3B,KAAKJ,EAAAA,IAAqBn2B,OAAS,EA4F1E,IAAeuJ,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,eAAEm2B,EAAF,OAAkBl2B,GAAWD,EAAO8uB,aAE1C,MAAO,CAAEqH,eAAAA,EAAgBl2B,OAAAA,MAE3B,CAACS,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,yBAA0B,yBAN9DZ,EA1F0C,EAC5D0vB,YAAAA,EACAe,WAAAA,EACA1T,SAAAA,EACAqZ,eAAAA,EAAiBL,EAAAA,GAAAA,SACjB71B,OAAAA,EACAm2B,uBAAAA,EACAC,oBAAAA,EACAtH,QAAAA,MAEA,MAAM9tB,GAAOC,EAAAA,EAAAA,MACNo1B,EAAWC,IAAgBhyB,EAAAA,EAAAA,IAAS4xB,GACrCzE,GAAkB3uB,EAAAA,EAAAA,KAAQ,KAAMyzB,EAAAA,EAAAA,IAAgB/G,IAAc,CAACA,IAE/DgH,GAAkBz1B,EAAAA,EAAAA,KAAamb,IACnC,MAAMua,EAAMb,GAAK1Z,GACjBia,EAAuB,CAAEO,QAASD,EAAItoB,OACtCmoB,EAAapa,KACZ,CAACia,IAEEQ,GAAyB51B,EAAAA,EAAAA,KAAamN,IAC1CkoB,EAAoB,CAAEr0B,KAAMmM,EAAMmX,UAAY,QAC7C,CAAC+Q,KAEJpZ,EAAAA,EAAAA,IAAeH,EAAUiS,OAASlsB,OAAWA,GAAW,GAGxD,MAAMwc,GAAepY,EAAAA,EAAAA,IAAuB,MACtCqV,GAAgBgD,EAAAA,GAAAA,GAA0BD,EAAcvC,OAAUja,EAAW,oBAAoB,GAEvG,OACE,0BAAKvB,UAAU,aAAasH,IAAKyW,EAAcI,UAAWnD,GACxD,mBAACua,GAAA,EAAD,CAASP,UAAWA,EAAWQ,KAAM72B,EAAS81B,GAAYF,GAAMkB,YAAaN,IAC7E,mBAACrZ,EAAA,EAAD,CACEE,KAAMrc,EAAKkc,MAAQ,iBAAmB,QACtC6Z,YAAaf,GACb5Y,UAAW8Y,IAEV,KACC,OAAQA,GACN,KAAKL,EAAAA,GAAAA,SACH,OAAI71B,EAEA,mBAAC,GAAD,CACEwvB,YAAaA,EACbiC,gBAAiBA,EACjB3C,QAASA,EACT4C,mBAAoBiF,IAKxB,mBAAC,GAAD,CACEnH,YAAaA,EACbe,WAAYA,EACZkB,gBAAiBA,EACjB3C,QAASA,EACT4C,mBAAoBiF,IAG1B,KAAKd,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAcrG,YAAaA,IACpC,KAAKqG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAarG,YAAaA,IACnC,KAAKqG,EAAAA,GAAAA,MACH,OAAO,mBAAC,GAAD,CAAarG,YAAaA,IACnC,KAAKqG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACEr0B,IAAI,QACJguB,YAAaA,IAGnB,KAAKqG,EAAAA,GAAAA,MACH,OACE,mBAAC,GAAD,CACEr0B,IAAI,QACJqyB,SAAO,EACPrE,YAAaA,IAGnB,QACE,gB,eC3Hd,MAAMwH,GAA4B,CAChCC,gBAAiB,GACjBC,SAAU,GACVC,KAAM,GACNC,MAAO,IAGHC,GAAuD,CAC3DC,EACAC,KAEA,OAAQA,EAAOppB,MACb,IAAK,qBACH,MAAO,IACFmpB,EACHL,gBAAiBM,EAAOC,SAG5B,IAAK,cACH,MAAO,IACFF,EACHJ,SAAUK,EAAOC,SAGrB,IAAK,UACH,MAAO,IACFF,EACHH,KAAMI,EAAOC,SAGjB,IAAK,WACH,MAAO,IACFF,EACHF,MAAOG,EAAOC,SAGlB,IAAK,QACH,OAAOR,GAET,QACE,OAAOM,ICiNb,IAAeruB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,SAClB8C,GACA,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,UAAW,sBAF/CZ,EA5OiC,EACnD23B,cAAAA,EACAC,eAAAA,EACA5I,QAAAA,EACA6I,aAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAC,eAAAA,MAEA,MAAOC,EAAqBC,IAA0B1zB,EAAAA,EAAAA,KAAS,IACxD2zB,EAA0BC,IAA+B5zB,EAAAA,EAAAA,KAAS,GAEnE6zB,GAA0Bp3B,EAAAA,EAAAA,KAAY,KAC1Ci3B,GAAuB,KACtB,IAEGI,GAA2Br3B,EAAAA,EAAAA,KAAY,KAC3Ci3B,GAAuB,KACtB,IAEGK,GAA+Bt3B,EAAAA,EAAAA,KAAY,KAC/Cm3B,GAA4B,KAC3B,IAEGI,GAAgCv3B,EAAAA,EAAAA,KAAY,KAChDm3B,GAA4B,KAC3B,IAEGK,GAAuBx3B,EAAAA,EAAAA,KAAY,KACvCq3B,IACAR,MACC,CAACQ,EAA0BR,IAExBY,GAA4Bz3B,EAAAA,EAAAA,KAAY,KAC5Cu3B,IACAT,EAAiB,CAAEr5B,GAAIk5B,IACvB5I,MACC,CAAC4I,EAAgBY,EAA+BT,EAAkB/I,IAE/D2J,GAAsE31B,EAAAA,EAAAA,KAAQ,IAC3E,EAAGC,UAAAA,EAAWC,OAAAA,KACnB,mBAACC,EAAA,EAAD,CACEC,OAAK,EACL2F,QAASxF,EAAAA,GACT5B,KAAK,UACL0B,MAAM,cACN9B,UAAW2B,EAAS,SAAW,GAC/B1B,QAASyB,EACTK,UAAU,gBAEV,wBAAG/B,UAAU,gBAGhB,IAEGL,GAAOC,EAAAA,EAAAA,KAqJb,OACE,0BAAKI,UAAU,eACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASwtB,EACT1rB,UAAWpC,EAAK,mBAEhB,wBAAGK,UAAU,qBA5JnB,WACE,OAAQo2B,GACN,KAAKiB,EAAAA,GAAAA,YACH,OAAO,6BAAK13B,EAAK,6BACnB,KAAK03B,EAAAA,GAAAA,QACH,OAAO,6BAAK13B,EAAK,YACnB,KAAK03B,EAAAA,GAAAA,cACH,OAAO,6BAAK13B,EAAK,kBACnB,KAAK03B,EAAAA,GAAAA,QACH,OAAO,6BAAK13B,EAAK,oBACnB,KAAK03B,EAAAA,GAAAA,SACH,OAAO,6BAAK13B,EAAK,aAEnB,KAAK03B,EAAAA,GAAAA,sBACH,OAAO,6BAAK13B,EAAK,mBACnB,KAAK03B,EAAAA,GAAAA,2BACH,OAAO,6BAAK13B,EAAK,aAEnB,KAAK03B,EAAAA,GAAAA,mBACH,OAAO,6BAAK13B,EAAK,iBACnB,KAAK03B,EAAAA,GAAAA,gBACH,OAAO,6BAAK13B,EAAK,oBACnB,KAAK03B,EAAAA,GAAAA,oBACH,OAAO,6BAAK13B,EAAK,yBACnB,KAAK03B,EAAAA,GAAAA,kBACH,OAAO,6BAAK13B,EAAK,oBACnB,KAAK03B,EAAAA,GAAAA,kBACH,OAAO,6BAAK13B,EAAK,2BACnB,KAAK03B,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAO,6BAAK13B,EAAK,oBACnB,KAAK03B,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAO,6BAAK13B,EAAK,mBAEnB,KAAK03B,EAAAA,GAAAA,sBACH,OAAO,6BAAK13B,EAAK,kBACnB,KAAK03B,EAAAA,GAAAA,oBACH,OAAO,6BAAK13B,EAAK,iBAEnB,KAAK03B,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACH,OAAO,6BAAK13B,EAAK,wBACnB,KAAK03B,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACH,OAAO,6BAAK13B,EAAK,+BACnB,KAAK03B,EAAAA,GAAAA,wBACH,OAAO,6BAAK13B,EAAK,0BACnB,KAAK03B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,wBACH,OAAO,6BAAK13B,EAAK,iBACnB,KAAK03B,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,mBACH,OAAO,6BAAK13B,EAAK,uBACnB,KAAK03B,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,uBACH,OAAO,oDACT,KAAKA,EAAAA,GAAAA,qBACH,OAAO,6BAAK13B,EAAK,mCACnB,KAAK03B,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACH,OAAO,6BAAK13B,EAAK,+BAEnB,KAAK03B,EAAAA,GAAAA,QACH,OAAO,6BAAK13B,EAAK,YACnB,KAAK03B,EAAAA,GAAAA,oBACH,OAAO,6BAAK13B,EAAK,cACnB,KAAK03B,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,0BAAKr3B,UAAU,wBACb,6BAAKL,EAAK,eAET02B,GACC,mBAACp0B,EAAA,EAAD,CACEjC,UAAU,qBACVkC,QAASk1B,EACTj1B,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAASmpB,aAAW,EAACvrB,QAAS+2B,GAC1Cr3B,EAAK,aAMlB,KAAK03B,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,0BAAKr3B,UAAU,wBACXo2B,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,iCACnB,6BAAK13B,EAAK,kBAEV,6BAAKA,EAAK,kBAGd,mBAACiC,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN9B,UAAU,gBACVC,QAASq2B,EACTv0B,UAAWpC,EAAK,sBAEhB,wBAAGK,UAAU,iBAKrB,QACE,OACE,0BAAKA,UAAU,wBACb,6BAAKL,EAAK,aAEV,mBAACiC,EAAA,EAAD,CACEC,OAAK,EACL2F,QAASxF,EAAAA,GACT5B,KAAK,UACL0B,MAAM,cACN7B,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,aAC9Bt1B,UAAWpC,EAAK,6BAEhB,wBAAGK,UAAU,eAEf,mBAACiC,EAAA,EAAD,CACEjC,UAAU,qBACVkC,QAASk1B,EACTj1B,UAAU,SAEV,mBAACC,EAAA,EAAD,CAAUC,KAAK,SAASpC,QAAS62B,GAA0Bn3B,EAAK,mBAkBvE23B,GACD,mBAACvW,GAAA,EAAD,CACEpf,OAAQ+0B,EACRvuB,QAAS4uB,EACTn0B,KAAMjD,EAAK,mBACXqhB,aAAcrhB,EAAK,0BACnBshB,eAAgBiW,EAChBK,sBAAoB,IAEtB,mBAACxW,GAAA,EAAD,CACEpf,OAAQi1B,EACRzuB,QAAS8uB,EACTr0B,KAAMjD,EAAK,qBACXqhB,aAAcrhB,EAAK,UACnBshB,eAAgBkW,EAChBI,sBAAoB,S,wBCpO5B,MAqEA,IAAe3vB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAE4d,EAAF,aAAiB4R,GAAiBxvB,EAExC,MAAO,CACL84B,YAAalb,GAAgBtd,EAAAA,EAAAA,IAAWN,EAAQ4d,QAAiB/a,EACjE2sB,aAAAA,MAGJ,CAAC9uB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,uBATpCZ,EArE4C,EAC9D+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAgK,kBAAAA,EACAD,YAAAA,EACAtJ,aAAAA,MAEA,MAAMvuB,GAAOC,EAAAA,EAAAA,KACP83B,EAAYF,MAAAA,OAAH,EAAGA,EAAar6B,GAU/B,OARA+F,EAAAA,EAAAA,KAAU,KACJw0B,GAAaxJ,GACfuJ,EAAkB,CAAEC,UAAAA,MAErB,CAACxJ,EAAcwJ,EAAWD,KAE7B9b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,MAGhD,0BAAKr3B,UAAU,kCACb,0BAAKA,UAAU,sBACZw3B,GACC,mBAACG,GAAA,EAAD,CACE5Y,OAAQyY,EAAYr6B,GACpBy6B,eAAa,IAGhBJ,GACC,mBAACK,GAAA,EAAD,CACE1F,aAAcqF,EAAYr6B,GAC1By6B,eAAa,IAGjB,mBAAChZ,GAAA,EAAD,CACEvc,KAAK,WACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,UAE7B13B,EAAK,2CAER,mBAACif,GAAA,EAAD,CACEvc,KAAK,SACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,gBAE7B13B,EAAK,kBAER,mBAACif,GAAA,EAAD,CACEvc,KAAK,OACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,UAE7B13B,EAAK,oBAER,mBAACif,GAAA,EAAD,CACEvc,KAAK,SACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,UAE7B13B,EAAK,YAER,mBAACif,GAAA,EAAD,CACEvc,KAAK,WACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,WAE7B13B,EAAK,mB,yBCxEhB,MAEMm4B,GAAc,gBACdC,GAAoB,sBACpBC,GAAiB,oBAEjBC,IAA+BC,EAAAA,EAAAA,KAAUjL,GAAOA,KAAM,KAAK,GAkFjE,IAAerlB,EAAAA,EAAAA,KA1E2B,EACxCuwB,gBAAAA,EACAC,OAAAA,EACAzF,UAAAA,EACA0F,oBAAAA,EACAC,cAAAA,EACAvrB,SAAAA,MAEA,MAAOukB,EAAUiH,IAAet1B,EAAAA,EAAAA,IAASk1B,GAAmB,IAEtDx4B,GAAOC,EAAAA,EAAAA,KACP44B,EAAaJ,EAAS,SAAW,WACjCvO,EAAiBlqB,EAATy4B,EAAc,oBAA4B,aAEjDK,EAAiBC,IAAiBj3B,EAAAA,EAAAA,KAAQ,IAC1C6vB,EAASjzB,OAIVizB,EAASjzB,OAjCW,EAkCf,MAACkD,EAAY,GAAEsoB,kBAEpByH,EAASjzB,OAnCW,GAoCf,MAACkD,EAAY,GAAEsoB,iBAEnBmO,GAAeW,KAAKrH,QAIG/vB,IAAxB82B,EACK,GAIF,CACLA,EAAsB14B,EAAM,GAAE64B,aAAuB,iBAAcj3B,GAC3C,IAAxB82B,EAAgC14B,EAAM,GAAE64B,eAAqBj3B,GAVtD,MAACA,EAAY,GAAEsoB,iCAVf,IAsBR,CAACyH,EAAU+G,EAAqB14B,EAAM64B,EAAY3O,KAErD3mB,EAAAA,EAAAA,KAAU,KACRq1B,EAAYJ,GAAmB,MAC9B,CAACC,EAAQD,IAEZ,MAAMS,GAAuBl5B,EAAAA,EAAAA,KAAaqE,IACxC,MAAM80B,EAAc90B,EAAEkJ,OAAOJ,MAAMisB,OAAO5T,QAAQ6S,GAAmB,IACrEQ,EAAYM,GACZ90B,EAAEkJ,OAAOJ,MAAS,GAAEurB,EAASN,GAAc,KAAKe,IAEhD,MAAME,EAvDV,SAAyBzH,GACvB,OAAOA,EAASjzB,QATU,GAUrBizB,EAASjzB,QATY,IAUrB25B,GAAeW,KAAKrH,GAoDP0H,CAAgBH,GAE5BE,GACFd,IAA6B,KAC3BK,EAAc,CAAEhH,SAAUuH,OAI1B9rB,GACFA,IAASgsB,GAAUF,KAEpB,CAACT,EAAQE,EAAevrB,IAE3B,OACE,mBAACmR,GAAA,EAAD,CACErR,MAAQ,GAAEurB,EAASN,GAAc,KAAKxG,IACtCvkB,SAAU6rB,EACV/O,MAAOA,EACP1K,MAAOuZ,EACPO,QAASR,EACTS,SAAUvG,OCzDV3F,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAO,GAI7CkM,GAA2B,iCAC3BC,GAAqB,wCA8M3B,IAAexxB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,cAAE4d,GAAkB5d,GACpB,SAAEgE,EAAF,oBAAY21B,GAAwB35B,EAAO26B,aAAe,GAC1D7B,EAAclb,GAAgBtd,EAAAA,EAAAA,IAAWN,EAAQ4d,QAAiB/a,EAExE,IAAKi2B,EACH,MAAO,CACL90B,SAAAA,EACA21B,oBAAAA,GAIJ,MACEiB,UAAWC,EACXC,SAAUC,EACVnI,SAAU6G,EAHN,SAIJuB,GACElC,GACImC,IAAKC,GAAeF,GAAY,GAGxC,MAAO,CACLG,mBAHwBxlB,EAAAA,EAAAA,IAAkBmjB,GAI1C+B,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACAzB,gBAAAA,EACAz1B,SAAAA,EACA21B,oBAAAA,MAGJ,CAACj5B,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,gBACA,mBAnCgBZ,EA5MmD,EACrE+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAoM,kBAAAA,EACAN,iBAAAA,EACAE,gBAAAA,EACAG,WAAAA,EACAzB,gBAAAA,EACAz1B,SAAAA,EACA21B,oBAAAA,EACAyB,gBAAAA,EACAC,cAAAA,EACAzB,cAAAA,MAEA,MAAM34B,GAAOC,EAAAA,EAAAA,MAENo6B,EAAmBC,IAAwBh3B,EAAAA,EAAAA,KAAS,IACpDi3B,EAAwBC,IAA6Bl3B,EAAAA,EAAAA,KAAS,IAC9Dkc,EAAOib,IAAYn3B,EAAAA,EAAAA,OAEnBkP,EAAOkoB,IAAYp3B,EAAAA,EAAAA,OACnBq2B,EAAWgB,IAAgBr3B,EAAAA,EAAAA,IAASs2B,GAAoB,KACxDC,EAAUe,IAAet3B,EAAAA,EAAAA,IAASw2B,GAAmB,KACrDE,EAAKa,IAAUv3B,EAAAA,EAAAA,IAAS22B,GAAc,KACtCtI,EAAUiH,IAAet1B,EAAAA,EAAAA,IAAyBk1B,GAAmB,IAEtEsC,GAAuBlmB,EAAAA,EAAAA,GAASslB,GAAmB,EAAOrlB,EAAAA,GAAAA,SAE1Dme,EAAYjwB,IAAag4B,EAAAA,GAAAA,WACzBC,GAA+B,IAAbrJ,EAElBsJ,GAAoBn5B,EAAAA,EAAAA,KAAQ,KAC5Bk5B,IAIG5xB,QAAQoJ,IAAU+nB,IAAkD,IAAxB7B,IAClD,CAAClmB,EAAO+nB,EAAwBS,EAAiBtC,KAEpD1c,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,cAIlDn0B,EAAAA,EAAAA,KAAU,KACR8pB,IAAa,KACX8M,SAED,CAACA,KAEJ52B,EAAAA,EAAAA,KAAU,KACRm3B,OAAS94B,KACR,CAACk5B,KAEJv3B,EAAAA,EAAAA,KAAU,KACRo3B,EAAaf,GAAoB,IACjCgB,EAAYd,GAAmB,IAC/Be,EAAOZ,GAAc,MACpB,CAACL,EAAkBE,EAAiBG,KAEvC12B,EAAAA,EAAAA,KAAU,KACRq1B,EAAYJ,GAAmB,MAC9B,CAACA,KAEJj1B,EAAAA,EAAAA,KAAU,KACJR,IAAag4B,EAAAA,GAAAA,WACfP,GAA0B,GAC1BF,GAAqB,GACrBG,OAAS74B,MAEV,CAACmB,IAEJ,MAAMm4B,GAAoBn7B,EAAAA,EAAAA,KAAao7B,IACrCT,EAASS,KACR,IAEGC,GAAwBr7B,EAAAA,EAAAA,KAAaqE,IACzCu2B,EAAav2B,EAAEkJ,OAAOJ,OACtBstB,GAA0B,KACzB,IAEGa,GAAuBt7B,EAAAA,EAAAA,KAAaqE,IACxCw2B,EAAYx2B,EAAEkJ,OAAOJ,OACrBstB,GAA0B,KACzB,IAEGc,GAAkBv7B,EAAAA,EAAAA,KAAaqE,IACnCy2B,EAAOz2B,EAAEkJ,OAAOJ,OAChBstB,GAA0B,KACzB,IAEGvB,GAAuBl5B,EAAAA,EAAAA,KAAamN,IACxC0rB,EAAY1rB,GACZotB,GAAqB,KACpB,IAEGiB,GAAoBx7B,EAAAA,EAAAA,KAAY,KACpC,MAAMy7B,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAC3BuC,EAAa1B,EAAIb,OAElBqC,EAAiB98B,OAKlBg9B,EAAWh9B,OA/GI,GAgHjB+7B,EAAShB,IAIXW,EAAc,CACZ5nB,MAAAA,KACI+nB,GAA0B,CAC5BZ,UAAW6B,EACX3B,SAAU4B,EACVzB,IAAK0B,MAEHrB,GAAqB,CACvB1I,SAAAA,KAjBF8I,EAASjB,MAoBV,CACDhnB,EACAmnB,EAAWE,EAAUG,EAAKO,EAC1B5I,EAAU0I,EACVD,IAGF,OACE,0BAAK/5B,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,yBACb,mBAACs7B,GAAA,EAAD,CACEb,qBAAsBA,EACtB1tB,SAAU8tB,EACVjb,MAAM,0BACNjT,SAAUgmB,IAEZ,mBAACzU,GAAA,EAAD,CACErR,MAAOysB,EACPvsB,SAAUguB,EACVlR,MAAOlqB,EAAK,aACZgN,SAAUgmB,EACVxT,MAAOA,IAAUga,GAA2Bha,OAAQ5d,IAEtD,mBAAC2c,GAAA,EAAD,CACErR,MAAO2sB,EACPzsB,SAAUiuB,EACVnR,MAAOlqB,EAAK,YACZgN,SAAUgmB,IAEZ,mBAACzU,GAAA,EAAD,CACErR,MAAO8sB,EACP5sB,SAAUkuB,EACVpR,MAAOlqB,EAAK,WACZgN,SAAUgmB,EACVxT,MAAOA,IAAUia,GAAqBja,OAAQ5d,IAGhD,wBAAGvB,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,IAChEf,EAAAA,EAAAA,GAAWb,EAAK,0BAA2B,CAAC,KAAM,sBAIvD,0BAAKK,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,aAEhF,mBAAC47B,GAAD,CACEpD,gBAAiB7G,GAAY,GAC7BqB,UAAWA,EACX0F,oBAAqBA,EACrBC,cAAeA,EACfvrB,SAAU6rB,IAGZ,wBAAG54B,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,IAChEf,EAAAA,EAAAA,GAAWb,EAAK,gBAAiB,CAAC,KAAM,qBAE1C2xB,GACC,wBAAGtxB,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAChE5B,EAAK,qBAAqB,8BAC3B,2BAAMK,UAAU,iBAAhB,gBAA8CsxB,MAMtD,mBAACkK,GAAA,EAAD,CACEpvB,QAASwuB,EACT36B,QAASi7B,EACTvuB,SAAUgmB,EACV5wB,UAAU,gBAET4wB,EACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,qB,0BC9MvB,MAAMy7B,IAAiCh4B,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAO,GAyLrE,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MACEud,OAASC,KAAMC,GACfmR,OAASpR,KAAMmR,IACb3uB,GAGFg9B,WAAYC,EACZzf,KAAM0f,EACNC,YAAaC,GACXp9B,EAAOq9B,YAEX,MAAO,CACL5f,UAAAA,EACAkR,UAAAA,EACAsO,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,EACAE,gBAAgB9P,EAAAA,EAAAA,IAAqBxtB,GACrCu9B,kBAAkB9P,EAAAA,EAAAA,IAAuBztB,OAG7C,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,6BAA8B,gBAAiB,gBAvBnFZ,EArLmD,EACrEy9B,eAAAA,EACAC,aAAAA,EACA3gB,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAtR,UAAAA,EACAkR,UAAAA,EACAsO,iBAAAA,EACAC,YAAAA,EACAE,uBAAAA,EACAE,eAAAA,EACAC,iBAAAA,EACAG,2BAAAA,EACAC,cAAAA,EACAC,WAAAA,MAEA,MAAOC,EAAeC,IAAoBv5B,EAAAA,EAAAA,OACnCw5B,EAAmBC,IAAwBz5B,EAAAA,EAAAA,KAAS,GACrD05B,GAAsBj9B,EAAAA,EAAAA,KAAY,IAAMg9B,GAAqB,IAAO,KAE1Ex5B,EAAAA,EAAAA,KAAU,KACHq5B,IACHK,EAAAA,GAAAA,GAAiB,cAAcC,KAAKL,KAErC,CAACD,KAIJr5B,EAAAA,EAAAA,KAAU,KACRu4B,IAA+B,KAC7BW,SAED,CAACA,IAEJ,MAAMU,GAAqBp9B,EAAAA,EAAAA,KAAY,KACjC/B,OAAOi3B,KAAKgH,GAAav9B,QAtCL,GAuCtBi+B,EAAW,CACTS,KAAM,CACJh/B,QAAS,0BACTshB,aAAa,KAOnB6c,MACC,CAACN,EAAaU,EAAYJ,IAEvBv8B,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,SAElD,MAAM2F,GAAcv7B,EAAAA,EAAAA,KAAQ,KAC1B,IAAKk6B,EACH,OAGF,MAAMxe,EAAUxf,OAAOi3B,KAAKzY,GAAWwC,IAAI3R,QAE3C,OAAO2uB,EAAiBhd,KAAKxhB,IAC3B,MAAM8/B,EAASrB,EAAYz+B,GAE3B,MAAO,CACLA,GAAI8/B,EAAO9/B,GACXyiB,MAAOqd,EAAOrd,MACdsd,UAAUC,EAAAA,EAAAA,IACRx9B,EAAMwc,EAAWkR,EAAW4P,EAAQ9f,EAAS6e,EAAgBC,SAIlE,CAACN,EAAkBxf,EAAWyf,EAAavO,EAAW2O,EAAgBC,EAAkBt8B,IAErFy9B,GAAoC19B,EAAAA,EAAAA,KAAau9B,IACjDt/B,OAAOi3B,KAAKgH,GAAav9B,QA7EL,GA8EtBi+B,EAAW,CACTS,KAAM,CACJh/B,QAAS,0BACTshB,aAAa,KAOnBgd,EAAc,CAAEY,OAAAA,MACf,CAACrB,EAAaS,EAAeC,IAEhC,OACE,0BAAKt8B,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZu8B,GACC,mBAACc,GAAA,EAAD,CACElgC,GAAG,sBACHiD,KAAMk9B,EAAAA,GACNf,cAAeA,EACfgB,KAAMd,EACNe,QAAM,EACNC,OAAQd,KAKd,wBAAG38B,UAAU,iCAAiCO,IAAI,QAC/CZ,EAAK,wBAGR,mBAACiC,EAAA,EAAD,CAEE5B,UAAU,iBACV8B,MAAM,UACN1B,KAAK,UACLs9B,MAAI,EACJC,OAAK,EACL19B,QAAS68B,EACTjhB,MAAOlc,EAAKkc,OAEZ,wBAAG7b,UAAU,aACZL,EAAK,qBAIV,0BAAKK,UAAU,sBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,YAEpFq9B,MAAAA,GAAAA,EAAa3+B,OAAS2+B,EAAYre,KAAKse,GACtC,mBAACre,GAAA,EAAD,CACE5e,UAAU,eACV49B,QAAM,EACNC,WAAS,EACT59B,QAAS,IAAMk8B,EAAaP,EAAYqB,EAAO9/B,MAE/C,2BAAM6C,UAAU,SAASi9B,EAAOrd,OAChC,2BAAM5f,UAAU,YAAYi9B,EAAOC,aAElCF,IAAgBA,EAAY3+B,OAC/B,wBAAG2B,UAAU,iCAAiCO,IAAI,QAAlD,4BAGE,mBAAC0e,GAAA,EAAD,OAGJ6c,KAA4BA,EAAuBz9B,QACnD,0BAAK2B,UAAU,sBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjE5B,EAAK,sBAGPm8B,EAAuBnd,KAAKse,GAC3B,mBAACre,GAAA,EAAD,CACE5e,UAAU,OACV49B,QAAM,EACN39B,QAAS,IAAMm9B,EAAkCH,IAEjD,0BAAKj9B,UAAU,qCACb,0BAAKA,UAAU,kBACb,2BAAMA,UAAU,SAASi9B,EAAOrd,OAChC,2BAAM5f,UAAU,YAAYi9B,EAAO3T,cAGrC,mBAAC1nB,EAAA,EAAD,CACE5B,UAAU,OACV8B,MAAM,UACN1B,KAAK,OACLs9B,MAAI,EACJC,OAAK,EACL9hB,MAAOlc,EAAKkc,OAEXlc,EAAK,kB,eCzMxB,MAyBA,GAzBqC,EACnCm+B,MAAAA,EACAC,SAAAA,EACAC,eAAAA,EACArL,UAAAA,EACA1yB,QAAAA,MAEA,MAAMN,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACgC,EAAA,EAAD,CACE5B,UAAU,iBACV8B,MAAM,cACN1B,KAAK,UACL6f,QAAM,EACN0S,UAAWA,EACX9W,MAAOlc,EAAKkc,MACZ5b,QAASA,GAET,wBAAGD,UAAU,cATf,QAUQ89B,EAVR,SAUqBA,EAAQ,EAAIE,GAAmB,GAAED,KAAcA,ICiBlEE,GAAiB,0CACjBC,GAAiB,8BAqQvB,IAAet2B,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAE0d,GAAY1d,EAAOud,MAE3B,MAAO,CACLkiB,oBAAqB/hB,EAAQI,OAC7B4hB,sBAAuBhiB,EAAQO,aAGnC,CAACvd,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,iBAAkB,gBAAiB,mBATvEZ,EAnQmD,EACrEw3B,MAAAA,EACAoI,SAAAA,EACAC,mBAAAA,EACAC,mBAAAA,EACA/iB,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACA+Q,OAAAA,EACAL,oBAAAA,EACAC,sBAAAA,EACAK,eAAAA,EACApC,cAAAA,EACAvf,cAAAA,MAEA,MAAOyf,EAAeC,IAAoBv5B,EAAAA,EAAAA,OACnCw5B,EAAmBC,IAAwBz5B,EAAAA,EAAAA,KAAS,GACrD05B,GAAsBj9B,EAAAA,EAAAA,KAAY,IAAMg9B,GAAqB,IAAO,KAEnEgC,EAA6BC,IAAkC17B,EAAAA,EAAAA,KAAS,IACxE27B,EAA6BC,IAAkC57B,EAAAA,EAAAA,KAAS,IAG7E67B,gBAAiBC,EACjBC,kBAAmBC,IACjBC,EAAAA,GAAAA,IAAkBjJ,EAAO,aAE3B6I,gBAAiBK,EACjBH,kBAAmBI,IACjBF,EAAAA,GAAAA,IAAkBjJ,EAAO,aAE7B/yB,EAAAA,EAAAA,KAAU,KACHq5B,IACHK,EAAAA,GAAAA,GAAiB,cAAcC,KAAKL,KAErC,CAACD,KAEJr5B,EAAAA,EAAAA,KAAU,KACRy7B,GAA+B,GAC/BE,GAA+B,KAC9B,CAAC5I,EAAMoJ,WAEV,MAAOC,EAAwBC,IAA0B99B,EAAAA,EAAAA,KAAQ,KAC/D,MAAM+9B,EAAoB,IAAIC,IAAI,IAC5BtB,GAAuB,MACvBC,GAAyB,KAGzBsB,GAAwBC,EAAAA,EAAAA,IAAwBZ,EAAiBS,GACjEI,GAAwBD,EAAAA,EAAAA,IAAwBR,EAAiBK,GAEvE,MAAO,CACLd,EACIgB,EACAA,EAAsBhL,MAAM,EA3DV,EA2DmCuK,EAAkB5gC,QAC3EugC,EACIgB,EACAA,EAAsBlL,MAAM,EA9DV,EA8DmC0K,EAAkB/gC,WAE5E,CACD8gC,EAAiBJ,EAAiBE,EAAmBG,EACrDR,EAA6BF,EAC7BP,EAAqBC,KAGvBl7B,EAAAA,EAAAA,KAAU,MAENo8B,EAAuBjhC,OAAS0gC,EAAgB1gC,QAC7CkhC,EAAuBlhC,OAAS8gC,EAAgB9gC,SAEnDye,EAAc,CAAE+iB,SAAU,aAE3B,CACD/iB,EACAqiB,EAAgB9gC,OAChB0gC,EAAgB1gC,OAChBkhC,EAAuBlhC,OACvBihC,EAAuBjhC,SAGzB,MAAMsB,GAAOC,EAAAA,EAAAA,KA0Db,SAASkgC,EAAYC,GACnB,MAAMf,EAA6B,aAATe,EAAsBd,EAAoBG,EAC9DY,EAA0B,aAATD,EAAsBT,EAAyBC,EAEhEU,EAAsB,aAATF,EAAsBrB,EAA8BE,EAEjEsB,GADsB,aAATH,EAAsBhB,EAAkBI,GACzB9gC,OAAS2gC,EAAkB3gC,OAAS2hC,EAAe3hC,OAC/E8hC,EAAwB,aAATJ,EACjB,IAAMpB,GAA+B,GACrC,IAAME,GAA+B,GAEzC,OACE,sCACGG,EAAkBrgB,KAAKxe,GAnC9B,SAAwBA,EAAa4/B,GACnC,MAAMK,EAAoB,aAATL,EACbM,GAAAA,GAAAA,MAAyB,EAAGlgC,IAAKmgC,KAAcA,IAAYngC,IAC3DogC,GAAAA,GAAAA,MAAyB,EAAGpgC,IAAKmgC,KAAcA,IAAYngC,IAE/D,GAAKigC,EAIL,OACE,mBAACxhB,GAAA,EAAD,CACEze,IAAKigC,EAASjgC,IACdH,UAAU,kCACVqC,KAAM+9B,EAAS/9B,KACfu7B,QAAM,EACN4C,UAAQ,GAEP7gC,EAAKygC,EAASxgB,QAkBiB6gB,CAAetgC,EAAK4/B,KACnDC,EAAerhB,KAAKxhB,GACnB,mBAACyhB,GAAA,EAAD,CACE5e,UAAU,kCACV49B,QAAM,EACN4C,UAAQ,IAEPzhC,EAAAA,EAAAA,IAAc5B,GACb,mBAAC0hB,GAAA,EAAD,CAAiBiO,WAAW,QAAQ/N,OAAQ5hB,IAE5C,mBAAC6hB,GAAA,EAAD,CAAe8N,WAAW,QAAQnuB,OAAQxB,QAI7C8iC,GAAcC,EAAiB,GAChC,mBAAC,GAAD,CACEpC,MAAOoC,EACPnC,SAAS,OACT99B,QAASkgC,KAOnB,OA9FAxkB,EAAAA,EAAAA,IAAeH,EAAUgjB,EAAQ/H,EAA+B,SAAfR,EAAM8J,KACnD1I,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBA6FF,0BAAKr3B,UAAU,wBACb,0BAAKA,UAAU,kCACb,0BAAKA,UAAU,2BACb,0BAAKA,UAAU,yBACZu8B,GACC,mBAACc,GAAA,EAAD,CACElgC,GAAG,sBACHiD,KAAMk9B,EAAAA,GACNf,cAAeA,EACfgB,KAAMd,GAAqBxa,OAAOgU,EAAMoJ,UACxC7B,QAAM,EACNC,OAAQd,KAKE,WAAf1G,EAAM8J,MACL,wBAAG//B,UAAU,iCAAiCO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACrE5B,EAAK,sBAIV,mBAACue,GAAA,EAAD,CACEle,UAAU,OACV6pB,MAAOlqB,EAAK,kBACZkN,MAAOopB,EAAMgH,OAAOrd,MACpB7S,SArHV,SAAsB2zB,GACpB,MAAM,cAAE31B,GAAkB21B,EAC1BrC,EAAS,CAAEvxB,KAAM,WAAYqpB,QAASprB,EAAc8B,MAAMisB,UAoHlD3Z,MAAO8W,EAAM9W,OAAS8W,EAAM9W,QAAU8e,GAAiBA,QAAiB18B,KAI5E,0BAAKvB,UAAU,gCACZi2B,EAAM9W,OAAS8W,EAAM9W,QAAU+e,IAC9B,wBAAGl+B,UAAU,8CAA8CO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAClF5B,EAAKs2B,EAAM9W,QAIhB,yBAAInf,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,kBAErF,mBAACif,GAAA,EAAD,CACE5e,UAAU,gDACVqC,KAAK,MACLpC,QAASq+B,GAER3+B,EAAK,mBAGPmgC,EAAY,aAGf,0BAAK9/B,UAAU,gCACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,kBAErF,mBAACif,GAAA,EAAD,CACE5e,UAAU,gDACVqC,KAAK,MACLpC,QAASs+B,GAER5+B,EAAK,mBAGPmgC,EAAY,cAIjB,mBAACtE,GAAA,EAAD,CACEpvB,UAAW6pB,EAAM0K,UACjBh0B,SAAUspB,EAAMtD,UAChB1yB,QA3JN,WACE,MAAM,MAAE2f,GAAUqW,EAAMgH,OAEnBrd,EAKAmf,EAAgB1gC,QAAWV,OAAOi3B,KAAKqK,GAAmB5gC,QAK/DggC,EAAS,CAAEvxB,KAAM,eAAgBqpB,SAAS,IACvB,SAAfF,EAAM8J,KACRtB,EAAe,CAAEthC,GAAI84B,EAAMoJ,SAAUuB,aAAc3K,EAAMgH,SAEzDZ,EAAc,CAAEY,OAAQhH,EAAMgH,SAGhCn3B,YAAW,KACT2nB,MAvHiB,MA2GjB4Q,EAAS,CAAEvxB,KAAM,WAAYqpB,QAAS+H,KALtCG,EAAS,CAAEvxB,KAAM,WAAYqpB,QAAS8H,MAwJpCl8B,UAA0B,SAAfk0B,EAAM8J,KAAkB,eAAiB,iBAEnD9J,EAAMtD,UACL,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,qB,eC9QvB,MAmLA,IAAe4H,EAAAA,EAAAA,KA7KkC,EAC/Cm4B,KAAAA,EACA5iB,QAAAA,EACA0jB,YAAAA,EACA7B,kBAAAA,EACA8B,YAAAA,EACAC,oBAAAA,EACAC,0BAAAA,EACAC,eAAAA,EACAxiB,WAAAA,MAGA,MAAMjS,GAAW7G,EAAAA,EAAAA,IAAyB,MACpCu7B,EAAqB,aAATnB,EAAsBM,GAAAA,GAAsBE,GAAAA,GACxDY,EAAiBN,EAAYxiC,OAAS2gC,EAAkB3gC,OAjBzC,GAkBf+iC,EAAcP,EAAYxiC,QAnBhB,KAqBhB6E,EAAAA,EAAAA,KAAU,KACR4C,YAAW,KACT4S,uBAAsB,KACpBlM,EAASrG,QAAS8W,aA1BH,OA6BlB,IAEH,MAAMokB,GAAkB3hC,EAAAA,EAAAA,KAAavC,IACnC,MAAMmkC,EAAiB,IAAIT,GACvBS,EAAelkC,SAASD,GAC1BmkC,EAAeC,OAAOD,EAAenuB,QAAQhW,GAAK,GAElDmkC,EAAezc,KAAK1nB,GAEtB4jC,EAAoBO,KACnB,CAACT,EAAaE,IAEXS,GAAsB9hC,EAAAA,EAAAA,KAAaS,IACvC,MAAMshC,EAAuB,IAAIzC,GAC7ByC,EAAqBrkC,SAAS+C,GAChCshC,EAAqBF,OAAOE,EAAqBtuB,QAAQhT,GAAM,GAE/DshC,EAAqB5c,KAAK1kB,GAE5B6gC,EAA0BS,KACzB,CAACzC,EAAmBgC,IAEjBljB,GAAqBpe,EAAAA,EAAAA,KAAaqE,IACtC,MAAM,MAAE8I,GAAU9I,EAAEgH,cACpBk2B,EAAep0B,KACd,CAACo0B,IAEEthC,GAAOC,EAAAA,EAAAA,MAgEN+d,EAAaC,IAAWC,EAAAA,GAAAA,GAAkBY,EAAYtB,EAASpU,QAAQ+3B,IAE9E,OACE,0BAAK9gC,UAAU,qCACb,0BAAKA,UAAU,+BACZg/B,EAAkBrgB,KAnEzB,SAAgCxe,GAC9B,MAAMuhC,EAAeR,EAAUS,MAAK,EAAGxhC,IAAKmgC,KAAcngC,IAAQmgC,IAClE,GAAKoB,EAIL,OACE,mBAACxP,GAAA,EAAD,CACE7vB,KAAMq/B,EAAar/B,KACnBud,MAAOjgB,EAAK+hC,EAAa9hB,OACzBgiB,YAAaT,EACbU,UAAQ,EACR5hC,QAASuhC,EACTpP,SAAUsP,EAAavhC,SAuDtB0gC,EAAYliB,KAAI,CAACxhB,EAAIynB,IACpB,mBAACsN,GAAA,EAAD,CACEC,aAAch1B,EACdykC,YAAaT,GAAkBvc,EAAIic,EAAYxiC,OA7H3B,EA8HpBwjC,UAAQ,EACR5hC,QAASohC,EACTjP,SAAUj1B,MAGZikC,EAQA,wBAAGphC,UAAU,oBAAoBO,IAAI,QACjC,6CARJ,mBAAC2d,GAAA,EAAD,CACE5W,IAAKkF,EACLK,MAAOi0B,EACP/zB,SAAU+Q,EACVM,YAAaze,EAAK,aAQxB,mBAAC4e,GAAA,EAAD,CACEve,UAAU,4BACVozB,aAAa,aACb5U,MAAOb,EACPc,WAAYb,KAETD,IAAgBA,EAAYtf,QAAUsf,EAAYvgB,SAAS+f,EAAQ,MACpE,sCACE,yBAAIhd,IAAI,UAAUH,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAC1E5B,EAAK,oBAEPuhC,EAAUviB,KAnFrB,SAAwB7R,GACtB,OACE,mBAAC8R,GAAA,EAAD,CACEze,IAAK2M,EAAK3M,IACVH,UAAU,sDACVC,QAAS,IAAMuhC,EAAoB10B,EAAK3M,KACxCqH,QAAM,GAEN,wBAAGxH,UAAY,QAAO8M,EAAKzK,SAC3B,yBAAIrC,UAAU,YAAYO,IAAI,QAAQZ,EAAKmN,EAAK8S,QAChD,mBAACkiB,GAAA,EAAD,CACEjY,MAAM,GACNkY,QAAS/C,EAAkB5hC,SAAS0P,EAAK3M,KACzC0B,OAAK,QAuEH,0BAAK1B,IAAI,UAAUH,UAAU,wBAC7B,yBAAIG,IAAI,UAAUH,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAC1E5B,EAAK,iBAKXge,MAAAA,GAAAA,EAAatf,OACZsf,EAAYgB,KAzEpB,SAAoBxhB,GAClB,MAAM6kC,EAAanB,EAAYzjC,SAASD,GAExC,OACE,mBAACyhB,GAAA,EAAD,CACEze,IAAKhD,EACL6C,UAAU,iDACVC,QAAS,IAAMohC,EAAgBlkC,GAC/BqK,QAAM,EACNmF,UAAWq1B,GAAcZ,IAExBriC,EAAAA,EAAAA,IAAc5B,GACb,mBAAC0hB,GAAA,EAAD,CAAiBE,OAAQ5hB,IAEzB,mBAAC6hB,GAAA,EAAD,CAAergB,OAAQxB,EAAI8kC,cAAY,IAEzC,mBAACH,GAAA,EAAD,CACEjY,MAAM,GACNkY,QAASC,EACTngC,OAAK,QAuDH8b,IAAgBA,EAAYtf,OAC9B,wBAAG2B,UAAU,aAAaG,IAAI,cAA9B,yBAEA,mBAAC8e,GAAA,EAAD,CAAS9e,IAAI,iBC9CvB,IAAeyH,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MACEud,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,IAEA3d,EAEJ,MAAO,CACLyd,UAAAA,EACAC,QAASA,EAAQI,OACjBH,iBAAkBA,EAAiBG,OACnC0lB,kBAAmB7lB,EAAiBM,SACpCD,gBAAiBN,EAAQO,aAG7B,CAACvd,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBAlBpCZ,EAzH0D,EAC5E+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAsS,KAAAA,EACA9J,MAAAA,EACAoI,SAAAA,EACAliB,UAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAK,gBAAAA,EACAwlB,kBAAAA,EACAplB,cAAAA,MAEA,MAAM,WAAEqlB,GAAelM,GACjB,gBAAE6I,EAAF,kBAAmBE,IAAsBE,EAAAA,GAAAA,IAAkBjJ,EAAO8J,GAAM,GAExEpgC,GAAOC,EAAAA,EAAAA,KACPqc,GAAQxa,EAAAA,EAAAA,KAAQ,KACpB,MAAM2gC,EAAmBhmB,GACrBimB,EAAAA,EAAAA,GAAgBlmB,EAAWC,EAASC,EAAkB,YACtD9a,EACE+gC,EAAqB5lB,GACvB2lB,EAAAA,EAAAA,GAAgBlmB,EAAWO,EAAiBwlB,EAAmB,iBAC/D3gC,EAEJ,GAAK6gC,GAAqBE,EAI1B,MAAO,IACDF,EACA,IAAIA,EAAiBG,eAAgBH,EAAiBI,YACtD,MAEAF,EAAqBA,EAAmBE,WAAa,MAE1D,CAACrmB,EAAWC,EAASC,EAAkBK,EAAiBwlB,IAErDO,GAAehhC,EAAAA,EAAAA,KAAQ,KAC3B,GAAKwa,EAIL,OAAOA,EACJc,QAAQ1c,IACN8hC,IACE1kB,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa/d,EAAMU,GAAO8hC,IACtCrD,EAAgB1hC,SAASiD,EAAKlD,MAElCwhB,KAAI,EAAGxhB,GAAAA,KAASA,MAClB,CAAC8e,EAAOkmB,EAAYxiC,EAAMm/B,IAEvBhhB,GAAqBpe,EAAAA,EAAAA,KAAagjC,IACtCrE,EAAS,CACPvxB,KAAM,gBACNqpB,QAASuM,MAEV,CAACrE,IAEEsE,GAA0BjjC,EAAAA,EAAAA,KAAakjC,IAEzCvE,EADW,aAAT0B,EACO,CACPjzB,KAAM,oBACNqpB,QAAS,IAAKF,EAAM4M,eAAgB9D,gBAAiB6D,IAG9C,CACP91B,KAAM,oBACNqpB,QAAS,IAAKF,EAAM6M,eAAgB3D,gBAAiByD,OAGxD,CAAC7C,EAAM9J,EAAOoI,IAEX0E,GAAgCrjC,EAAAA,EAAAA,KAAak1B,IACjD,MAAMoO,EAAsC,GAC5CpO,EAAKqO,SAAS9iC,IACZ6iC,EAAW7iC,IAAO,KAIlBk+B,EADW,aAAT0B,EACO,CACPjzB,KAAM,oBACNqpB,QAAS,CACP4I,gBAAiBD,KACdkE,IAIE,CACPl2B,KAAM,oBACNqpB,QAAS,CACPgJ,gBAAiBL,KACdkE,OAIR,CAACjD,EAAMjB,EAAiBT,IAK3B,OAHA1iB,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EACvB,aAATsJ,EAAsB1I,EAAAA,GAAAA,qBAAuCA,EAAAA,GAAAA,sBAE1DoL,EAKH,mBAAC,GAAD,CACE1C,KAAMA,EACN5iB,QAASslB,EACT5B,YAAa/B,EACbE,kBAAmBA,EACnB8B,YAAaqB,EACbpB,oBAAqB4B,EACrB3B,0BAA2B+B,EAC3B9B,eAAgBnjB,EAChBW,WAAY3B,IAbP,mBAACmC,GAAA,EAAD,UCKX,IAAerX,EAAAA,EAAAA,KA9HuB,EACpCwuB,cAAAA,EACA8M,YAAAA,EACAjN,MAAAA,EACAoI,SAAAA,EACA7iB,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,MAEA,MAAM0V,GAAczjC,EAAAA,EAAAA,KAAY,KAE5B02B,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErBvxB,YAAW,KACTu4B,EAAS,CAAEvxB,KAAM,YA5BG,KAiCtBspB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB5J,IARqB,WAAfwI,EAAM8J,KACRtJ,EAAeY,EAAAA,GAAAA,qBAEfZ,EAAeY,EAAAA,GAAAA,qBAMlB,CACDpB,EAAM8J,KAAM1B,EACZjI,EAAe3I,EAASgJ,IAGpBqG,GAAqBp9B,EAAAA,EAAAA,KAAY,KACrC2+B,EAAS,CAAEvxB,KAAM,UACjB2pB,EAAeY,EAAAA,GAAAA,uBACd,CAACZ,EAAgB4H,IAEd+E,GAAmB1jC,EAAAA,EAAAA,KAAau9B,IACpCoB,EAAS,CAAEvxB,KAAM,aAAcqpB,QAAS8G,IACxCxG,EAAeY,EAAAA,GAAAA,qBACd,CAACgH,EAAU5H,IAER4M,GAAyB3jC,EAAAA,EAAAA,KAAY,KACzC2+B,EAAS,CAAEvxB,KAAM,uBACjB2pB,EAAeL,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAeiI,EAAU5H,IAEvB6M,GAAyB5jC,EAAAA,EAAAA,KAAY,KACzC2+B,EAAS,CAAEvxB,KAAM,uBACjB2pB,EAAeL,IAAkBiB,EAAAA,GAAAA,8BAC7BA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,wBACH,CAACjB,EAAeiI,EAAU5H,IAE7B,OAAQL,GACN,KAAKiB,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACE6E,eAAgBY,EAChBX,aAAciH,EACd3M,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAGf,KAAK4J,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACH,OACE,mBAAC,GAAD,CACEpB,MAAOA,EACPoI,SAAUA,EACVC,mBAAoB+E,EACpB9E,mBAAoB+E,EACpB7V,QAAS0V,EACT1M,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACX1E,OAAQ/Q,IAGd,KAAK4J,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE0I,KAAK,WACL9J,MAAOA,EACPoI,SAAUA,EACV5Q,QAAS0V,EACT1M,eAAgBA,EAChBjb,SAAUA,IAGhB,KAAK6b,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE0I,KAAK,WACL9J,MAAOA,EACPoI,SAAUA,EACV5Q,QAAS0V,EACT1M,eAAgBA,EAChBjb,SAAUA,IAIhB,QACE,W,eChIN,MA+EA,IAAe5T,EAAAA,EAAAA,KA/EmB,EAChCmiB,QAAAA,EACAwZ,MAAAA,EACA1Z,MAAAA,EACAhd,MAAAA,EACAF,SAAAA,EACAI,SAAAA,MAEA,MAAMpN,GAAOC,EAAAA,EAAAA,KACP4jC,GAAe9jC,EAAAA,EAAAA,KAAaghC,IAChC3zB,EAASC,OAAO0zB,EAAM31B,cAAc8B,UACnC,CAACE,IAEE/M,GAAY8D,EAAAA,EAAAA,GAChB,cACA6I,GAAY,YAGR82B,GAAahiC,EAAAA,EAAAA,KAAQ,KACzB,GAAIsoB,EACF,OAAQld,GAASkd,EAAQ1rB,OAAS,GAAM,IACnC,GAAIklC,EAAO,CAChB,MAAMG,GAAwBH,EAAM78B,IAAM68B,EAAM58B,MAAQ48B,EAAM32B,MAAQ,GACtE,OAASC,EAAQ02B,EAAM58B,KAAO+8B,EAAwB,IAExD,OAAO,IACN,CAAC72B,EAAOkd,EAASwZ,KAEb58B,EAAKD,EAAKkG,IAAQnL,EAAAA,EAAAA,KAAQ,IAC3BsoB,EACK,CAAC,EAAGA,EAAQ1rB,OAAS,EAAG,GACtBklC,EACF,CAACA,EAAM58B,IAAK48B,EAAM78B,IAAK68B,EAAM32B,MAAQ,GAGvC,CAAC,EAAG,EAAG,IACb,CAAC22B,EAAOxZ,IAEX,OACE,0BAAK/pB,UAAWA,GACb6pB,GACC,0BAAK7pB,UAAU,iBAAiBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACxD,2BAAMvB,UAAU,QAAQO,IAAI,QAAQspB,GACnC0Z,GACC,2BAAMvjC,UAAU,QAAQO,IAAI,QAAQsM,IAI1C,0BAAK7M,UAAU,eACb,0BACEA,UAAU,oBAEVnC,MAAQ,UAAS4lC,OAEnB,4BACE98B,IAAKA,EACLD,IAAKA,EACLmG,MAAOA,EACPD,KAAMA,EACNE,KAAK,QACLC,SAAUy2B,IAEXzZ,GACC,0BAAK/pB,UAAU,kBACZ+pB,EAAQpL,KAAI,CAACglB,EAAQ9oB,IACpB,0BACE7a,WAAW8D,EAAAA,EAAAA,GAAe,6BAA8B+W,IAAUhO,GAAS,UAC3E5M,QAAS,IAAM8M,EAAS8N,IAEvB8oB,W,0BCtEjB,MA6BA,IAAe/7B,EAAAA,EAAAA,KA7B+B,EAC5CxH,KAAAA,EAAOwjC,EAAAA,GACPC,WAAAA,EACAC,oBAAAA,MAGA,MAAMx8B,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7Bo+B,GAAiBC,EAAAA,GAAAA,IAAkB18B,EAAKw8B,GAExCG,EAAa,aAAYJ,EAAW1mC,KACpC+mC,GAAa3vB,EAAAA,EAAAA,GAAS0vB,GAAYF,EAAgBvvB,EAAAA,GAAAA,SAClD,sBAAE2vB,EAAF,qBAAyBh6B,IAAyBi6B,EAAAA,GAAAA,GAAsBF,EAAY,QAE1F,OACE,0BAAK58B,IAAKA,EAAKtH,UAAU,sBACrBmkC,IAAyBE,EAAAA,GAAAA,IAAgBR,EAAWjkB,MAAO,GAC5DukB,GAAyBD,GACxB,mBAAC7G,GAAA,EAAD,CACElgC,GAAI8mC,EACJ7jC,KAAMA,EACNm8B,cAAe2H,EACflkC,UAAWmK,QCPrB,IAAevC,EAAAA,EAAAA,KAnBuB,EAAGi8B,WAAAA,EAAYC,oBAAAA,MAEnD,MAAMx8B,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7Bo+B,GAAiBC,EAAAA,GAAAA,IAAkB18B,EAAKw8B,GAExCnjC,GAAY4T,EAAAA,EAAAA,GAASsvB,EAAWS,cAAiB,aAAYT,EAAW1mC,MAAO4mC,IAC/E,sBAAEI,EAAF,qBAAyBh6B,IAAyBi6B,EAAAA,GAAAA,GAAsBzjC,EAAW,QAEzF,OACE,0BAAK2G,IAAKA,EAAKtH,UAAU,sBACrBmkC,IAAyBE,EAAAA,GAAAA,IAAgBR,EAAWjkB,MAAO,GAC5DukB,GACC,0BAAK/nC,IAAKuE,EAAWX,UAAWmK,EAAsBoG,IAAI,S,eCJlE,MAmEA,IAAe3I,EAAAA,EAAAA,KAnE0B,EACvCi8B,WAAAA,EACAC,oBAAAA,EACA7jC,QAAAA,MACI,MACJ,MAAMN,GAAOC,EAAAA,EAAAA,KAEb,IAAKikC,IAAeA,EAAWU,SAC7B,OAGF,MAAMC,EAAY,UAAGX,EAAWU,gBAAd,aAAG,EAAsB,GAE3C,OAAIV,EAAWS,eAAiBE,EAE5B,mBAAC5lB,GAAA,EAAD,CACEgf,QAAM,EACN59B,UAAU,qBACVwgC,UAAWgE,EACXvkC,QAAS,IAAMukC,GAAgBvkC,EAAQukC,IAEvC,mBAAC5iC,EAAA,EAAD,CACEG,UAAW8hC,EAAWjkB,MACtB9d,MAAM,cACN+Z,MAAOlc,EAAKkc,OAEXgoB,EAAWY,WACV,mBAAC,GAAD,CACErkC,KAAMskC,EAAAA,GACNb,WAAYA,EACZC,oBAAqBA,IAGvB,mBAAC,GAAD,CACED,WAAYA,EACZC,oBAAqBA,KAI3B,0BAAK9jC,UAAU,uBACb,0BAAKA,UAAU,SAAS6jC,EAAWjkB,OACnC,0BAAK5f,UAAU,YAAYL,EAAK,2BAA4BkkC,EAAW/F,MAAO,QAMlF,mBAAClf,GAAA,EAAD,CACEgf,QAAM,EACN59B,UAAU,qBACVC,QAAS,IAAMA,EAAQukC,IAEvB,mBAACG,GAAA,EAAD,CACEC,QAASJ,EACTpkC,KAAMskC,EAAAA,GACN9kB,MAAOikB,EAAWjkB,MAClBkkB,oBAAqBA,IAEvB,0BAAK9jC,UAAU,uBACb,0BAAKA,UAAU,SAAS6jC,EAAWjkB,OACnC,0BAAK5f,UAAU,YAAYL,EAAK,2BAA4BkkC,EAAW/F,MAAO,W,eCjCxF,MAAM+G,GAA0B,CAC9B,mBACA,gBACA,iBA8MF,IAAej9B,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACQ,KACFY,EAAAA,EAAAA,IAAKZ,EAAOqS,SAASC,MAAO,CAC7B,kBACA,iBACA,sBACA,sCACA,wCACA,kCACA,oCACA,qBACA,uBACA,wBACA,qBACA,qBACA,uBAEF8zB,cAAepmC,EAAO6lC,SAASQ,MAAMC,OACrCC,gBAAiBvmC,EAAO6lC,SAASW,aAGrC,CAAC9lC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,mBAAoB,kBAAmB,uBAvBvBZ,EA3M+C,EACjE+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAqX,cAAAA,EACAG,gBAAAA,EACAE,gBAAAA,EACAr0B,eAAAA,EACAs0B,oBAAAA,EACAC,oCAAAA,EACAC,sCAAAA,EACAC,gCAAAA,EACAC,kCAAAA,EACAC,mBAAAA,EACAC,qBAAAA,EACAC,sBAAAA,EACAC,mBAAAA,EACAC,iBAAAA,EACAC,gBAAAA,EACAC,kBAAAA,MAGA,MAAMC,GAAqBrgC,EAAAA,EAAAA,IAAuB,OAC1CsgC,QAASC,IAAiCC,EAAAA,GAAAA,IAAwB,CAAEC,QAASJ,KAC9EK,EAAaC,EAAWC,IAAcpjB,EAAAA,GAAAA,MACtCyhB,EAAS4B,IAAcvjC,EAAAA,EAAAA,MAExBtD,GAAOC,EAAAA,EAAAA,KAEP6mC,EAAyBn+B,EAAAA,QAO3B/G,EAP0C,CAC5C,CAAEsL,MAAO,QAASgd,MAAOlqB,EAAK,2BAA4B+mC,SAAU,6BACpE,CACE75B,MAAO,aACPgd,MAAOlqB,EAAKgnC,EAAAA,GAAY,6BAA+B,+BACvDD,SAAU,uBAIdxjC,EAAAA,EAAAA,KAAU,KACR4iC,MACC,CAACA,KAEJ5iC,EAAAA,EAAAA,KAAU,KACJ4hC,MAAAA,GAAAA,EAAezmC,QACjB0nC,MAED,CAACjB,EAAeiB,IAEnB,MAAMa,GAA6BlnC,EAAAA,EAAAA,KAAamnC,IAC9ChC,GAAwB5B,SAAQ,CAAC6D,EAAGliB,KAClC9oB,SAASkK,KAAKhK,UAAU4Z,OAAQ,mBAAkBgP,IAAKiiB,IAAajiB,MAGtEihB,EAAiB,CAAE/0B,eAAgB+1B,MAClC,CAAChB,IAEEkB,GAA8BrnC,EAAAA,EAAAA,KAAasnC,IAC/ClrC,SAASmrC,gBAAgBppC,MAAMqpC,YAC7B,uBAAyB,GAAE5kC,KAAKoE,IAAIsgC,EAASz+B,EAAAA,GAAS,GAAK,SAE7DzM,SAASmrC,gBAAgBppC,MAAMqpC,YAAY,wBAA0B,GAAE5kC,KAAKkC,MAAgB,OAAVwiC,QAClFlrC,SAASmrC,gBAAgBppC,MAAMqpC,YAAY,sBAAwB,GAAEF,OACrElrC,SAASmrC,gBAAgBE,aAAa,yBAA0BH,EAAQt3B,YAExEm2B,EAAiB,CAAEV,gBAAiB6B,MACnC,CAACnB,IAEEuB,GAAwB1nC,EAAAA,EAAAA,KAAamN,IACzC25B,EAAW35B,GACXy5B,MACC,CAACA,IAEEe,EAAcvC,GAAiBA,EAAcnmB,KAAKxhB,IAAe,MACrE,QAAO8nC,MAAAA,GAAA,UAAAA,EAAkB9nC,UAAlB,UAAuBmqC,gBAAgBrC,EAAgB9nC,MAC7D4f,OAAsBhU,SAIzB,OAFA4S,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,SAGhD,0BAAKr3B,UAAU,kCACb,0BAAKA,UAAU,sBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,aAEhF,mBAAC,GAAD,CACEkqB,MAAOlqB,EAAK,YAEZ4jC,MAAO,CAAE58B,IAAK,GAAID,IAAK,IACvBmG,MAAOs4B,EACPp4B,SAAUg6B,IAGZ,mBAACnoB,GAAA,EAAD,CACEvc,KAAK,QACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,wBAE7B13B,EAAK,oBAIV,0BAAKK,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAA/D,mBAGA,wBAAGvB,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAnE,yCAIA,mBAAC,GAAD,CACEwoB,QAAS8a,GACTh4B,MAAOiE,EACP/D,SAAU65B,KAIbH,GACC,0BAAKzmC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,uBAEhF,mBAACmqB,GAAA,EAAD,CACE9N,KAAK,yBACL+N,QAAS0c,EACT15B,SAAWF,GAAUg5B,EAAiB,CAAET,oBAAqBv4B,IAC7Dmd,SAAUob,KAKhB,0BAAKplC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,sBAEhF,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,YACZoiC,QAASsD,EACTkC,QAAUC,GAAc3B,EAAiB,CAAER,oCAAqCmC,MAElF,mBAAC1F,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,4BACZoiC,QAASuD,EACTiC,QAAUC,GAAc3B,EAAiB,CAAEP,sCAAuCkC,MAEpF,mBAAC1F,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,0BACZoiC,QAASwD,EACTgC,QAAUC,GAAc3B,EAAiB,CAAEN,gCAAiCiC,MAE9E,mBAAC1F,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,kBACZoiC,QAASyD,EACT+B,QAAUC,GAAc3B,EAAiB,CAAEL,kCAAmCgC,OAIlF,0BAAKxnC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,kBAEhF,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,YACZoiC,QAAS0D,EACT8B,QAAUC,GAAc3B,EAAiB,CAAEJ,mBAAoB+B,MAEjE,mBAAC1F,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,kCACZoiC,QAAS2D,EACT6B,QAAUC,GAAc3B,EAAiB,CAAEH,qBAAsB8B,OAIrE,0BAAKxnC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,qBAEhF,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,mBACZoiC,QAAS4D,EACT4B,QAAUC,GAAc3B,EAAiB,CAAEF,sBAAuB6B,MAEpE,mBAAC1F,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,wBACZoiC,QAAS6D,EACT2B,QAAUC,GAAc3B,EAAiB,CAAED,mBAAoB4B,MAGjE,0BAAKxnC,UAAU,OAAOsH,IAAK0+B,GACxBqB,GAAeA,EAAY1oB,KAAKklB,GAC/B,mBAAC,GAAD,CACE1jC,IAAK0jC,EAAW1mC,GAChB0mC,WAAYA,EACZC,oBAAqBoC,EACrBjmC,QAASmnC,OAIdxC,GACC,mBAAC,KAAD,CACEjjC,OAAQ0kC,EACRoB,YAAa7C,EACbz8B,QAASo+B,UC3PrB,IAAImB,GAEG,SAASC,GAAsBC,EAAS,IAAKC,EAA8BC,GAAa,GACxFJ,KACHA,GAAe5rC,SAASC,cAAc,SACtC2rC,GAAaP,aAAa,OAAQ,SAGpCO,GAAaP,aAAa,SAAUS,GAEhCE,EACFJ,GAAaK,gBAAgB,YAE7BL,GAAaP,aAAa,WAAY,YAIxCO,GAAaM,SAAW,KACxBN,GAAa76B,MAAQ,GACrB66B,GAAaM,SAAWH,EAExBH,GAAaO,Q,eCPR,SAASC,GAAQC,GACtB,MAAO,CACLC,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,IAChCD,SAASD,EAAME,UAAU,EAAG,GAAI,KAS7B,SAASC,GAAQH,GACtB,MAAMI,EAAKJ,EAAM,GAAGz4B,SAAS,IACvB84B,EAAKL,EAAM,GAAGz4B,SAAS,IACvB+4B,EAAKN,EAAM,GAAGz4B,SAAS,IAC7B,OAAqB,GAAb64B,EAAGlqC,OAAc,IAAMkqC,EAAKA,IAAoB,GAAbC,EAAGnqC,OAAc,IAAMmqC,EAAKA,IAAoB,GAAbC,EAAGpqC,OAAc,IAAMoqC,EAAKA,GAcrG,SAASC,IAASC,EAAGC,EAAGjX,IAC7BgX,GAAK,IACLC,GAAK,IACLjX,GAAK,IAEL,IACIkX,EAAYC,EADZpiC,EAAMpE,KAAKoE,IAAIiiC,EAAGC,EAAGjX,GAAIhrB,EAAMrE,KAAKqE,IAAIgiC,EAAGC,EAAGjX,GACvBoX,EAAYriC,EAEnCgf,EAAIhf,EAAMC,EAGd,GAFAmiC,EAAW,GAAPpiC,EAAW,EAAIgf,EAAIhf,EAEnBA,GAAOC,EACTkiC,EAAI,MACC,CACL,OAAQniC,GACN,KAAKiiC,EACHE,GAAKD,EAAIjX,GAAKjM,GAAKkjB,EAAIjX,EAAI,EAAI,GAC/B,MACF,KAAKiX,EACHC,GAAKlX,EAAIgX,GAAKjjB,EAAI,EAClB,MACF,KAAKiM,EACHkX,GAAKF,EAAIC,GAAKljB,EAAI,EAItBmjB,GAAK,EAGP,MAAO,CAACA,EAAGC,EAAGC,GAcT,SAASC,IAASH,EAAGC,EAAGC,IAC7B,IAAIJ,EAAYC,EAAYjX,EAExB/M,EAAItiB,KAAKkC,MAAU,EAAJqkC,GACfI,EAAQ,EAAJJ,EAAQjkB,EACZskB,EAAIH,GAAK,EAAID,GACbK,EAAIJ,GAAK,EAAIE,EAAIH,GACjBM,EAAIL,GAAK,GAAK,EAAIE,GAAKH,GAE3B,OAAQlkB,EAAI,GACV,KAAK,EACH+jB,EAAII,EACJH,EAAIQ,EACJzX,EAAIuX,EACJ,MACF,KAAK,EACHP,EAAIQ,EACJP,EAAIG,EACJpX,EAAIuX,EACJ,MACF,KAAK,EACHP,EAAIO,EACJN,EAAIG,EACJpX,EAAIyX,EACJ,MACF,KAAK,EACHT,EAAIO,EACJN,EAAIO,EACJxX,EAAIoX,EACJ,MACF,KAAK,EACHJ,EAAIS,EACJR,EAAIM,EACJvX,EAAIoX,EACJ,MACF,KAAK,EACHJ,EAAII,EACJH,EAAIM,EACJvX,EAAIwX,EAIR,MAAO,CACL7mC,KAAKT,MAAU,IAAJ8mC,GACXrmC,KAAKT,MAAU,IAAJ+mC,GACXtmC,KAAKT,MAAU,IAAJ8vB,IAuDR,SAAS0X,GAAgBC,GAC9B,IAAKC,EAAKC,EAAY38B,GAAS67B,GAAQY,GAOvC,OALAE,EAAalnC,KAAKqE,IAAI,EAAG6iC,EAAa,IAAO,IAAO,EAAIA,IACxD38B,EAAQA,EAAQ,GACZvK,KAAKoE,IAAI,EAAW,IAARmG,GACZvK,KAAKoE,IAAI,EAAGpE,KAAKqE,IAAI,EAAG,EAAY,IAARkG,IAExB,QAAa,IAAN08B,MAA2B,IAAbC,OAA8B,IAAR38B,U,0BCxKrD,MAkFA,IAAejF,EAAAA,EAAAA,KAlFqB,EAClC6hC,UAAAA,EACAhX,MAAAA,EACAuP,WAAAA,EACA/hC,QAAAA,MACI,MACJ,MAAM,KAAEypC,EAAF,SAAQ5tC,GAAa2tC,EACrBE,EAAkB,YAAW7tC,EAASqB,KACtC2X,EAAehZ,EAAS4Y,eACxBA,GAAiBH,EAAAA,EAAAA,GAAU,GAAEo1B,YAC7BC,GAAWC,EAAAA,GAAAA,GAAa,UAAC/tC,EAASguC,iBAAV,aAAC,EAAoBC,QAAShhC,QAAQ2L,IAAiB,IAC/E,kBACJs1B,EADI,sBACe7F,EADf,qBACsCh6B,IACxCi6B,EAAAA,GAAAA,GAAsB1vB,GAAkBI,EAAc,SACnDm1B,EAAmBC,IAAwBjnC,EAAAA,EAAAA,KAAS,IAEzDtC,UAAWwpC,EADP,iBACkBhpC,IACpByT,EAAAA,EAAAA,GAA6B+0B,GAAiBM,GAC5CG,GAAyD,KAAnC79B,EAAAA,EAAAA,GAAY09B,IAChChgC,aAAcC,EAAqBC,qBAAsBC,IAAsBC,EAAAA,EAAAA,GACpF4/B,IAAsBE,GAAcT,IAASW,EAAAA,QAC9C9oC,EACA6oC,EACA,QAGIE,GAAc3kC,EAAAA,EAAAA,MACpB2kC,EAAYnkC,QAAUssB,EAEtB,MAAM8X,GAAe7qC,EAAAA,EAAAA,KAAY,KAC/B,WACE,MAAM8qC,QAAaC,EAAAA,GAAAA,IAAUN,SACvBO,GAASC,KAAKC,EAAAA,GAAsBN,EAAYnkC,QAAUqkC,GAChEvqC,EAAQypC,IAHV,KAKC,CAACS,EAAWlqC,EAASypC,KAExBxmC,EAAAA,EAAAA,KAAU,KACJinC,GACFI,MAED,CAACJ,EAAWI,IAEf,MAAM3d,GAAcltB,EAAAA,EAAAA,KAAY,KAC1ByqC,EACFI,IAEAL,GAAsBW,IAAeA,MAEtC,CAACV,EAAWI,IAETvqC,GAAY8D,EAAAA,EAAAA,GAChB,gBACAk+B,GAAc,YAGhB,OACE,0BAAKhiC,UAAWA,EAAWC,QAAS2sB,GAClC,0BAAK5sB,UAAU,eACZgqC,GACC,6BACE1iC,IAAKsiC,EACL5pC,UAAU,cAGbmkC,GACC,0BACE/nC,IAAKsY,GAAkBI,EACvB9U,UAAY,cAAamK,IACzBoG,IAAI,KAGPrG,GACC,0BAAKlK,WAAW8D,EAAAA,EAAAA,GAAe,oBAAqBsG,IAClD,mBAAC3H,EAAA,EAAD,CAAiBC,SAAUvB,EAAkBlB,QAAS2sB,UC1D5DI,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAO,GA0HnD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM+zB,GAAQC,EAAAA,EAAAA,IAAYh0B,IACpB,WAAEosC,EAAF,UAAcC,GAAcrsC,EAAOqS,SAASi6B,OAAOvY,IAAU,IAC7D,iBAAEwY,GAAqBvsC,EAAOqS,SAEpC,MAAO,CACL+5B,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACAxY,MAAAA,MAGJ,CAACrzB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,kBAAmB,sBAdrBZ,EAxHyD,EAC3E+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAqd,WAAAA,EACAC,UAAAA,EACAE,iBAAAA,EACAxY,MAAAA,EACAyY,eAAAA,EACAC,gBAAAA,EACAC,iBAAAA,MAEA,MAAMC,GAAW1lC,EAAAA,EAAAA,MACjB0lC,EAASllC,QAAUssB,GAGnBvvB,EAAAA,EAAAA,KAAU,KACR8pB,IAAa,KACXke,SAED,CAACA,IAEJ,MAAMI,GAAmB5rC,EAAAA,EAAAA,KAAaqE,IACpC,MAAM,MAAEwnC,GAAUxnC,EAAEkJ,OAEhBs+B,GAASA,EAAMltC,OAAS,GAC1B8sC,EAAgBI,EAAM,MAEvB,CAACJ,IAEEK,GAAwB9rC,EAAAA,EAAAA,KAAY,KACxCioC,GAnCoB,aAmCmB2D,GAAkB,KACxD,CAACA,IAEEG,GAAiB/rC,EAAAA,EAAAA,KAAY,KACjC+2B,EAAeY,EAAAA,GAAAA,8BACd,CAACZ,IAEEiV,GAAuBhsC,EAAAA,EAAAA,KAAY,KACvC0rC,EAAiB,CACf3Y,MAAAA,EACAqY,gBAAYvpC,EACZoqC,qBAAiBpqC,EACjBwpC,WAAW,EACXa,aAAwB,SAAVnZ,EAAmBoZ,EAAAA,GAA2BC,EAAAA,MAE7D,CAACV,EAAkB3Y,IAEhBsZ,GAAwBrsC,EAAAA,EAAAA,KAAagqC,IACzC0B,EAAiB,CAAE3Y,MAAO4Y,EAASllC,QAAS2kC,WAAYpB,IACxD,MAAMsC,EAAmBf,GAAoBA,EAAiBtJ,MAAM8H,GAAcA,EAAUC,OAASA,IACjGsC,MAAAA,GAAAA,EAAkBlwC,SAASguC,WFwC5BmC,eAA+BpkC,GAEpC,MACMqkC,EAAuC,CAAC,EAAG,EAAG,GACpD,IAAInP,EACA32B,EACA/C,EAEAhF,EADAumB,GAAK,EAELunB,EAAgC,CAAC,EAAG,EAAG,GACvCrO,EAAQ,EAEZ,MAAMsO,EAAStwC,SAASC,cAAc,UAChCswC,EAAUD,EAAOE,YAAcF,EAAOE,WAAW,MACvD,IAAKD,EACH,OAAOH,EAGT,MAAMj9B,QAAcs9B,EAAAA,GAAAA,IAAa1kC,GACjCxE,EAAS4L,EAAMu9B,eAAiBv9B,EAAM1R,cAAgB0R,EAAM5L,OAC5D+C,EAAQ6I,EAAMw9B,cAAgBx9B,EAAMy9B,aAAez9B,EAAM7I,MACzDgmC,EAAO/oC,OAASA,EAChB+oC,EAAOhmC,MAAQA,EAEfimC,EAAQM,UAAU19B,EAAO,EAAG,GAE5B,IACE8tB,EAAOsP,EAAQO,aAAa,EAAG,EAAGxmC,EAAO/C,GACzC,MAAOU,GACP,OAAOmoC,EAMT,IAHA7tC,EAAS0+B,EAAKA,KAAK1+B,QAGXumB,GAAKioB,IAAiBxuC,KAC1By/B,EACFqO,EAAI,IAAMpP,EAAKA,KAAKnY,GACpBunB,EAAI,IAAMpP,EAAKA,KAAKnY,EAAI,GACxBunB,EAAI,IAAMpP,EAAKA,KAAKnY,EAAI,GAO1B,OAJAunB,EAAI,GAAK7pC,KAAKkC,MAAM2nC,EAAI,GAAKrO,GAC7BqO,EAAI,GAAK7pC,KAAKkC,MAAM2nC,EAAI,GAAKrO,GAC7BqO,EAAI,GAAK7pC,KAAKkC,MAAM2nC,EAAI,GAAKrO,GAEtBqO,EErFHW,CAAgBd,EAAiBlwC,SAASguC,UAAUC,SACjDlN,MAAM/6B,IACL,MAAM8pC,EAAevC,GAAgBvnC,GAC/BwnC,EAAY,IAAGhB,GAAQxmC,KAC7BspC,EAAiB,CAAE3Y,MAAO4Y,EAASllC,QAASwlC,gBAAiBrC,EAAUsC,aAAAA,SAG5E,CAACX,EAAkBG,IAEhB2B,GAA4BrtC,EAAAA,EAAAA,KAAaqE,IAC7CqnC,EAAiB,CAAE3Y,MAAO4Y,EAASllC,QAAS4kC,UAAWhnC,EAAEkJ,OAAO80B,YAC/D,CAACqJ,IAEEzrC,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,uBAElD,MAAM2V,GAAc/B,MAAAA,OAAA,EAAAA,EAAmB,KAAMA,EAAiB,GAAGvB,OAASW,EAAAA,GAE1E,OACE,0BAAKrqC,UAAU,4DACb,0BAAKA,UAAU,sBACb,mBAAC4e,GAAA,EAAD,CACEvc,KAAK,aACLrC,UAAU,OACV2M,SAAUqgC,EACV/sC,QAASurC,GAER7rC,EAAK,gBAGR,mBAACif,GAAA,EAAD,CACEvc,KAAK,WACLrC,UAAU,OACVC,QAASwrC,GAER9rC,EAAK,aAGR,mBAACif,GAAA,EAAD,CAAUvc,KAAK,WAAWpC,QAASyrC,GAChC/rC,EAAK,yBAGR,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,qBACZoiC,QAASh5B,QAAQgiC,GACjBh+B,SAAUggC,KAIb9B,EACC,0BAAKjrC,UAAU,uBACZirC,EAAiBtsB,KAAK8qB,GACrB,mBAAC,GAAD,CACEA,UAAWA,EACXhX,MAAOA,EACPuP,WAAY8I,IAAerB,EAAUC,KACrCzpC,QAAS8rC,OAKf,mBAAC9sB,GAAA,EAAD,WC/GFguB,GAAcvE,GAAQR,GAAQ,WAC9BgF,GAAoB,CACxB,UAAW,UAAW,UAAW,UAAW,UAAW,UACvD,UAAW,UAAW,UAAW,UAAW,UAAW,WA4MzD,SAASC,GAAcC,EAA+BC,GACpD,MAAO,CACLC,cAAe,CACbhrC,KAAKT,MAAOurC,EAAI,IAAOC,EAAME,UAAUnnC,MAAQ,IAC/C9D,KAAKT,OAAO,EAAIurC,EAAI,KAAOC,EAAME,UAAUlqC,OAAS,KAEtDmqC,YAAalrC,KAAKT,MAAMurC,EAAI,IAAMC,EAAMI,QAAQrnC,MAAQ,KAI5D,SAASsnC,IACP,cAAEJ,EAAF,YAAiBE,GACjBH,GAEA,MAAO,CACLG,GAAeH,EAAMI,QAAQrnC,MAAQ,GACrCknC,EAAc,IAAMD,EAAME,UAAUnnC,MAAQ,GAC5C,EAAIknC,EAAc,IAAMD,EAAME,UAAUlqC,OAAS,IA8ErD,UAAeuE,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM+zB,GAAQC,EAAAA,EAAAA,IAAYh0B,IACpB,gBAAEitC,GAAoBjtC,EAAOqS,SAASi6B,OAAOvY,IAAU,GAC7D,MAAO,CACLkZ,gBAAAA,EACAlZ,MAAAA,MAGJ,CAACrzB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,sBATpCZ,EAxSyD,EAC3E+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAgF,MAAAA,EACAkZ,gBAAAA,EACAP,iBAAAA,MAEA,MAAMC,GAAW1lC,EAAAA,EAAAA,MACjB0lC,EAASllC,QAAUssB,EAEnB,MAAM1U,GAAepY,EAAAA,EAAAA,IAAuB,MAEtCgoC,GAAiBhoC,EAAAA,EAAAA,IAAuB,MAExCioC,GAAejoC,EAAAA,EAAAA,IAAuB,MACtCkoC,GAAgBloC,EAAAA,EAAAA,KAAO,IAEtBynC,EAAKU,IAAU7qC,EAAAA,EAAAA,IAiLxB,SAAuB0oC,GACrB,OAAOA,GAAmBA,EAAgB1a,WAAW,KACjDyX,GAAQR,GAAQyD,EAAgBzmB,QAAQ,IAAK,MAC7C+nB,GApL2Bc,CAAcpC,IAEvCqC,GAASroC,EAAAA,EAAAA,IAAOynC,IACtBlqC,EAAAA,EAAAA,KAAU,KACR8qC,EAAO7nC,QAAUinC,IAChB,CAACA,IAEJ,MAAOt/B,EAAYmgC,EAAgBC,IAAoB/qB,EAAAA,GAAAA,MAChDgrB,EAAUC,IAAenrC,EAAAA,EAAAA,IAAS,KAClCorC,EAAUC,IAAerrC,EAAAA,EAAAA,IAAS,IAEnCsrC,GAAW5oC,EAAAA,EAAAA,MACX6oC,GAAc7oC,EAAAA,EAAAA,OAGpBzC,EAAAA,EAAAA,KAAU,KAER,MAAMqqC,EAAY,CAChBkB,WAAYd,EAAexnC,QAASsoC,eACjCnvC,EAAAA,EAAAA,IAAKquC,EAAexnC,QAASG,wBAAyB,CAAC,MAAO,QAAS,YAEtEmnC,EAAU,CACdgB,WAAYb,EAAaznC,QAASsoC,eAC/BnvC,EAAAA,EAAAA,IAAKsuC,EAAaznC,QAASG,wBAAyB,CAAC,WAK1D,SAASooC,EAAgB3qC,GACvB,MAAMupC,EAAgB,CACpBhrC,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE6L,MAAS29B,EAAUkB,YAAalB,EAAUnnC,MAAQ,GACzE9D,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE8L,MAAS09B,EAAU51B,IAAMoG,EAAa5X,QAAS7I,WAAYiwC,EAAUlqC,OAAS,KAGjG,YAAEmqC,GAAgBL,GAAca,EAAO7nC,QAASooC,EAASpoC,SAK/D,OAHA2nC,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAASpoC,UAC9D8nC,KAEO,EAYT,SAASU,EAAc5qC,GACrB,MAAM,cAAEupC,GAAkBH,GAAca,EAAO7nC,QAASooC,EAASpoC,SAC3DqnC,EAAclrC,KAAKqE,IAAIrE,KAAKoE,IAAI,EAAG3C,EAAE6L,MAAS69B,EAAQgB,YAAahB,EAAQrnC,MAAQ,GAKzF,OAHA0nC,EAAOJ,GAAc,CAAEJ,cAAAA,EAAeE,YAAAA,GAAee,EAASpoC,UAC9D8nC,KAEO,EAhCTM,EAASpoC,QAAU,CAAEonC,UAAAA,EAAWE,QAAAA,IAgBhCzmC,EAAAA,EAAAA,GAAc2mC,EAAexnC,QAAU,CACrCc,UAAWynC,EACXvnC,OAAQunC,EACRxnC,UAAWgnC,EACXjuC,QAASiuC,EACTU,wBAAyB,kCACzBC,YAAY,KAad7nC,EAAAA,EAAAA,GAAc4mC,EAAaznC,QAAU,CACnCc,UAAW0nC,EACXxnC,OAAQwnC,EACRznC,UAAWgnC,EACXjuC,QAASiuC,EACTU,wBAAyB,kCACzBC,YAAY,MAEb,CAACZ,EAAgBC,IAEpB,MAAM,cAAEZ,EAAgB,CAAC,EAAG,GAAtB,YAA0BE,EAAc,GAAMe,EAASpoC,QAAUgnC,GAAcC,EAAKmB,EAASpoC,SAAW,GACxG2oC,EAAMxG,GAAQU,GAAQoE,IACtB7D,EAAM6D,EAAI,GACV2B,EAASzG,GAAQU,GAAQ,CAACO,EAAK,EAAG,MAGxCrmC,EAAAA,EAAAA,KAAU,KACR,MAAMipC,EAAMnD,GAAQoE,GACdtrC,EAAS,IAAGwmC,GAAQ6D,KAK1B,GAHAiC,EAAYjC,EAAIjgC,KAAK,OACrBoiC,EAAYxsC,IAEP+rC,EAAc1nC,QAAS,CAC1B,MAAMylC,EAAevC,GAAgB8C,GACrCf,EAAiB,CACf3Y,MAAO4Y,EAASllC,QAChB2kC,gBAAYvpC,EACZoqC,gBAAiB7pC,EACjB8pC,aAAAA,IAGJiC,EAAc1nC,SAAU,IACvB,CAACinC,EAAKhC,KAGTloC,EAAAA,EAAAA,KAAU,MA2GZ,SACEkpC,EACA7C,EACAiF,EACAD,GAEA,IAAIS,EACAnG,EACAoG,EAECT,EAAYroC,SAAYooC,EAASpoC,SAWpC6oC,EAAIT,EAASpoC,QAAQonC,UAAUnnC,MAC/ByiC,EAAI0F,EAASpoC,QAAQonC,UAAUlqC,OAC/B4rC,EAAMT,EAAYroC,UAXlB6oC,EAAI5C,EAAOM,YACX7D,EAAIuD,EAAO7uC,aACX0xC,EAAM7C,EAAOE,WAAW,MAExBF,EAAOhmC,MAAQ4oC,EACf5C,EAAO/oC,OAASwlC,EAEhB2F,EAAYroC,QAAU8oC,GAOxB,MAAMC,EAAUD,EAAKE,gBAAgBH,EAAGnG,GAClCuG,EAASF,EAAQnS,KACjBsS,EAAMrG,GAAQ,CAACO,EAAK,EAAG,IAE7B,IAAI1uB,EAAQ,EAEZ,IAAK,IAAIxM,EAAI,EAAGA,EAAIw6B,EAAGx6B,IAAK,CAC1B,MAAMihC,EAAO,EAAIjhC,GAAKw6B,EAAI,GACpB0G,EAAK,CAAC,IAAMD,EAAM,IAAMA,EAAM,IAAMA,GACpCE,EAAK,CAACH,EAAI,GAAKC,EAAMD,EAAI,GAAKC,EAAMD,EAAI,GAAKC,GACnD,IAAK,IAAIlhC,EAAI,EAAGA,EAAI4gC,EAAG5gC,IAAK,CAC1B,MAAMqhC,EAAOrhC,GAAK4gC,EAAI,GACtBI,EAAOv0B,KAAW00B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOv0B,KAAW00B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOv0B,KAAW00B,EAAG,IAAMC,EAAG,GAAKD,EAAG,IAAME,EAC5CL,EAAOv0B,KAAW,KAItBo0B,EAAKS,aAAaR,EAAS,EAAG,GAvJ5BS,CAAUhC,EAAexnC,QAAS5H,WAAiCgrC,EAAKiF,EAAaD,KACpF,CAAChF,KAGJrmC,EAAAA,EAAAA,KAAU,MAsJZ,SAAiBkpC,GACf,MAAM4C,EAAI5C,EAAOM,YAEjBN,EAAOhmC,MAAQ4oC,EACf5C,EAAO/oC,OAFG,EAGV,MAAM4rC,EAAM7C,EAAOE,WAAW,MAExB4C,EAAUD,EAAIE,gBAAgBH,EAL1B,GAMJI,EAASF,EAAQnS,KAEvB,IAAIliB,EAAQ,EAEZ,IAAK,IAAIzM,EAAI,EAAGA,EAAI4gC,EAAG5gC,IAAK,CAC1B,MACM+9B,EAAMnD,GAAQ,CADR56B,GAAK4gC,EAAI,GACK,EAAG,IAE7BI,EAAOv0B,KAAWsxB,EAAI,GACtBiD,EAAOv0B,KAAWsxB,EAAI,GACtBiD,EAAOv0B,KAAWsxB,EAAI,GAEtBiD,EAAOv0B,KAAW,IAGpBo0B,EAAIS,aAAaR,EAAS,EAAG,GA5K3BU,CAAQhC,EAAaznC,QAAS5H,cAC7B,IAEH,MAAMsxC,GAAkBnwC,EAAAA,EAAAA,KAAaqE,IACnC,MAAM+rC,EAAW/rC,EAAEgH,cAAc8B,MAAMqY,QAAQ,WAAY,IAAIwP,MAAM,EAAG,IAExE,GAAIob,EAAS1gB,MAAM,mCAAoC,CACrD,MAAM+c,EAAM2D,EAASte,MAAM,KAAK7S,KAAKoxB,GAAY/iC,OAAO+iC,EAAQjX,UAChEgV,EAAOpF,GAAQyD,IAGjBpoC,EAAEgH,cAAc8B,MAAQijC,IACvB,IAEGE,GAAkBtwC,EAAAA,EAAAA,KAAaqE,IACnC,MAAMksC,EAAWlsC,EAAEgH,cAAc8B,MAAMqY,QAAQ,gBAAiB,IAAIwP,MAAM,EAAG,GAEzEub,EAAS7gB,MAAM,uBACjB0e,EAAOpF,GAAQR,GAAQ+H,EAAS/qB,QAAQ,IAAK,OAG/CnhB,EAAEgH,cAAc8B,MAAQojC,IACvB,IAEGC,GAA6BxwC,EAAAA,EAAAA,KAAaqE,IAC9C+pC,EAAOpF,GAAQR,GAAQnkC,EAAEgH,cAAcolC,QAAQruC,MAAOojB,QAAQ,IAAK,SAClE,IAEGllB,GAAY8D,EAAAA,EAAAA,GAChB,gEACAgK,GAAc,eAKhB,OAFA6N,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,4BAGhD,0BAAK/vB,IAAKyW,EAAc/d,UAAWA,GACjC,0BAAKA,UAAU,sBACb,0BAAKsH,IAAKqmC,EAAgB3tC,UAAU,gBAClC,kCACA,0BACEA,UAAU,SAEVnC,MAAQ,wBAAuByvC,EAAc,SAASA,EAAc,6BAA6BwB,QAGrG,0BAAKxnC,IAAKsmC,EAAc5tC,UAAU,cAChC,kCACA,0BACEA,UAAU,SAEVnC,MAAQ,yBAAwB2vC,4BAAsCuB,QAG1E,0BAAK/uC,UAAU,SACb,mBAACke,GAAA,EAAD,CAAWrR,MAAOwhC,EAAUxkB,MAAM,MAAM9c,SAAUijC,IAClD,mBAAC9xB,GAAA,EAAD,CAAWrR,MAAOshC,EAAUtkB,MAAM,MAAM9c,SAAU8iC,MAGtD,0BAAK7vC,UAAU,qBACZktC,GAAkBvuB,KAAK7c,GACtB,0BACE9B,UAAW8B,IAAW,IAAGgtC,IAAQ,cAAWvtC,EAC5C,aAAYO,EAEZjE,MAAQ,qBAAoBiE,KAC5B7B,QAASiwC,YChCrB,IAAetoC,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAAsBC,IACjC,CACL0xC,6BAA8BrnC,QAAQrK,EAAOqS,SAASC,MAAMo/B,8BAC5DC,8BAA+BtnC,QAAQrK,EAAOqS,SAASC,MAAMq/B,+BAC7DC,sBAAuBvnC,QAAQrK,EAAOqS,SAASC,MAAMs/B,uBACrDC,uBAAwBxnC,QAAQrK,EAAOqS,SAASC,MAAMu/B,wBACtDC,0BAA2BznC,QAAQrK,EAAOqS,SAASC,MAAMw/B,2BACzDC,2BAA4B1nC,QAAQrK,EAAOqS,SAASC,MAAMy/B,4BAC1DC,8BAA+B3nC,QAAQrK,EAAOqS,SAASC,MAAM0/B,+BAC7DC,oBAAqBjyC,EAAOqS,SAASC,MAAM2/B,oBAC3CC,qBAAsBlyC,EAAOqS,SAASC,MAAM4/B,qBAC5CC,wBAAyBnyC,EAAOqS,SAASC,MAAM6/B,4BAGnD,CAACzxC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,2BACA,kCACA,6BACA,mCAlBkBZ,EA1KqD,EACvE+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACA2iB,6BAAAA,EACAC,8BAAAA,EACAC,sBAAAA,EACAC,uBAAAA,EACAC,0BAAAA,EACAC,2BAAAA,EACAC,8BAAAA,EACAE,qBAAAA,EACAD,oBAAAA,EACAE,wBAAAA,EACAC,yBAAAA,EACAC,gCAAAA,EACAC,2BAAAA,EACAC,8BAAAA,OAEA/tC,EAAAA,EAAAA,KAAU,KACR4tC,MACC,CAACA,IAEJ,MAAMI,GAAuBxxC,EAAAA,EAAAA,KAAY,CACvCqE,EACAotC,EACAC,KAEA,MAAMC,EAA+B,YAAbF,GACnBf,IACc,UAAbe,EAAuBb,EAAwBE,GAC/Cc,EAAyC,YAAbH,EAC9Bd,EACc,UAAbc,EAAuBZ,EAAyBE,EAErDO,EAA2B,CACzBG,SAAAA,KACgB,WAAZC,GAAwB,CAAEzoB,UAAW5kB,EAAEkJ,OAAO80B,QAASwP,mBAAoBD,MAC/D,iBAAZF,GAA8B,CAAEG,mBAAoBxtC,EAAEkJ,OAAO80B,QAASpZ,SAAU0oB,OAErF,CACDZ,EAA4BD,EAC5BD,EAAwBD,EACxBD,EAA+BD,EAC/BY,IAGIQ,GAAkC9xC,EAAAA,EAAAA,KAAaqE,IACnDgtC,EAAgC,CAC9BpoB,UAAW5kB,EAAEkJ,OAAO80B,YAErB,CAACgP,IAEEpxC,GAAOC,EAAAA,EAAAA,KAIb,OAFA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,eAGhD,0BAAKr3B,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAA/D,qBAGA,mBAACugC,GAAA,EAAD,CACEjY,MAAM,oBAEN6c,SAAU/mC,EAAKgxC,EAAsB,gCAAkC,kCACvE5O,QAAS4O,EACT5jC,SAAWhJ,IACTktC,EAA8B,CAAEN,oBAAqB5sC,EAAEkJ,OAAO80B,aAGlE,mBAACD,GAAA,EAAD,CACEjY,MAAM,wBACNld,UAAWgkC,EAEXjK,SAAU/mC,EAAKixC,EAAuB,gCAAkC,kCACxE7O,QAAS6O,EACT7jC,SAAWhJ,IACTktC,EAA8B,CAAEL,qBAAsB7sC,EAAEkJ,OAAO80B,aAGnE,0BAAK/hC,UAAU,wBACb,mBAAC,GAAD,CACE6pB,MAAM,QACNld,UAAWgkC,EACXpN,MAAO,CACL58B,IAAK,EACLD,IAAK,IAEPmG,MAAOgkC,EACP9jC,SAAW0kC,IACTR,EAA8B,CAAEJ,wBAAyBY,SAKjE,0BAAKzxC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAC5D5B,EAAK,6BAGR,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,gCAEZ+mC,SAAU/mC,EAAKywC,EAA+B,gCAAkC,kCAChFrO,QAASqO,EACTrjC,SAAWhJ,IAAQmtC,EAAqBntC,EAAG,UAAW,aAExD,mBAAC+9B,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,kBACZgN,UAAWyjC,EAEX1J,SAAU/mC,EAAK0wC,EAAgC,gCAAkC,kCACjFtO,QAASsO,EACTtjC,SAAWhJ,IAAQmtC,EAAqBntC,EAAG,UAAW,oBAI1D,0BAAK/D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,iBAEhF,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,0BACZ+mC,SAAU/mC,EAAK2wC,EAAwB,gCAAkC,kCACzEvO,QAASuO,EACTvjC,SAAWhJ,IAAQmtC,EAAqBntC,EAAG,QAAS,aAEtD,mBAAC+9B,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,kBACZgN,UAAW2jC,EACX5J,SAAU/mC,EAAK4wC,EAAyB,gCAAkC,kCAC1ExO,QAASwO,EACTxjC,SAAWhJ,IAAQmtC,EAAqBntC,EAAG,QAAS,oBAIxD,0BAAK/D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,mBAEhF,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,4BAEZ+mC,SAAU/mC,EAAK6wC,EAA4B,gCAAkC,kCAC7EzO,QAASyO,EACTzjC,SAAWhJ,IAAQmtC,EAAqBntC,EAAG,YAAa,aAE1D,mBAAC+9B,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,kBACZgN,UAAW6jC,EAEX9J,SAAU/mC,EAAK8wC,EAA6B,gCAAkC,kCAC9E1O,QAAS0O,EACT1jC,SAAWhJ,IAAQmtC,EAAqBntC,EAAG,YAAa,oBAI5D,0BAAK/D,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,eAEhF,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,iBACZoiC,QAAS2O,EACT3jC,SAAUykC,UCSpB,IAAe5pC,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IAAuB,cACtB,MACEqS,UACEC,OAAO,YAAE0gC,EAAF,mBAAeC,EAAf,mBAAmCC,GADlC,QAERC,GAHE,QAKJC,EALI,eAMJC,GACErzC,EAEJ,MAAO,CACLgzC,YAAAA,EACAM,aAAcF,EAAQG,WACtBC,cAAeH,EAAe1zC,OAC9BszC,mBAAAA,EACAC,mBAAAA,EACAO,6BAA4B,UAAEN,EAAQO,mBAAV,aAAE,EAAqBC,WACnDC,0BAAyB,UAAET,EAAQU,gBAAV,aAAE,EAAkBF,WAC7CG,8BAA6B,UAAEX,EAAQY,oBAAV,aAAE,EAAsBJ,WACrDK,4BAA2B,UAAEb,EAAQc,gBAAV,aAAE,EAAkBN,WAC/CO,4BAA2B,UAAEf,EAAQgB,kBAAV,aAAE,EAAoBR,eAGrD,CAACjzC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,sBAAuB,qBAAsB,sBAAuB,sBAAuB,2BAzB3EZ,EAhL+C,EACjE+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAikB,YAAAA,EACAM,aAAAA,EACAE,cAAAA,EACAP,mBAAAA,EACAC,mBAAAA,EACAO,6BAAAA,EACAG,0BAAAA,EACAE,8BAAAA,EACAE,4BAAAA,EACAE,4BAAAA,EACAE,oBAAAA,EACAC,oBAAAA,EACAC,mBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,OAEAhwC,EAAAA,EAAAA,KAAU,KACR6vC,IACAC,IACAF,IACAG,MACC,CAACF,EAAqBC,EAAoBF,EAAqBG,IAElE,MAAMtzC,GAAOC,EAAAA,EAAAA,KAIb,SAASuzC,EAAmBd,GAC1B,OAAQA,GACN,IAAK,YACH,OAAO1yC,EAAK,gBAEd,IAAK,WACH,OAAOA,EAAK,eAEd,IAAK,SACH,OAAOA,EAAK,cAMlB,OAjBAgc,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,SAkBhD,0BAAKr3B,UAAU,kCACb,0BAAKA,UAAU,sBACb,mBAAC4e,GAAA,EAAD,CACEvc,KAAK,cACLu7B,QAAM,EACN39B,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,sBAE9B,0BAAKr3B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,iBAC7BqyC,EAAe,GACd,2BAAMhyC,UAAU,WAAWO,IAAI,QAC5BZ,EAAK,QAASqyC,MAKvB,mBAACpzB,GAAA,EAAD,CACEvc,KAAK,OACLu7B,QAAM,EACN39B,QAAS,IAAMw2B,EACbib,EAAcra,EAAAA,GAAAA,aAA+BA,EAAAA,GAAAA,gBAG/C,0BAAKr3B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,wBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5BZ,EAAK+xC,EAAc,aAAe,kBAIzC,mBAAC9yB,GAAA,EAAD,CACEvc,KAAK,kBACLu7B,QAAM,EACN39B,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,wBAE9B,0BAAKr3B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,kBAC7BuyC,EAAgB,GACf,2BAAMlyC,UAAU,WAAWO,IAAI,QACV,IAAlB2xC,EAAsB,YAAe,GAAEA,iBAOlD,0BAAKlyC,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,iBAErF,mBAACif,GAAA,EAAD,CACEgf,QAAM,EACN59B,UAAU,UACVC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,qBAE9B,0BAAKr3B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,sBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B4yC,EAAmBhB,MAI1B,mBAACvzB,GAAA,EAAD,CACEgf,QAAM,EACN59B,UAAU,UACVC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,kBAE9B,0BAAKr3B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,kBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B4yC,EAAmBb,MAI1B,mBAAC1zB,GAAA,EAAD,CACEgf,QAAM,EACN59B,UAAU,UACVC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,sBAE9B,0BAAKr3B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,6BAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B4yC,EAAmBX,MAI1B,mBAAC5zB,GAAA,EAAD,CACEgf,QAAM,EACN59B,UAAU,UACVC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,oBAE9B,0BAAKr3B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,yBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B4yC,EAAmBT,MAI1B,mBAAC9zB,GAAA,EAAD,CACEgf,QAAM,EACN59B,UAAU,UACVC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,oBAE9B,0BAAKr3B,UAAU,uBACb,2BAAMA,UAAU,SAASL,EAAK,gBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B4yC,EAAmBP,OAM3BhB,GACC,0BAAK5xC,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAC5D5B,EAAK,iCAER,mBAACmiC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,4CACZ+mC,SAAU/mC,EAAK,gCACfoiC,QAASh5B,QAAQ4oC,GACjBhlC,UAAWilC,EACXrK,QAAS2L,U,cCjHrB,UAAetrC,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACQ,CACL00C,UAAW10C,EAAOqS,SAASC,MAAMoiC,UACjCC,SAAU30C,EAAOqS,SAASC,MAAMqiC,aAGpC,CAACj0C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,gBAAiB,sBARDZ,EAhEgD,EAClE+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACA2lB,UAAAA,EACAC,SAAAA,EACAC,cAAAA,EACAzN,iBAAAA,MAEA,MAAO0N,EAAkBC,IAAuBvwC,EAAAA,EAAAA,IAAiBowC,IAC1D1gB,EAAW8gB,EAAeC,IAAmBvwB,EAAAA,GAAAA,MAGpDjgB,EAAAA,EAAAA,KAAU,KACRowC,MACC,CAACA,IAEJ,MAAM9P,GAAe9jC,EAAAA,EAAAA,KAAai0C,IAChCH,EAAoBG,GACpBF,KAEKG,EAAAA,GAAAA,IAAYD,GAAsB,KACrCD,IAEA7N,EAAiB,CAAEwN,SAAUM,SAE9B,CAACF,EAAeC,EAAiB7N,IAE9B9b,GAAUtoB,EAAAA,EAAAA,KAAQ,IACf2xC,EAsBX,SAAsBA,GACpB,MAAMS,GAAmBnwC,OAAOowC,UAAUT,UAAY,MAAMU,cACtDC,EAAgBH,EAAgBI,OAAO,EAAG,GAEhD,OAAOb,EAAUz0B,KAAI,EAAGg1B,SAAAA,EAAUO,WAAAA,EAAYl4B,KAAAA,MAAzB,CACnBnP,MAAO8mC,EACP9pB,MAAOqqB,EACPxN,SAAU1qB,MACRyV,MAAMC,IACDmiB,GAAoBniB,EAAE7kB,QAAUgnC,GAAmBniB,EAAE7kB,QAAUmnC,EAAsB,GAAJ,IA/BrEG,CAAaf,QAAa7xC,GAC5C,CAAC6xC,IAIJ,OAFAz3B,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,UAGhD,0BAAKr3B,UAAU,kEACZ+pB,EACC,mBAACD,GAAA,EAAD,CACE9N,KAAK,yBACL+N,QAASA,EACTC,SAAUupB,EACVa,cAAezhB,EAAY4gB,OAAmBhyC,EAC9CwL,SAAUy2B,IAGZ,mBAACvkB,GAAA,EAAD,WCtED,SAASo1B,GAAcC,GAC5B,OAAQA,GACN,KAAKjd,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,MAAO,cACT,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,MAAO,eACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,WACT,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,MAAO,cCQb,MAgLA,IAAezvB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAU41C,OAAAA,MACT,IAAIC,EAEJ,MACEt4B,OAASC,KAAMC,GACfpL,UAAU,QAAE8gC,IACVnzC,EAEJ,OAAQ41C,GACN,KAAKjd,EAAAA,GAAAA,mBACHkd,EAAkB1C,EAAQO,YAC1B,MAEF,KAAK/a,EAAAA,GAAAA,gBACHkd,EAAkB1C,EAAQU,SAC1B,MAEF,KAAKlb,EAAAA,GAAAA,oBACHkd,EAAkB1C,EAAQY,aAC1B,MAEF,KAAKpb,EAAAA,GAAAA,kBACHkd,EAAkB1C,EAAQc,SAC1B,MAEF,KAAKtb,EAAAA,GAAAA,kBACHkd,EAAkB1C,EAAQgB,WAI9B,OAAK0B,EAIE,IACFA,EACHp4B,UAAAA,GALO,MAQX,CAAC/c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAxCpCZ,EAhLyD,EAC3E61C,OAAAA,EACA94B,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACA4kB,WAAAA,EACAmC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAC,aAAAA,EACAx4B,UAAAA,EACAy4B,qBAAAA,MAEA,MAAMj1C,GAAOC,EAAAA,EAAAA,KAEPi1C,GAAoBpzC,EAAAA,EAAAA,KAAQ,KAChC,OAAQ6yC,GACN,KAAKjd,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACH,MAAO,CACL,CAAExqB,MAAO,YAAagd,MAAOlqB,EAAK,iBAClC,CAAEkN,MAAO,WAAYgd,MAAOlqB,EAAK,iBAGrC,QACE,MAAO,CACL,CAAEkN,MAAO,YAAagd,MAAOlqB,EAAK,iBAClC,CAAEkN,MAAO,WAAYgd,MAAOlqB,EAAK,gBACjC,CAAEkN,MAAO,SAAUgd,MAAOlqB,EAAK,kBAGpC,CAACA,EAAM20C,IAEJQ,EAAiB,CACrBC,iBAAiC,WAAf1C,EAClB2C,kBAAkC,cAAf3C,GAGf4C,EAAaZ,GAAcC,GAE3BY,GAAazzC,EAAAA,EAAAA,KAAQ,KACzB,OAAQ6yC,GACN,KAAKjd,EAAAA,GAAAA,mBACH,OAAO13B,EAAK,qBACd,KAAK03B,EAAAA,GAAAA,gBACH,OAAO13B,EAAK,iBACd,KAAK03B,EAAAA,GAAAA,oBACH,OAAO13B,EAAK,4BACd,KAAK03B,EAAAA,GAAAA,kBACH,OAAO13B,EAAK,wBACd,KAAK03B,EAAAA,GAAAA,kBACH,OAAO13B,EAAK,eACd,QACE,UAEH,CAACA,EAAM20C,KAEV34B,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgB6d,GAElD,MAAMa,GAAkB1zC,EAAAA,EAAAA,KAAQ,KAC9B,OAAQ6yC,GACN,KAAKjd,EAAAA,GAAAA,gBACH,OAAO13B,EAAK,cACd,QACE,UAEH,CAACA,EAAM20C,IAEJc,EAAwB,MAC5B,OAAQd,GACN,KAAKjd,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,+BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,mCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,iCACT,QACE,OAAOA,EAAAA,GAAAA,mCAXiB,GAexBge,EAAuB,MAC3B,OAAQf,GACN,KAAKjd,EAAAA,GAAAA,mBACH,OAAOA,EAAAA,GAAAA,iCACT,KAAKA,EAAAA,GAAAA,gBACH,OAAOA,EAAAA,GAAAA,8BACT,KAAKA,EAAAA,GAAAA,oBACH,OAAOA,EAAAA,GAAAA,kCACT,KAAKA,EAAAA,GAAAA,kBACH,OAAOA,EAAAA,GAAAA,gCACT,QACE,OAAOA,EAAAA,GAAAA,kCAXgB,GAevBie,GAAe7zC,EAAAA,EAAAA,KAAQ,IACtB+yC,GAAiBC,GAAiBt4B,EAIhCs4B,EAAac,QAAO,CAACC,EAAQ72C,IAC3B62C,GAAUr5B,EAAUxd,GAAUwd,EAAUxd,GAAQ82C,aAAgB,IACtEjB,EAAan2C,QALP,GAMR,CAACo2C,EAAcD,EAAcr4B,IAE1Bu5B,GAAaj0C,EAAAA,EAAAA,KAAQ,IACpBizC,GAAiBC,GAAiBx4B,EAIhCw4B,EAAaY,QAAO,CAACC,EAAQ72C,IAC3B62C,GAAUr5B,EAAUxd,GAAUwd,EAAUxd,GAAQ82C,aAAgB,IACtEf,EAAar2C,QALP,GAMR,CAACs2C,EAAcD,EAAcv4B,IAE1Bw5B,GAAyBj2C,EAAAA,EAAAA,KAAamN,IAC1C+nC,EAAqB,CACnBK,WAAAA,EACA5C,WAAYxlC,MAEb,CAACooC,EAAYL,IAEhB,OACE,0BAAK50C,UAAU,kCACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,uBAAuBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY2zC,GAE3E,mBAACprB,GAAA,EAAD,CACE9N,KAAO,cAAai5B,IACpBlrB,QAAS8qB,EACT9nC,SAAU4oC,EACV3rB,SAAUqoB,IAGX8C,GACC,wBAAGn1C,UAAU,mCAAmCO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY4zC,IAI1F,0BAAKn1C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAAY5B,EAAK,sBAEpFm1C,EAAeE,mBACd,mBAACp2B,GAAA,EAAD,CACEgf,QAAM,EACNv7B,KAAK,WACLpC,QAAS,KAAQw2B,EAAe2e,KAEhC,0BAAKp1C,UAAU,iCACZs1C,EAAe,GAAK,2BAAMt1C,UAAU,OAAOO,IAAI,QAA3B,IAAoC+0C,GACzD,2BAAMt1C,UAAU,SAASL,EAAK,oBAC9B,2BAAMK,UAAU,YAAYL,EAAK,wBAItCm1C,EAAeC,kBACd,mBAACn2B,GAAA,EAAD,CACEgf,QAAM,EACNv7B,KAAK,cACLpC,QAAS,KAAQw2B,EAAe4e,KAEhC,0BAAKr1C,UAAU,iCACZ01C,EAAa,GAAK,2BAAM11C,UAAU,OAAOO,IAAI,QAA3B,IAA0Cm1C,GAC7D,2BAAM11C,UAAU,SAASL,EAAK,mBAC9B,2BAAMK,UAAU,YAAYL,EAAK,8BChD/C,SAASi2C,GAAYC,GACnB,MAAO,CAACA,EAAQC,OAAQD,EAAQE,SAASh5B,OAAOhU,SAASmD,KAAK,MAGhE,SAAS8pC,GAAqBH,GAC5B,MAAQ,GAAEA,EAAQI,cAAcJ,EAAQI,YAAc,KAAO,MAAMJ,EAAQK,YAAYL,EAAQM,gBAGjG,UAAevuC,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACQ,CACLqzC,eAAgBrzC,EAAOqzC,mBAG3B,CAAC3yC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,qBAAsB,yBAA0B,gCAPhCZ,EA9H6D,EAC/E+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAskB,eAAAA,EACAiB,mBAAAA,EACAoD,uBAAAA,EACAC,2BAAAA,MAEA,MAAOC,EAAiCC,EAA+BC,IAAkCrzB,EAAAA,GAAAA,MACzGjgB,EAAAA,EAAAA,KAAU,KACR8vC,MACC,CAACA,IAEJ,MAAMyD,GAA8B/2C,EAAAA,EAAAA,KAAaigB,IAC/Cy2B,EAAuB,CAAEz2B,KAAAA,MACxB,CAACy2B,IAEEM,GAA6Bh3C,EAAAA,EAAAA,KAAY,KAC7C82C,IACAH,MACC,CAACG,EAAgCH,IAE9BM,GAAiBl1C,EAAAA,EAAAA,KAAQ,IACtBswC,EAAepQ,MAAMkU,GAAYA,EAAQe,aAC/C,CAAC7E,IAEE8E,GAAgBp1C,EAAAA,EAAAA,KAAQ,IACrBswC,EAAeh1B,QAAQ84B,IAAaA,EAAQe,aAClD,CAAC7E,IAEEpyC,GAAOC,EAAAA,EAAAA,KAqEb,OAnEA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,uBAoEhD,0BAAKr3B,UAAU,kCACZ22C,IAnEyBd,EAmEcc,EAjExC,0BAAK32C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjE5B,EAAK,gCAGR,mBAACif,GAAA,EAAD,CAAUgf,QAAM,EAAC4C,UAAQ,EAACxgC,UAAU,WAClC,0BAAKA,UAAU,sBAAsBO,IAAI,QACvC,2BAAMP,UAAU,QAAQO,IAAI,QAAQs1C,EAAQiB,SAC5C,2BAAM92C,UAAU,wBAAwBg2C,GAAqBH,IAC7D,2BAAM71C,UAAU,YAAY61C,EAAQkB,GAApC,MAA2CnB,GAAYC,MAI3D,mBAACj3B,GAAA,EAAD,CACE5e,UAAU,2BACVqC,KAAK,OACLmF,QAAM,EACNo2B,QAAM,EACN39B,QAASs2C,GAER52C,EAAK,2BA8CTk3C,IAxCwBG,EAwCaH,EAtCtC,0BAAK72C,UAAU,iBACb,yBAAIA,UAAU,4BAA4BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjE5B,EAAK,kBAGPq3C,EAASr4B,KAKhB,SAAuBk3B,GACrB,OACE,mBAACj3B,GAAA,EAAD,CACEze,IAAK01C,EAAQl2B,KACbnY,QAAM,EACNo2B,QAAM,EACNpR,eAAgB,CAAC,CACf5M,MAAO,YACPvd,KAAM,OACN40C,QAAS,KACPR,EAA4BZ,EAAQl2B,SAGxC3f,UAAU,WAEV,0BAAKA,UAAU,gCAAgCO,IAAI,QACjD,2BAAMP,UAAU,SAAQ8uB,EAAAA,EAAAA,IAAoBnvB,EAA2B,IAArBk2C,EAAQqB,aAC1D,2BAAMl3C,UAAU,SAAS61C,EAAQiB,SACjC,2BAAM92C,UAAU,wBAAwBg2C,GAAqBH,IAC7D,2BAAM71C,UAAU,YAAY61C,EAAQkB,GAApC,MAA2CnB,GAAYC,WAU1DgB,GACC,mBAAC91B,GAAA,EAAD,CACEpf,OAAQ20C,EACRnuC,QAASquC,EACT5zC,KAAK,yDACLoe,aAAa,+BACbC,eAAgBy1B,EAChBnf,sBAAoB,KAhD5B,IAA6Byf,EA5BCnB,M,eC3BhC,MA8FA,IAAejuC,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MACEud,OACEC,KAAMi7B,GAER7pB,OACEpR,KAAMk7B,GAERtF,SAAS,IACPlP,GAEFyU,aACEC,WAAYC,IAEZ74C,EAEJ,MAAO,CACLy4C,WAAAA,EACAC,WAAAA,EACAI,WAAY5U,EACZ2U,cAAAA,MAGJ,CAACn4C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAxBpCZ,EA9F2D,EAC7E+c,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACA0pB,WAAAA,EACAC,WAAAA,EACAI,WAAAA,EACAD,cAAAA,EACAE,eAAAA,MAEA,MAAMC,GAAqBh4C,EAAAA,EAAAA,KAAai4C,IACtCF,EAAe,CAAEE,UAAAA,MAChB,CAACF,IAEE93C,GAAOC,EAAAA,EAAAA,KA2Cb,OAzCA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,qBA0ChD,0BAAKr3B,UAAU,wBACb,0BAAKA,UAAU,oCACb,0BAAKA,UAAU,iBACb,wBAAGA,UAAU,6CAA6CO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjF5B,EAAK,sBAIV,0BAAKK,UAAU,2BACZw3C,MAAAA,GAAAA,EAAYn5C,OACX,0BAAK2B,UAAU,oBACZw3C,EAAY74B,KAAI,CAACg5B,EAAW/yB,IAnDzC,SAAuB+yB,EAAmB/yB,EAAWgzB,GACnD,MAAMC,GAAY94C,EAAAA,EAAAA,IAAc44C,GAC1Br3C,EAAOu3C,EAAYT,EAAWO,QAAap2C,EAC3ClB,EAAQw3C,OAAoCt2C,EAAxB41C,EAAWQ,GAE/B33C,GAAY8D,EAAAA,EAAAA,GAChB,wDACA+zC,EAAY,UAAY,SAG1B,OACE,mBAACj5B,GAAA,EAAD,CACEze,IAAKw3C,EACL33C,UAAWA,EACXwH,QAAM,EACNo2B,QAAM,EACNpR,eAAgB,CAAC,CACf5M,MAAO,UACPvd,KAAM,SACN40C,QAAS,KACPS,EAAmBC,MAGvB95C,MAAQ,SA4B6D,EA5BpC+mB,GAAKkzB,EAAAA,SAEtC,mBAAC53C,EAAA,EAAD,CAAQE,KAAK,SAASE,KAAMA,EAAMD,KAAMA,IACxC,0BAAKL,UAAU,eAAeO,IAAI,QAChC,yBAAIA,IAAI,SAAQC,EAAAA,EAAAA,IAAYq3C,GAAYxmB,EAAAA,EAAAA,IAAgB/wB,IAAQod,EAAAA,EAAAA,GAAa/d,EAAMU,KAAW,MAC7FC,MAAAA,OAAA,EAAAA,EAAM8xC,cACL,0BAAKpyC,UAAU,gBAAgBO,IAAI,SAAQw3C,EAAAA,GAAAA,IAA0BR,EAAej3C,EAAK8xC,cAE1F9xC,IAASA,EAAK8xC,aAAe9xC,EAAKgxB,UACjC,0BAAKtxB,UAAU,mBAAmBO,IAAI,QAAtC,IAA+CD,EAAKgxB,YAmBf0mB,CAAcL,EAAW/yB,MAE5D4yB,IAAeA,EAAWn5C,OAC5B,0BAAK2B,UAAU,aAAaO,IAAI,QAAhC,iBAIA,mBAAC0e,GAAA,EAAD,CAAS9e,IAAI,cAKnB,mBAACq7B,GAAA,EAAD,CACEpvB,SAAO,EACPnM,QAAS,OAETD,UAAU,kBACV+B,UAAU,sBAEV,wBAAG/B,UAAU,mB,eCxGrB,MAyCA,IAAe4H,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAAsBC,IACjC,CACLu5C,eAAeC,EAAAA,EAAAA,IAAoBx5C,EAAQ,SAF3BD,EAzCoC,EACtD+c,SAAAA,EAAUiS,QAAAA,EAASwqB,cAAAA,EAAexhB,eAAAA,MAElC,MAAM92B,GAAOC,EAAAA,EAAAA,KAIb,OAFA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,cAGhD,0BAAKr3B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACm4C,GAAA,EAAD,CAAevT,QAASqT,EAAe73C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,SAC/CC,EAAAA,EAAAA,GAAWb,EAAK,uBAAwB,CAAC,SAI9C,0BAAKK,UAAU,gCACb,mBAAC4e,GAAA,EAAD,CACEvc,KAAK,OACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,6BAE7B13B,EAAK,mBAER,mBAACif,GAAA,EAAD,CACEvc,KAAK,eACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,eAE7B13B,EAAK,oBAER,mBAACif,GAAA,EAAD,CACEvc,KAAK,QACLpC,QAAS,IAAMw2B,EAAeY,EAAAA,GAAAA,oCAE7B13B,EAAK,2B,0BC/BhB,MA6DA,IAAeiI,EAAAA,EAAAA,KA3D6B,EAC1C0sC,OAAAA,EACA94B,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAtO,MAAAA,EACAwT,UAAAA,EACAylB,iBAAAA,EACAh6B,YAAAA,EAAc,mBACd0X,KAAAA,EACAuiB,YAAAA,EACAC,WAAAA,EACA31B,SAAAA,MAEA,MAAO41B,EAAiBC,IAAsBv1C,EAAAA,EAAAA,IAAiB,KACxDw1C,EAAoBC,IAAyBz1C,EAAAA,EAAAA,KAAS,GAEvD01C,GAAej5C,EAAAA,EAAAA,KAAak5C,IAC5BR,GAAoBQ,IAAgBR,EACtCI,EArBuB,6BAuBvB71B,EAASi2B,KAEV,CAACj2B,EAAUy1B,IAERS,GAAmBn5C,EAAAA,EAAAA,KAAY,KAC/B44C,GACFA,IAEFE,EAAmB,MAClB,CAACF,IAEE34C,GAAOC,EAAAA,EAAAA,KAIb,OAFA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgB6d,GAGhD,0BAAKt0C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAAC84C,GAAA,EAAD,CAAgBC,OAAK,EAACC,kBAAmBP,KAG3C,0BAAKz4C,UAAU,gCACb,mBAACi5C,GAAA,EAAD,CACE95B,MAAOo5B,GAAmBp5B,EAC1B2W,KAAMA,EACN1X,YAAaA,EACbi6B,YAAaA,GAAe14C,EAAK,QACjC24C,WAAYO,EACZlmB,UAAWA,EACXqmB,kBAAmBP,EACnBS,2BAA4BR,EAC5B/1B,SAAUg2B,SCjCpB,IAAe/wC,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAAsBC,IACjC,CACLu5C,eAAeC,EAAAA,EAAAA,IAAoBx5C,EAAQ,SAF3BD,EAxBkC,EACpD+c,SAAAA,EAAUib,eAAAA,EAAgBhJ,QAAAA,EAASwqB,cAAAA,EAAekB,QAAAA,MAElD,MAAMx5C,GAAOC,EAAAA,EAAAA,KAIb,OAFA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,eAGhD,0BAAKr3B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACm4C,GAAA,EAAD,CAAevT,QAASqT,EAAe73C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,QAC/CZ,EAAK,+BAIV,0BAAKK,UAAU,gCACb,mBAAC4B,EAAA,EAAD,CAAQ3B,QAASk5C,GAAUx5C,EAAK,uCCHlCy5C,GAAyBp3C,EAAAA,GAA0B,IAAM,IA8H/D,IAAe4F,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAAqB,CAACC,GAAU2D,KAAAA,MAC3C,CACL41C,eAAeC,EAAAA,EAAAA,IAAoBx5C,EAAiB,UAAT2D,EAAmB,KAAO,SAFrD5D,EA5H0C,EAC5Dw5C,cAAAA,EACAnrC,KAAAA,EAAO,OACP6lB,UAAAA,EACAxT,MAAAA,EACAf,YAAAA,EACAi7B,cAAAA,EACAf,WAAAA,EACA31B,SAAAA,EACAnH,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACA6mB,OAAAA,MAGA,MAAM9nC,GAAW7G,EAAAA,EAAAA,IAAyB,OAEnCkH,EAAOysC,IAAYr2C,EAAAA,EAAAA,IAAiB,KACpCs2C,EAAgBC,EAAoBC,IAAwBt2B,EAAAA,GAAAA,IAAQ,IAE3EjgB,EAAAA,EAAAA,KAAU,KACHoF,EAAAA,IACHxC,YAAW,KACT0G,EAASrG,QAAS8W,UACjBm8B,MAEJ,IAEH,MA2BMz5C,GAAOC,EAAAA,EAAAA,KAIb,OAFA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgB6d,GAGhD,0BAAKt0C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACm4C,GAAA,EAAD,CAAevT,QAASqT,EAAe73C,KAAK,WAG9C,0BAAKJ,UAAU,gCACb,2BAAMk2B,OAAO,GAAGvT,SA9BA5e,IACpBA,EAAEsH,iBAEGmB,EAASrG,SAIdwc,EAAS9V,KAwBH,mBAACqR,GAAA,EAAD,CACE5W,IAAKkF,EACLK,MAAOA,EACPkZ,UAAWjZ,EACX+c,MAAOzL,EACPe,MAAOA,EACPpS,SA7CiBhJ,IACrBob,GAASm5B,GACXA,IAGFgB,EAASv1C,EAAEkJ,OAAOJ,UA2CXA,EACC,mBAACjL,EAAA,EAAD,CAAQkL,KAAK,SAAS6lB,UAAWA,EAAWnrB,QAAM,GAAE7H,EAAK,aAEzD,mBAACiC,EAAA,EAAD,CACEqe,QAAM,EACN0S,UAAWA,EACXnrB,QAAM,EACNvH,QAASo5C,EAAgBG,EArClB,KACjB72B,MAsCWhjB,EAAK,mBAIX05C,GACC,mBAACh7B,GAAA,EAAD,CACEre,UAAU,SACV2B,OAAQ43C,EACR35B,MAAOjgB,EAAK,wBACZwI,QAASsxC,IAERj5C,EAAAA,EAAAA,GAAWb,EAAK,4BAA6B,CAAC,KAAM,oBACrD,0BAAKK,UAAU,kBACb,mBAAC4B,EAAA,EAAD,CACEE,MAAM,SACN0F,QAAM,EACNyY,QAAM,EACNjgB,UAAU,wBACVC,QArDY,KACxBw5C,IACA92B,MAqDahjB,EAAK,kBAER,mBAACiC,EAAA,EAAD,CACEE,MAAM,UACN0F,QAAM,EACNyY,QAAM,EACNjgB,UAAU,wBACVC,QAASw5C,GAER95C,EAAK,mBCxGtB,IAAeiI,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAAsBC,IACjC,CACLu5C,eAAeC,EAAAA,EAAAA,IAAoBx5C,EAAQ,SAF3BD,EA5B4C,EAC9D+c,SAAAA,EAAUiS,QAAAA,EAASwqB,cAAAA,EAAexhB,eAAAA,MAElC,MAAM92B,GAAOC,EAAAA,EAAAA,KAQb,OAFA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgBY,EAAAA,GAAAA,sBAGhD,0BAAKr3B,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACm4C,GAAA,EAAD,CAAevT,QAASqT,EAAe73C,KAAK,UAE5C,wBAAGJ,UAAU,iCAAiCO,IAAI,QAC/CZ,EAAK,wCAIV,0BAAKK,UAAU,gCACb,mBAAC4B,EAAA,EAAD,CAAQ3B,QAjBM,KAClBw2B,EAAeY,EAAAA,GAAAA,WAgBoB13B,EAAK,oDCZtCy5C,GAAyBp3C,EAAAA,GAA0B,IAAM,IAmE/D,IAAe4F,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAAsBC,IACjC,CACLu5C,eAAeC,EAAAA,EAAAA,IAAoBx5C,EAAQ,MAC3Cg7C,WAAYh7C,EAAOi7C,cAAcC,0BAHjBn7C,EAjEsC,EACxDw5C,cAAAA,EACAyB,WAAAA,EACA/mB,UAAAA,EACAxT,MAAAA,EACAm5B,WAAAA,EACA31B,SAAAA,EACAnH,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACA6mB,OAAAA,MAGA,MAAM9nC,GAAW7G,EAAAA,EAAAA,IAAyB,OAEnCkH,EAAOysC,IAAYr2C,EAAAA,EAAAA,IAAiB,KAE3CC,EAAAA,EAAAA,KAAU,KACHoF,EAAAA,IACHxC,YAAW,KACT0G,EAASrG,QAAS8W,UACjBm8B,MAEJ,IAEH,MAAMz5C,GAAOC,EAAAA,EAAAA,KAmBb,OAjBA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgB6d,GAkBhD,0BAAKt0C,UAAU,yCACb,0BAAKA,UAAU,2BACb,mBAACm4C,GAAA,EAAD,CAAevT,QAASqT,EAAe73C,KAAK,WAG9C,0BAAKJ,UAAU,gCACb,mBAACke,GAAA,EAAD,CACErR,MAAOA,EACPvF,IAAKkF,EACLuZ,UAAU,UACV8D,MAAOlqB,EAAK,iBACZwf,MAAOA,EACPpS,SA5BmBhJ,IACrBob,GAASm5B,GACXA,IAGF,MAAMuB,EAAW91C,EAAEkJ,OAAOJ,MAAM6nB,MAAM,EAAGglB,GAErCG,EAASx7C,SAAWq7C,GACtB/2B,EAASk3B,GAGXP,EAASO,GACT91C,EAAEkJ,OAAOJ,MAAQgtC,KAkBZlnB,GAAa,mBAAC1T,GAAA,EAAD,YCqVtB,IAAerX,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IAAD,IAA8BA,EAAOi7C,kBACrC,CAACv6C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,iBAAkB,sBAAuB,gBAAiB,wBAC1D,gBAAiB,qBAJDZ,EA/Y6C,EAC/D23B,cAAAA,EACA8M,YAAAA,EACAjN,MAAAA,EACAH,KAAAA,EACAnD,UAAAA,EACAxT,MAAAA,EACAy6B,uBAAAA,EACAvb,SAAAA,EACA7iB,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,EACAqsB,eAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,EACAC,cAAAA,OAEAj3C,EAAAA,EAAAA,KAAU,KACJ02C,IACExjB,IAAkBiB,EAAAA,GAAAA,sBACpBZ,EAAeY,EAAAA,GAAAA,2BACNjB,IAAkBiB,EAAAA,GAAAA,oBAC3BZ,EAAeY,EAAAA,GAAAA,2BAGlB,CAACjB,EAAeK,EAAgBmjB,IAEnC,MAAMQ,GAAoB16C,EAAAA,EAAAA,KAAY,KACpC2+B,EAAS,CAAEvxB,KAAM,UACjB2pB,EAAeY,EAAAA,GAAAA,oBACd,CAACgH,EAAU5H,IAER4jB,GAAoB36C,EAAAA,EAAAA,KAAamN,IACrCwxB,EAAS,CAAEvxB,KAAM,cAAeqpB,QAAStpB,IACzC4pB,EAAeY,EAAAA,GAAAA,2BACd,CAACgH,EAAU5H,IAER6jB,GAA2B56C,EAAAA,EAAAA,KAAY,KAC3C+2B,EAAeY,EAAAA,GAAAA,wBACd,CAACZ,IAEE8jB,GAAwB76C,EAAAA,EAAAA,KAAamN,IACzCwxB,EAAS,CAAEvxB,KAAM,UAAWqpB,QAAStpB,IACrC4pB,EAAeY,EAAAA,GAAAA,yBACd,CAACgH,EAAU5H,IAER+jB,GAAyB96C,EAAAA,EAAAA,KAAamN,IAC1CwxB,EAAS,CAAEvxB,KAAM,WAAYqpB,QAAStpB,IACtCitC,EAAe,IACV7jB,EACHF,MAAOlpB,EACP4tC,UAAW,KACThkB,EAAeY,EAAAA,GAAAA,2BAGlB,CAACgH,EAAU5H,EAAgBR,EAAO6jB,IAE/BY,GAA8Bh7C,EAAAA,EAAAA,KAAamN,IAC/CwxB,EAAS,CAAEvxB,KAAM,qBAAsBqpB,QAAStpB,IAChDktC,EAAc,CACZnkB,gBAAiB/oB,EACjB4tC,UAAW,KACThkB,EAAeY,EAAAA,GAAAA,6BAGlB,CAAC0iB,EAAe1b,EAAU5H,IAEvBkkB,GAA0Bj7C,EAAAA,EAAAA,KAAamN,IAC3CwxB,EAAS,CAAEvxB,KAAM,cAAeqpB,QAAStpB,IACzC4pB,EAAeY,EAAAA,GAAAA,8BACd,CAACgH,EAAU5H,IAERmkB,GAA8Bl7C,EAAAA,EAAAA,KAAY,KAC9C+2B,EAAeY,EAAAA,GAAAA,2BACd,CAACZ,IAEEokB,GAA2Bn7C,EAAAA,EAAAA,KAAamN,IAC5CwxB,EAAS,CAAEvxB,KAAM,UAAWqpB,QAAStpB,IACrCitC,EAAe,IACV7jB,EACHH,KAAMjpB,EACN4tC,UAAW,KACThkB,EAAeY,EAAAA,GAAAA,2BAGlB,CAACgH,EAAU5H,EAAgBR,EAAO6jB,IAE/BgB,GAAgBp7C,EAAAA,EAAAA,KAAamN,IACjCstC,EAAc,CACZvkB,gBAAiB/oB,EACjB4tC,UAAW,KACThkB,EAAeY,EAAAA,GAAAA,cAGlB,CAAC8iB,EAAe1jB,IAEbskB,GAAqCr7C,EAAAA,EAAAA,KAAamN,IACtDwxB,EAAS,CAAEvxB,KAAM,qBAAsBqpB,QAAStpB,IAChDktC,EAAc,CACZnkB,gBAAiB/oB,EACjB4tC,UAAW,KACThkB,EAAeY,EAAAA,GAAAA,yBAGlB,CAAC0iB,EAAe1b,EAAU5H,IAEvBukB,GAAsBt7C,EAAAA,EAAAA,KAAamN,IACvCwxB,EAAS,CAAEvxB,KAAM,WAAYqpB,QAAStpB,IACtCotC,EAAoB,IACfhkB,EACHF,MAAOlpB,EACP4tC,UAAW,KACThkB,EAAeY,EAAAA,GAAAA,2BAGlB,CAACgH,EAAU5H,EAAgBR,EAAOgkB,IAE/BgB,GAAkBv7C,EAAAA,EAAAA,KAAaymB,IACnC+zB,EAAsB,CAAE/zB,KAAAA,MACvB,CAAC+zB,IAEEv6C,GAAOC,EAAAA,EAAAA,KAEb,OAAQw2B,GACN,KAAKiB,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE8hB,QAASiB,EACT3jB,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRhY,YAAaze,EAAK,uBAClB04C,YAAa14C,EAAK,YAClBgjB,SAAU03B,EACV5jB,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRgiB,iBAAkBniB,EAAMJ,SACxBzX,YAAaze,EAAK,yBAClB04C,YAAa14C,EAAK,YAClBgjB,SAAU23B,EACV7jB,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEh1B,KAAK,OACL+b,YAAaze,EAAK,2BAClBgjB,SAAU43B,EACVjG,OAAQle,EACRK,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEh1B,KAAK,QACLyK,KAAK,QACL6lB,UAAWA,EACXxT,MAAOA,EACPm5B,WAAY0B,EACZ57B,YAAaze,EAAK,sBAClB05C,eAAa,EACb12B,SAAU63B,EACVlG,OAAQle,EACRK,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,0BACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACXxT,MAAOA,EACPm5B,WAAY0B,EACZr3B,SAAUs4B,EACV3G,OAAQle,EACRK,eAAgBA,EAChBjb,SAAUA,GAAY0nB,IAAgB7L,EAAAA,GAAAA,qBACtC5J,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBjb,SAAUA,EACViS,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRzD,UAAWA,EACXxT,MAAOA,EACPm5B,WAAY0B,EACZlkB,KAAMA,EACNnT,SAAU+3B,EACVjkB,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRhY,YAAaze,EAAK,+BAClBgjB,SAAUg4B,EACVlkB,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRgiB,iBAAkBniB,EAAMJ,SACxBzX,YAAaze,EAAK,yBAClBgjB,SAAUi4B,EACVnkB,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,wBACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACXxT,MAAOA,EACPm5B,WAAY0B,EACZ33C,KAAK,OACL+b,YAAaze,EAAK,2BAClBgjB,SAAUk4B,EACVpkB,eAAgBA,EAChBjb,SAAUA,GAAY0nB,IAAgB7L,EAAAA,GAAAA,qBACtC5J,QAASA,EACT6mB,OAAQle,IAId,KAAKiB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE1E,UAAWA,EACXxT,MAAOA,EACPm5B,WAAY0B,EACZlkB,KAAMA,EACNnT,SAAUm4B,EACVrkB,eAAgBA,EAChBjb,SAAUA,EACViS,QAASA,EACT6mB,OAAQle,IAId,KAAKiB,EAAAA,GAAAA,kCACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRzD,UAAWA,EACXxT,MAAOA,EACPm5B,WAAY0B,EACZlkB,KAAMA,EACNnT,SAAUo4B,EACVtkB,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACR/zB,KAAK,QACLyK,KAAK,QACLsR,YAAaze,EAAK,sBAClBgjB,SAAUq4B,EACVvkB,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB6b,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,sBACAj6B,SAAS8lC,GACXzV,QAASA,IAIf,KAAK4J,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRzD,UAAWA,EACXxT,MAAOA,EACPm5B,WAAY0B,EACZr3B,SAAUs4B,EACVxkB,eAAgBA,EAChBjb,SAAUA,GAAY0nB,IAAgB7L,EAAAA,GAAAA,qBACtC5J,QAASA,IAIf,QACE,Y,eCrRN,SAASytB,GAA0Bx8C,EAAqB41C,GACtD,MAAM,QAAEzC,GAAYnzC,EAAOqS,SAC3B,OAAQujC,GACN,KAAKjd,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOwa,EAAQO,YACjB,KAAK/a,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BACH,OAAOwa,EAAQU,SACjB,KAAKlb,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCACH,OAAOwa,EAAQY,aACjB,KAAKpb,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCACH,OAAOwa,EAAQc,SACjB,KAAKtb,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,iCACH,OAAOwa,EAAQgB,YAMrB,UAAejrC,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAU41C,OAAAA,MACT,MACEr4B,OACEC,KAAMC,EADD,QAELC,EAFK,iBAGLC,GAJE,cAMJC,GACE5d,EAEJ,MAAO,CACL4d,cAAAA,EACAH,UAAAA,EACAC,QAASA,EAAQI,OACjBH,iBAAkBA,EAAiBG,OACnC0lB,kBAAmB7lB,EAAiBM,SACpCD,gBAAiBN,EAAQO,SACzB5L,SAAUmqC,GAA0Bx8C,EAAQ41C,OAGhD,CAACl1C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBArBpCZ,EAxIsE,EACxF6d,cAAAA,EACA6+B,YAAAA,EACA7G,OAAAA,EACAvjC,SAAAA,EACAoL,UAAAA,EACAC,QAAAA,EACAC,iBAAAA,EACAK,gBAAAA,EACAwlB,kBAAAA,EACAkZ,mBAAAA,EACA5/B,SAAAA,EACAib,eAAAA,EACAhJ,QAAAA,MAEA,MAAM9tB,GAAOC,EAAAA,EAAAA,KAEPy7C,GAAqB55C,EAAAA,EAAAA,KAAQ,IAC5BsP,EAIDoqC,EACK,IAAIpqC,EAASyjC,gBAAiBzjC,EAAS0jC,cAEvC,IAAI1jC,EAAS2jC,gBAAiB3jC,EAAS4jC,cANvC,IAQR,CAACwG,EAAapqC,KACVod,EAAamtB,IAAkBr4C,EAAAA,EAAAA,IAAiB,KAChDs4C,EAAeC,IAAoBv4C,EAAAA,EAAAA,KAAkB,IACrDw4C,EAAuBC,IAA4Bz4C,EAAAA,EAAAA,IAAmBo4C,GAEvEp/B,GAAQxa,EAAAA,EAAAA,KAAQ,KACpB,MAAM2gC,EAAmBhmB,GACrBimB,EAAAA,EAAAA,GAAgBlmB,EAAWC,EAASC,EAAkB,YACtD9a,EACE+gC,EAAqB5lB,GACvB2lB,EAAAA,EAAAA,GAAgBlmB,EAAWO,EAAiBwlB,EAAmB,iBAC/D3gC,EAEJ,GAAK6gC,GAAqBE,EAI1B,MAAO,IACDF,EACA,IACGA,EAAiBG,eACjBH,EAAiBI,YAEpB,MAEAF,EAAqBA,EAAmBE,WAAa,MAE1D,CAACrmB,EAAWC,EAASC,EAAkBK,EAAiBwlB,IAErDO,GAAehhC,EAAAA,EAAAA,KAAQ,KAC3B,GAAKwa,EAIL,OAAOA,EACJc,QAAQ1c,KACLtB,EAAAA,EAAAA,IAAcsB,EAAKlD,KAAOkD,EAAKlD,KAAOmf,IAAkBq/B,EAAAA,EAAAA,IAAYt7C,OAEnE8tB,IACA1Q,EAAAA,GAAAA,IAAYC,EAAAA,EAAAA,GAAa/d,EAAMU,GAAO8tB,IACtCktB,EAAmBj+C,SAASiD,EAAKlD,OAGrCwhB,KAAI,EAAGxhB,GAAAA,KAASA,MAClB,CAAC8e,EAAOK,EAAe3c,EAAMwuB,EAAaktB,IAEvCO,GAAiCl8C,EAAAA,EAAAA,KAAamN,IAClD6uC,EAAyB7uC,GACzB2uC,GAAiB,KAChB,IAEG7C,GAAej5C,EAAAA,EAAAA,KAAY,KAC/B07C,EAAmB,CACjBnG,WAAYZ,GAAcC,GAC1B6G,YAAapyC,QAAQoyC,GACrBU,YAAaJ,IAGfhlB,EAAeY,EAAAA,GAAAA,WACd,CAAC8jB,EAAaM,EAAuBhlB,EAAgB6d,EAAQ8G,IAIhE,OAFAz/B,EAAAA,EAAAA,IAAeH,EAAUiS,EAASgJ,EAAgB6d,GAGhD,0BAAKt0C,UAAU,wBACb,mBAAC87C,GAAA,EAAD,CACEC,QAAStZ,GAAgB,GACzB5B,YAAa4a,EACb3a,YAAa3S,EACb6tB,kBAAiCr8C,EAAdw7C,EAAmB,6BAAqC,6BAC3Ec,cAAc,0BACdlb,oBAAqB6a,EACrB3a,eAAgBqa,IAGlB,mBAAC9f,GAAA,EAAD,CACEpvB,QAASmvC,EACTt7C,QAAS04C,EACT52C,UAAyBpC,EAAdw7C,EAAmB,uBAA+B,wBAE7D,wBAAGn7C,UAAU,2BCzHf20B,GAA0Bh3B,OAAOi3B,KAAKyC,EAAAA,IAAiBh5B,OAAS,EAGhE69C,GAAiB,CACrB7kB,EAAAA,GAAAA,cACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,sBACAA,EAAAA,GAAAA,0BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,uBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,wBACAA,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,wBAGI8kB,GAAkB,CACtB9kB,EAAAA,GAAAA,QACAA,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,8BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,kCAGI+kB,GAAkB,CACtB/kB,EAAAA,GAAAA,oBACAA,EAAAA,GAAAA,uBAGIglB,GAA+B,CACnChlB,EAAAA,GAAAA,kCACAA,EAAAA,GAAAA,kCAGIilB,GAAkC,CACtCjlB,EAAAA,GAAAA,+BACAA,EAAAA,GAAAA,+BAGIklB,GAAgC,CACpCllB,EAAAA,GAAAA,mCACAA,EAAAA,GAAAA,mCAGImlB,GAA6B,CACjCnlB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCAGIolB,GAA8B,CAClCplB,EAAAA,GAAAA,iCACAA,EAAAA,GAAAA,iCA6QF,IAAezvB,EAAAA,EAAAA,KAhQgB,EAC7B4T,SAAAA,EACA4a,cAAAA,EACAsmB,aAAAA,EACAC,gBAAAA,EACAlmB,eAAAA,EACAhJ,QAAAA,EACAmvB,qBAAAA,MAEA,MAAOC,EAAYC,IpClDZC,EAAAA,GAAAA,GAAW/mB,GAAcL,IoCoD1BwN,GAAczjC,EAAAA,EAAAA,KAAY,KAE5B02B,IAAkBiB,EAAAA,GAAAA,qBACfjB,IAAkBiB,EAAAA,GAAAA,mBAClBjB,IAAkBiB,EAAAA,GAAAA,+BAErBvxB,YAAW,KACT62C,EAAgB,CAAE7vC,KAAM,YA1FJ,KA+FtBspB,IAAkBiB,EAAAA,GAAAA,sBACfjB,IAAkBiB,EAAAA,GAAAA,qBAUvB5J,IAR4B,WAAtBivB,EAAa3c,KACftJ,EAAeY,EAAAA,GAAAA,qBAEfZ,EAAeY,EAAAA,GAAAA,qBAMlB,CACDqlB,EAAa3c,KAAM4c,EACnBvmB,EAAe3I,EAASgJ,IAGpBumB,GAAmBt9C,EAAAA,EAAAA,KAAY,KACnCi9C,EAAgB,CAAE7vC,KAAM,gBACxBq2B,MACC,CAACwZ,EAAiBxZ,IA0LrB,SAAS8Z,EAAqBC,EAAyBC,EAAiBC,GACtE,OACE,sCACE,mBAAC,GAAD,CACEhnB,cAAeA,EACf3I,QAAS0V,EACT7M,aAAc0mB,EACdvmB,eAAgBA,EAChBJ,eAAgBqmB,EAAard,WAhMrC,SAAqC6d,EAAyB5I,GAC5D,MAAM+I,EAA+C,CACnD,CAAChmB,EAAAA,GAAAA,oBAAqCglB,GAA6Bj/C,SAASk3C,GAC5E,CAACjd,EAAAA,GAAAA,iBAAkCilB,GAAgCl/C,SAASk3C,GAC5E,CAACjd,EAAAA,GAAAA,qBAAsCklB,GAA8Bn/C,SAASk3C,GAC9E,CAACjd,EAAAA,GAAAA,mBAAoCmlB,GAA2Bp/C,SAASk3C,GACzE,CAACjd,EAAAA,GAAAA,mBAAoColB,GAA4Br/C,SAASk3C,IAGtEgJ,EAAgBpB,GAAe9+C,SAASk3C,GACxCiJ,EAAkBpB,GAAgB/+C,SAASk3C,GAC3CkJ,EAAkBpB,GAAgBh/C,SAASk3C,IAC5CgJ,GACA3/C,OAAOi3B,KAAKyoB,GAAqBjgD,SAASk3C,EAAO5kC,aACjD/R,OAAO8/C,OAAOJ,GAAqB1b,MAAMxhC,IAAgB,IAARA,IAEtD,OAAQi2B,GACN,KAAKiB,EAAAA,GAAAA,KACH,OACE,mBAAC,GAAD,CAAcZ,eAAgBA,EAAgBjb,SAAUA,EAAUiS,QAAS0V,IAE/E,KAAK9L,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBjb,SAAUA,GAAY0hC,EACtBzvB,QAAS0V,IAGf,KAAK9L,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBjb,SAAU0hC,GACP5I,IAAWjd,EAAAA,GAAAA,4BACXid,IAAWjd,EAAAA,GAAAA,uBACXmmB,GAAmBD,EACtB9vB,QAAS0V,IAGf,KAAK9L,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CAAuBZ,eAAgBA,EAAgBjb,SAAU0hC,EAAgBzvB,QAAS0V,IAE9F,KAAK9L,EAAAA,GAAAA,QACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBjb,SAAU0hC,GAAkBM,GAAmBF,EAC/C7vB,QAAS0V,IAGf,KAAK9L,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CAAkBZ,eAAgBA,EAAgBjb,SAAU0hC,EAAgBzvB,QAAS0V,IAEzF,KAAK9L,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBjb,SAAU0hC,GAAkB5I,IAAWjd,EAAAA,GAAAA,2BACvC5J,QAAS0V,IAGf,KAAK9L,EAAAA,GAAAA,2BACH,OACE,mBAACqmB,GAAD,CACEjnB,eAAgBA,EAChBjb,SAAU0hC,EACVzvB,QAAS0V,IAGf,KAAK9L,EAAAA,GAAAA,sBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBjb,SAAU0hC,EACVzvB,QAAS0V,IAGf,KAAK9L,EAAAA,GAAAA,oBACH,OACE,mBAAC,GAAD,CACEZ,eAAgBA,EAChBjb,SAAU0hC,EACVzvB,QAAS0V,IAGf,KAAK9L,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRK,eAAgBA,EAChBjb,SAAU0hC,GAAkBG,EAAoBjnB,GAChD3I,QAAS0V,IAIf,KAAK9L,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACE8jB,aAAW,EACX7G,OAAQle,EACRK,eAAgBA,EAChBjb,SAAU0hC,GAAkBG,EAAoBjnB,GAChD3I,QAAS0V,IAIf,KAAK9L,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,gCACH,OACE,mBAAC,GAAD,CACEid,OAAQle,EACRK,eAAgBA,EAChBjb,SAAU0hC,EACVzvB,QAAS0V,IAIf,KAAK9L,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iCACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACf8M,YAAaoR,EACbre,MAAOymB,EACPre,SAAUse,EACVnhC,SAAU0hC,EACVzmB,eAAgBA,EAChBhJ,QAAS0V,IAIf,KAAK9L,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,sBACL,KAAKA,EAAAA,GAAAA,0BACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,uBACL,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,wBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,uBACH,OACE,mBAAC,GAAD,CACEjB,cAAeA,EACfH,MAAO4mB,EACPxe,SAAUye,EACV5Z,YAAaoR,EACb94B,SAAU0hC,EACVzmB,eAAgBA,EAChBhJ,QAAS0V,IAIf,QACE,QAcCwa,CAA4BT,EAAgBE,IAKnD,OACE,mBAACthC,EAAA,EAAD,CACE3e,GAAG,WACH6e,KAAM4gC,EAAuB,OAASgB,EAAAA,GACtC7hC,UAAWqa,EACXV,YAAaf,IAEZsoB,MC5TDjwB,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAO,GAkEnD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAQwuB,QAAS2wB,GAAen/C,EAAOgxB,aAAe,IAC9CxT,KAAMmR,GAAc3uB,EAAO4uB,MAEnC,MAAO,CACLD,UAAAA,EACAwwB,WAAAA,EACAC,iBAAkBp/C,EAAOo/C,qBAG7B,CAAC1+C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,cAXvDZ,EAhE2C,EAC7D+c,SAAAA,EAAUiS,QAAAA,EACV1Q,OAAAA,EAAQsQ,UAAAA,EAAWwwB,WAAAA,EAAYlwB,gBAAAA,EAAiBC,SAAAA,EAAUkwB,iBAAAA,OAI1D56C,EAAAA,EAAAA,KAAU,KACR8pB,IAAa,KACXW,WAIJhS,EAAAA,EAAAA,IAAeH,EAAUiS,GAEzB,MAAMb,GAAcltB,EAAAA,EAAAA,KACjBvC,IACCywB,EAAS,CAAEzwB,GAAAA,EAAI8wB,sBAAsB,MAEvC,CAACL,IAGGxR,GAAU3a,EAAAA,EAAAA,KAAQ,KACtB,IAAKo8C,EACH,OAGF,MAAME,EAAYhhC,EAAS8gC,EAAW9gC,QAAQ5f,IAC5C,MAAMmD,EAAO+sB,EAAUlwB,GACvB,IAAKmD,EACH,OAAO,EAET,MAAM8wB,GAAWC,EAAAA,EAAAA,IAAgB/wB,GACjC,OAAO8wB,IAAY3T,EAAAA,GAAAA,GAAY2T,EAAUrU,MACtC8gC,EAEL,OAAOG,EAAAA,EAAAA,IAAYD,EAAW1wB,OAAW9rB,EAAWu8C,KACnD,CAACD,EAAY9gC,EAAQsQ,EAAWywB,KAE5BngC,EAAaC,IAAWC,EAAAA,GAAAA,QAAkBtc,EAAW6a,EAASrT,QAAQgU,IAE7E,OACE,mBAACwB,GAAA,EAAD,CAAgBC,MAAOb,EAAac,WAAYb,EAAS5d,UAAU,2BAChE2d,MAAAA,GAAAA,EAAatf,OACZsf,EAAYgB,KAAKxhB,GACf,mBAACyhB,GAAA,EAAD,CACEze,IAAKhD,EACL6C,UAAU,sBACVC,QAAS,IAAM2sB,EAAYzvB,GAC3BqK,QAASxF,EAAAA,IAET,mBAAC6c,GAAA,EAAD,CAAiBE,OAAQ5hB,EAAIy6B,eAAa,EAAC9K,WAAW,aAGxDnP,IAAgBA,EAAYtf,OAC9B,wBAAG2B,UAAU,aAAaG,IAAI,aAAaI,IAAI,QAC5Cwc,EAAO1e,OAAS,mCAAqC,0BAGxD,mBAAC4gB,GAAA,EAAD,CAAS9e,IAAI,iBCtDf6sB,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAO,GAsHnD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAQwuB,QAASuC,GAAoB/wB,EAAOgxB,aAAe,IACnDxT,KAAMmR,GAAc3uB,EAAO4uB,OAC3BpR,KAAMC,GAAczd,EAAOud,OAC7B,cAAEK,GAAkB5d,GAGxBoyB,MAAO3C,EADH,eAEJwB,EAFI,cAGJC,EAHI,aAIJC,GACEnxB,EAAO8uB,cACHN,QAAS6C,GAAkBH,GAAiB,IAC5C1C,QAAS+C,GAAiBJ,GAAgB,GAElD,MAAO,CACLvT,cAAAA,EACA+Q,UAAAA,EACAlR,UAAAA,EACAsT,gBAAAA,EACAtB,YAAAA,EACA8vB,YAAatuB,MAAAA,OAAF,EAAEA,EAAgB1T,MAC7B8T,cAAAA,EACAE,aAAAA,MAGJ,CAAC7wB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kBAAmB,0BA3BvDZ,EApH4C,EAC9DqhB,UAAAA,EACAtE,SAAAA,EACA0iC,kBAAAA,EACAC,0BAAAA,EACAC,WAAAA,EACA3wB,QAAAA,EACAnR,cAAAA,EACA+Q,UAAAA,EACAlR,UAAAA,EACAsT,gBAAAA,EACAtB,YAAAA,EACA8vB,YAAAA,EACAhuB,aAAAA,EACAF,cAAAA,EACApC,gBAAAA,EACA0wB,qBAAAA,OAIAn7C,EAAAA,EAAAA,KAAU,KACR8pB,IAAa,KACXW,UAIJ,MAAMhuB,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUiS,GAEzB,MAAM3P,GAAqBpe,EAAAA,EAAAA,KAAaoxB,IACtCutB,EAAqB,CAAEvtB,MAAAA,MACtB,CAACutB,IAEE5b,GAAehhC,EAAAA,EAAAA,KAAQ,KAC3B,MAAMo8C,EAAapuB,GACfnS,EAAAA,EAAAA,IAAYmS,EAAgB1S,QAAQ5f,GAAOA,IAAOmf,IAAgBH,GAClE,GAEJ,IAAKgS,EACH,OAAO0vB,EAGT,MAAM1sB,EAAkB0sB,EAAW9gC,QAAQ5f,IACzC,MAAMmD,EAAO+sB,EAAUlwB,GACvB,IAAKmD,EACH,OAAO,EAET,MAAM8wB,GAAWC,EAAAA,EAAAA,IAAgB/wB,GACjC,OAAO8wB,IAAY3T,EAAAA,GAAAA,GAAY2T,EAAUjD,MAG3C,OAAO7Q,EAAAA,EAAAA,KACLD,EAAAA,EAAAA,IAAO,IACF8T,KACClB,GAAgB,MAChBF,GAAiB,KACpBhT,QAAQ46B,IACT,MAAMr3C,EAAO+sB,EAAUsqB,GAEvB,OAAQr3C,KAASg+C,EAAAA,EAAAA,IAAUh+C,IAASA,EAAKi+C,uBAE3CpiC,GACA,EACA+hC,KAED,CACDzuB,EAAiBtT,EAAWgS,EAAa8B,EAAcF,EAAemuB,EACtE5hC,EAAe+Q,IAGXmxB,GAAiB9+C,EAAAA,EAAAA,KAAY,MAC7Bw+C,EAAkB7/C,QAAUyhB,KAC9Bu+B,EAAqB,CAAEvtB,MAAO,KAC9BstB,OAED,CAACF,EAAkB7/C,OAAQyhB,EAAWu+B,EAAsBD,IAE/D,OACE,0BAAKp+C,UAAU,kBACb,0BAAKA,UAAU,eACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASwtB,EACT1rB,UAAU,uBAEV,wBAAG/B,UAAU,qBAEf,6BAAKL,EAAK,qBAEZ,0BAAKK,UAAU,wBACb,mBAAC87C,GAAA,EAAD,CACEC,QAAStZ,EACT5B,YAAaqd,EACbpd,YAAa3S,EACb6tB,kBAAmBr8C,EAAK,iBACxBs8C,cAAc,0BACdtpB,UAAWsrB,EACXld,oBAAqBod,EACrBld,eAAgBnjB,IAGlB,mBAAC0d,GAAA,EAAD,CACEpvB,QAASrD,QAAQm1C,EAAkB7/C,QAAUyhB,GAC7C7f,QAASu+C,EACTz8C,UAAW+d,EAAY,2BAA6B,0BAEpD,wBAAG9f,UAAU,4BCwCvB,IAAe4H,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MACEgE,SAAU+7C,EACVt/B,MAAOu/B,GACLhgD,EAAOigD,cAAgB,GAE3B,MAAO,CACLF,iBAAAA,EACAC,cAAAA,MAGJ,CAACt/C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAAmB,mBAbHZ,EA3J4C,EAC9DqhB,UAAAA,EACAtE,SAAAA,EACAojC,UAAAA,EACAnxB,QAAAA,EACAgxB,iBAAAA,EACAC,cAAAA,EACAG,gBAAAA,EACAC,cAAAA,MAEA,MAAMn/C,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUiS,GAEzB,MAAO7N,EAAOm/B,IAAY97C,EAAAA,EAAAA,IAAS,KAC5B+7C,EAAOC,IAAYh8C,EAAAA,EAAAA,IAAS,KAC5BkP,EAAOkoB,IAAYp3B,EAAAA,EAAAA,OACnBkc,EAAOib,IAAYn3B,EAAAA,EAAAA,MAEpBi8C,EAAsB,4BACtBC,EAAyB,+BACzBC,EAAwB,mDAExBzsB,EAAY8rB,IAAqBY,EAAAA,GAAAA,WAEjCC,GAAoB5/C,EAAAA,EAAAA,KAAaqE,IACrC,MAAM,MAAE8I,GAAU9I,EAAEgH,cACd8uC,EAAWhtC,EAAMqY,QAAQ,OAAQ,IAEvC65B,EAASlF,GAELA,IAAahtC,IACf9I,EAAEgH,cAAc8B,MAAQgtC,KAEzB,IAEGlwB,GAA0BjqB,EAAAA,EAAAA,KAAaqE,IAC3Ck7C,EAASl7C,EAAEgH,cAAc8B,SACxB,IAEG0yC,GAAoB7/C,EAAAA,EAAAA,KAAY,KAC/BkgB,EAAMvhB,OAKPugD,EAAUvgD,OAhDgB,IAiD5B+7B,EAASglB,GAIXP,EAAgB,CACdj/B,MAAAA,EACAzN,MAAAA,EACAysC,UAAAA,IAZAxkB,EAAS8kB,KAcV,CAACt/B,EAAOg/B,EAAWC,EAAiB1sC,EAAO+sC,EAAqBE,IAE7DI,GAAsB9/C,EAAAA,EAAAA,KAAY,KACjCkgB,EAAMvhB,OAKXygD,EAAc,CACZl/B,MAAAA,EACAo/B,MAAAA,EACA7sC,MAAAA,EACAysC,UAAAA,IARAxkB,EAAS+kB,KAUV,CAACv/B,EAAOk/B,EAAeE,EAAO7sC,EAAOysC,EAAWO,KAEnDj8C,EAAAA,EAAAA,KAAU,KACJu7C,IAAqBY,EAAAA,GAAAA,UACvB5xB,GAAQ,KAET,CAACgxB,EAAkBhxB,IAEtB,MAAMgyB,EAAgBf,IACpBv/B,IAAU+/B,GAAuB//B,IAAUggC,EACvChgC,OACA5d,GAGN,OACE,0BAAKvB,UAAU,WACb,0BAAKA,UAAU,eACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAAS,IAAMwtB,IACf1rB,UAAU,8BAEV,wBAAG/B,UAAU,qBAEf,6BAAKL,EAAKmgB,EAAY,aAAe,cAEvC,0BAAK9f,UAAU,wBACb,mBAACs7B,GAAA,EAAD,CACEvuB,SAAUstB,EACVza,MAAOjgB,EAAK,cAEd,mBAACue,GAAA,EAAD,CACErR,MAAO+S,EACP7S,SAAUuyC,EACVz1B,MAAOlqB,EAAKmgB,EAAY,mBAAqB,aAC7CX,MAAOA,IAAU+/B,GAAuB//B,IAAUggC,EAAyBhgC,OAAQ5d,IAEpFue,GACC,sCACE,mBAAC5B,GAAA,EAAD,CACErR,MAAOmyC,EACPjyC,SAAU4c,EACVE,MAAOlqB,EAAK,oCAEd,wBAAGK,UAAU,QAAQL,EAAK,qBAI7B8/C,GACC,wBAAGz/C,UAAU,SAASy/C,GAGvBb,EAAUvgD,OAAS,GAClB,sCACE,yBAAI2B,UAAU,wBAAwBL,EAAK,6BAA8Bi/C,EAAUvgD,OAAQ,MAE3F,0BAAK2B,UAAU,mCACZ4+C,EAAUjgC,KAAKxhB,GACd,mBAACyhB,GAAA,EAAD,CAAU4hB,UAAQ,EAACxgC,UAAU,uBAC3B,mBAAC6e,GAAA,EAAD,CAAiBE,OAAQ5hB,UAQrC,mBAACq+B,GAAA,EAAD,CACEpvB,QAA0B,IAAjBwT,EAAMvhB,OACf4B,QAAS6f,EAAY0/B,EAAsBD,EAC3C5yC,SAAUgmB,EACV5wB,UAAW+d,EAAYngB,EAAK,8BAAgC,gBAE3DgzB,EACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,2BCnKjB0/C,GAAe/hD,OAAOi3B,KAAK+qB,EAAAA,IAAmBthD,OAAS,EAsD7D,IAAeuJ,EAAAA,EAAAA,KApDe,EAC5B4T,SAAAA,EACAsE,UAAAA,GAAY,EACZuV,QAAAA,EACAuqB,gBAAAA,EACAnyB,QAAAA,MAEA,MAAOoyB,EAAkBC,IAAuB78C,EAAAA,EAAAA,IAAmB,IAE7Du7C,GAAiB9+C,EAAAA,EAAAA,KAAY,KACjCkgD,EAAgB9/B,EAAY6/B,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,iBAC/D,CAAC7/B,EAAW8/B,IAEf,OACE,mBAAC9jC,EAAA,EAAD,CACE3e,GAAG,UACH6e,KAAM4hC,EAAAA,GACNloB,YAAagqB,GACb3jC,UAAWsZ,IAET0qB,IACA,OAAQ1qB,GACN,KAAKsqB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE7/B,UAAWA,EACXtE,SAAUA,EACV0iC,kBAAmB2B,EACnB1B,0BAA2B2B,EAC3B1B,WAAYI,EACZ/wB,QAASA,IAGf,KAAKkyB,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAD,CACE7/B,UAAWA,EACXtE,SAAUukC,GAAgBvkC,EAC1BojC,UAAWiB,EACXpyB,QAASA,IAGf,QACE,c,eCpDZ,MAwBA,IAAe7lB,EAAAA,EAAAA,KAxBqB,EAAG4T,SAAAA,EAAUiS,QAAAA,EAASmyB,gBAAAA,MACxD,MAAMjgD,GAAOC,EAAAA,EAAAA,KAIb,OAFA+b,EAAAA,EAAAA,IAAeH,EAAUiS,EAASmyB,EAAiBD,EAAAA,GAAAA,UAGjD,0BAAK3/C,UAAU,iBACb,0BAAKA,UAAU,eACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASwtB,EACT1rB,UAAU,uBAEV,wBAAG/B,UAAU,qBAEf,6BAAKL,EAAK,mBAEZ,mBAACqgD,GAAA,EAAD,CAAUC,WAAW,WAAWzkC,SAAUA,Q,eCPhD,MAsEA,IAAe5T,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAQwd,KAAM0f,EAAaF,WAAYwkB,GAAqBxhD,EAAOq9B,YAEnE,MAAO,CACLH,YAAAA,EACAskB,iBAAAA,MAGJ,CAAC9gD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,qBATpCZ,EAtE+C,EACjEkD,OAAAA,EACAhD,OAAAA,EACAi9B,YAAAA,EACAskB,iBAAAA,EACA/3C,QAAAA,EACAg4C,oBAAAA,EACAC,gBAAAA,MAEA,MAAMzgD,GAAOC,EAAAA,EAAAA,KAEPygD,GAA2B5+C,EAAAA,EAAAA,KAAQ,IAClCm6B,EAIEj+B,OAAOi3B,KAAKgH,GAAa2Z,QAAO,CAACC,EAAQnW,KAC9C,MAAM,gBAAEN,EAAF,cAAmBuhB,GAAkB1kB,EAAY5uB,OAAOqyB,IAK9D,OAJIN,EAAgB3hC,SAASuB,IAAW2hD,MAAAA,GAAAA,EAAeljD,SAASuB,KAC9D62C,EAAO3wB,KAAKwa,GAGPmW,IACN,IAVM,IAWR,CAAC72C,EAAQi9B,KAEL2kB,EAAmBC,IAAwBv9C,EAAAA,EAAAA,IAAmBo9C,GAE/DI,GAAUh/C,EAAAA,EAAAA,KAAQ,KACfy+C,MAAAA,OAAA,EAAAA,EAAkBvhC,KAAK0gB,IAAD,CAC3BxV,MAAO+R,EAAcA,EAAYyD,GAAUzf,MAAQ,GACnD/S,MAAOoV,OAAOod,SACT,IACN,CAAC6gB,EAAkBtkB,IAEhB+c,GAAej5C,EAAAA,EAAAA,KAAY,KAC/B,MAAMghD,EAAcL,EAAyBtjC,QAAQ5f,IAAQojD,EAAkBnjD,SAASD,KAAKwhB,IAAI3R,QAC3F2zC,EAAWJ,EAAkBxjC,QAAQ5f,IAAQkjD,EAAyBjjD,SAASD,KAAKwhB,IAAI3R,QAE9FozC,EAAgB,CAAEzhD,OAAAA,EAAQ+hD,YAAAA,EAAaC,SAAAA,IACvCx4C,MACC,CAACxJ,EAAQyhD,EAAiBC,EAA0Bl4C,EAASo4C,IAEhE,GAAK3kB,GAAgBskB,EAIrB,OACE,mBAAC7hC,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAASA,EACTg4C,oBAAqBA,EACrBr4B,QAAS6wB,EACT34C,UAAU,SACV4f,MAAOjgB,EAAK,gBAEZ,mBAACihD,GAAA,EAAD,CACE72B,QAAS02B,EACTz2B,SAAUu2B,EACVxzC,SAAUyzC,EACV3+C,OAAK,IAEP,mBAACD,EAAA,EAAD,CAAQE,MAAM,UAAU9B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAAS04C,GACvEh5C,EAAK,gBAER,mBAACiC,EAAA,EAAD,CAAQ5B,UAAU,wBAAwBigB,QAAM,EAAChgB,QAASkI,GAAUxI,EAAK,gB,yBCd/E,SAASkhD,GAAaC,GACpB,OAAIA,EACK,4BAEF,wBCpFT,IAAIC,GAEJ,MAAMC,GAAwC,CAC5CC,MAAM,EACNC,WAAW,EACXC,IAAI,EACJC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,OAAO,EACPC,YAAY,EACZ,KAAK,EACLC,QAAQ,EACRC,UAAU,EACVC,KAAK,EACLC,MAAM,EACNC,KAAK,GAoBDx2C,GAAkBtH,IACtB,MAAMiM,EAAS,WAAYjM,EAAIA,EAAEiM,OAHhBjM,CAAAA,GAAgC,mBAAoBA,EAAIA,EAAE+9C,eAAe,GAAGC,QAAU,EAG7DC,CAAUj+C,KAGjDg9C,KAEGA,GAAanoC,SAAS7U,EAAEkJ,SAExB8zC,GAAazjD,WAAa,GAAK0S,GAAU,GAEzC+wC,GAAazjD,WAAcyjD,GAAakB,aAAelB,GAAaxjD,cAAiByS,GAAU,IAEnGjM,EAAEsH,kBAIN,SAAS62C,GAA4Bn+C,GAC/Bi9C,GAAaj9C,EAAE5D,OAlCrB,SAAmB8M,GACjB,KAAKA,GAAYA,aAAkBk1C,aAAc,OAAO,EACxD,MAAM1kD,EAAUwP,EACVm1C,EAAU3kD,EAAQ2kD,QAAQrO,cAChC,GAAgB,aAAZqO,EAAwB,OAAO,EACnC,GAAgB,UAAZA,EAAqB,OAAO,EAChC,MAAMt1C,EAAOrP,EAAQ4kD,aAAa,QAClC,QAAKv1C,GACc,CACjB,OAAQ,WAAY,SAAU,QAAS,MAAO,MAC9C,SAAU,OAAQ,WAAY,iBAAkB,OAAQ,QAAS,QAEjDqG,QAAQrG,EAAKinC,gBAAkB,EAsBrBuO,CAAUv+C,EAAEkJ,SACtClJ,EAAEsH,iBAIC,SAASk3C,GAAiBrpC,GAC/B6nC,GAAe7nC,EAEfpd,SAAS6H,iBAAiB,QAAS0H,GAAgB,CAAEm3C,SAAS,IAC9D1mD,SAAS6H,iBAAiB,YAAa0H,GAAgB,CAAEm3C,SAAS,IAClE1mD,SAAS2mD,UAAYP,GAGhB,SAASQ,KACd3B,QAAex/C,EACfzF,SAAS8H,oBAAoB,QAASyH,IACtCvP,SAAS8H,oBAAoB,YAAayH,IAE1CvP,SAAS2mD,UAAY,K,0BCnBvB,MA8GA,GA5GyC,EACvC9gD,OAAAA,EACA5D,QAAAA,EACA4kD,OAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,SAAAA,EACA/4B,UAAAA,EACAC,UAAAA,EACA+4B,WAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,OAAAA,EACAC,MAAAA,EACA76B,QAAAA,EACA7nB,UAAAA,EACAmqB,SAAAA,EACAw4B,SAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAp4B,SAAAA,EACAq4B,OAAAA,EACAC,aAAAA,EACA57C,QAAAA,EACAg4C,oBAAAA,EACA6D,WAAAA,MAGA,MAAMC,GAAUt+C,EAAAA,EAAAA,IAAuB,MACjCu+C,EFxED,SACLnmD,EAAqBomD,EAA0BH,GAE/C,MAAMj6B,EAAwB,GACxBnnB,GAAOwhD,EAAAA,EAAAA,IAAermD,GACtBoU,GAAQC,EAAAA,EAAAA,IAAgBrU,MACvB0U,EAAAA,EAAAA,IAAuB1U,QAA6CwD,GAAlCgR,EAAAA,EAAAA,IAAuBxU,IAC1DkmC,GAAY3iC,EAAAA,EAAAA,IAAoBvD,EAAS,UACzCsmD,EAAmBlyC,IAAU8xB,IAAaqgB,EAAAA,EAAAA,IAAuBvmD,KAAawmD,GAAAA,GAC9EC,EAAY9gD,OAAO+gD,eAgBzB,GAdIJ,GACFt6B,EAAQlF,KAAK,CACXgF,MAAO,yBACPotB,QAAS,KACPyN,QAAQC,QAAQ1gB,EAAY2gB,GAAAA,GAAkB3gB,EAAWzvB,EAAAA,GAAAA,SAA0BrC,EAAO/B,SACvFysB,KAAKgoB,GAAAA,IAEJV,GACFA,OAMJvhD,EAAM,OAER,MAAMk+C,EAAe/3C,SACnBy7C,MAAAA,GAAA,UAAAA,EAAWM,kBAAX,eAAuBC,aACnBP,EAAUM,WAAWC,WAA2B7nD,QAAQ,4BACD,KAAxDsnD,EAAU90C,WAAWwV,QAAQ,kBAAmB,KAGrD6E,EAAQlF,KAAK,CACXgF,MAAOg3B,GAAaC,GACpB7J,QAAS,KACP,MAAM+N,EAAgBlE,GAAgB0D,EAAYA,EAAU90C,WAAa9M,GACzEqiD,EAAAA,GAAAA,IAAoBD,GAEhBb,GACFA,OAmBR,OAbIH,GACFj6B,EAAQlF,KAAK,CACXgF,MAAO,gCACPotB,QAAS,KACP+M,IAEIG,GACFA,OAMDp6B,EEaam7B,CAAsBnnD,EAASoK,EAASm7C,EAAcU,OAAaziD,GAEjF4jD,GAAoBzlD,EAAAA,EAAAA,KAAY,IAC7B5D,SAASY,cAAe,+CAA8CqB,EAAQZ,SACpF,CAACY,EAAQZ,KAENioD,GAAiB1lD,EAAAA,EAAAA,KACrB,IAAM5D,SAASY,cAAc,2BAC7B,IAGI2oD,GAAiB3lD,EAAAA,EAAAA,KACrB,IAAM5D,SAASY,cAAc,gCAC7B,KAGI,UACJyF,EADI,UACOmjD,EADP,MACkBznD,EADlB,UACyB0nD,EADzB,WACoCC,IACtCC,EAAAA,GAAAA,GACF9C,EACAwC,EACAC,EACAC,EA5DoB,GA8DnBvpD,SAASY,cAAc,iBAAiCa,eAG3D2F,EAAAA,EAAAA,KAAU,KACRq/C,GAAiBiD,EAAavB,EAAQ99C,aAAU5E,GAEzCmhD,KACN,CAAC8C,IAEJ,MAAM7lD,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC8lD,GAAA,EAAD,CACEp+C,IAAK28C,EACLtiD,OAAQA,EACRQ,UAAWA,EACXmjD,UAAWA,EACXznD,MAAOA,EACP0nD,UAAWA,EACXvlD,UAAU,2BACVmI,QAASA,EACTg4C,oBAAqBA,GAEpByC,GAAc,mBAACxgD,EAAA,EAAD,CAAUC,KAAK,eAAepC,QAAS6jD,GAASnkD,EAAK,wBACnEkjD,GACC,mBAACzgD,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAAS8jD,GAAepkD,EAAK,4BAExDmjD,GAAY,mBAAC1gD,EAAA,EAAD,CAAUC,KAAK,QAAQpC,QAASujD,GAAU7jD,EAAK,UAC3DojD,GAAW,mBAAC3gD,EAAA,EAAD,CAAUC,KAAK,OAAOpC,QAASwjD,GAAS9jD,EAAK,SACxDwjD,GACC,mBAAC/gD,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAAS2jD,GAAgBjkD,EAAK,mBAEzDyjD,GACC,mBAAChhD,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAAS4jD,GAAkBlkD,EAAK,iCAE3D0jD,GAAWa,EAAYvlC,KAAKoL,GAC3B,mBAAC3nB,EAAA,EAAD,CAAUjC,IAAK4pB,EAAQF,MAAOxnB,KAAK,OAAOpC,QAAS8pB,EAAQktB,SAAUt3C,EAAKoqB,EAAQF,UAEnFm5B,GAAU,mBAAC5gD,EAAA,EAAD,CAAUC,KAAK,MAAMpC,QAASyjD,GAAQ/jD,EAAK,cACrDsjD,GAAY,mBAAC7gD,EAAA,EAAD,CAAUC,KAAK,QAAQpC,QAAS4oB,GAAUlpB,EAAK,gBAC3DujD,GAAc,mBAAC9gD,EAAA,EAAD,CAAUC,KAAK,UAAUpC,QAASe,GAAYrB,EAAK,YACjE4jD,GAAa,mBAACnhD,EAAA,EAAD,CAAUC,KAAK,SAASpC,QAASwrB,GAAW9rB,EAAK,kBAC9DwqB,GAAa,mBAAC/nB,EAAA,EAAD,CAAUC,KAAK,OAAOpC,QAAS0jD,GAAWhkD,EAAK,2BAC5DuqB,GAAa,mBAAC9nB,EAAA,EAAD,CAAUopB,aAAW,EAACnpB,KAAK,SAASpC,QAASkrB,GAAWxrB,EAAK,aC+HjF,IAAeiI,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUX,QAAAA,EAASksB,gBAAAA,MAClB,MAAM,SAAEvZ,IAAamW,EAAAA,EAAAA,IAAyBnoB,IAAW,IACnD,UACJinD,EADI,SAEJ7C,EAFI,OAGJE,EAHI,SAIJC,EAJI,UAKJ/4B,EALI,UAMJC,EANI,QAOJ44B,EAPI,WAQJG,EARI,eASJC,EATI,iBAUJC,EAVI,QAWJC,EAXI,YAYJC,EAZI,UAaJC,GACG7yC,IAAYqW,EAAAA,EAAAA,IAA4BroB,EAAQX,EAAS2S,IAAc,GACtEob,EAA+B,WAApB7B,EACX27B,EAAkC,cAApB37B,EAEpB,MAAO,CACL07B,UAAAA,EACA/C,WAAYgD,EACZ/C,cAAe+C,EACf9C,UAAWh3B,IAAa85B,GAAe9C,EACvCE,QAAS4C,GAAe5C,EACxBC,UAAW2C,GAAe3C,EAC1B/4B,UAAAA,EACAC,UAAAA,EACA44B,SAAUj3B,GAAYi3B,EACtBG,YAAa0C,GAAe1C,EAC5BC,gBAAiByC,GAAezC,EAChCC,kBAAmBwC,GAAexC,EAClCC,QAAAA,EACAC,aAAcsC,GAAetC,EAC7BC,UAAAA,MAGJ,CAACnkD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,eACA,aACA,kBACA,cACA,gBACA,yBACA,wBACA,uBAhDgBZ,EArOoD,EACtEkD,OAAAA,EACAsoB,gBAAAA,EACA47B,aAAAA,EACA9nD,QAAAA,EACAwpB,MAAAA,EACAo7B,OAAAA,EACAx6C,QAAAA,EACAg4C,oBAAAA,EACAwF,UAAAA,EACA/C,WAAAA,EACAC,cAAAA,EACAC,SAAAA,EACAE,OAAAA,EACAC,SAAAA,EACA/4B,UAAAA,EACAC,UAAAA,EACA44B,QAAAA,EACAG,WAAAA,EACAC,eAAAA,EACAC,iBAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,UAAAA,EACAuC,gBAAAA,EACAC,aAAAA,EACAz9B,WAAAA,EACAtW,gBAAAA,EACAg0C,YAAAA,EACAC,cAAAA,EACAC,uBAAAA,EACAC,sBAAAA,EACAC,kBAAAA,MAEA,MAAM,qBAAEj8C,IAAyBE,EAAAA,EAAAA,GAAkB1I,EAAQw+C,OAAqB5+C,GAAW,IACpF8kD,EAAYC,IAAiBrjD,EAAAA,EAAAA,KAAS,IACtC0nB,EAAmB47B,IAAwBtjD,EAAAA,EAAAA,KAAS,IACpD6nB,EAAmB07B,IAAwBvjD,EAAAA,EAAAA,KAAS,IACpDwjD,EAAgBC,IAAqBzjD,EAAAA,EAAAA,KAAS,IAC9C0jD,EAAgBC,EAAcC,IAAiB1jC,EAAAA,GAAAA,KAEhDuJ,GAAehtB,EAAAA,EAAAA,KAAY,KAC/B4mD,GAAc,GACdC,GAAqB,KACpB,IAEG/8B,GAAe9pB,EAAAA,EAAAA,KAAY,KAC/B4mD,GAAc,GACdE,GAAqB,KACpB,IAEGM,GAAYpnD,EAAAA,EAAAA,KAAY,KAC5B4mD,GAAc,GACdn+C,MACC,CAACA,IAEE0iB,GAAmBnrB,EAAAA,EAAAA,KAAY,KACnC6mD,GAAqB,GACrBp+C,MACC,CAACA,IAEE6iB,GAAmBtrB,EAAAA,EAAAA,KAAY,KACnC8mD,GAAqB,GACrBr+C,MACC,CAACA,IAEE4+C,GAAgBrnD,EAAAA,EAAAA,KAAY,KAChCgnD,GAAkB,GAClBv+C,MACC,CAACA,IAEE6+C,GAAsBtnD,EAAAA,EAAAA,KAAY,KACtCmnD,IACA1+C,MACC,CAAC0+C,EAAe1+C,IAEb8+C,IAAcvnD,EAAAA,EAAAA,KAAY,KAC9BomD,EAAgB,CAAElnD,UAAWb,EAAQZ,KACrC2pD,MACC,CAAChB,EAAiB/nD,EAAQZ,GAAI2pD,IAE3BI,IAAaxnD,EAAAA,EAAAA,KAAY,KAC7BqmD,EAAa,CAAEnnD,UAAWb,EAAQZ,KAClC2pD,MACC,CAACf,EAAchoD,EAAQZ,GAAI2pD,IAExBK,IAAYznD,EAAAA,EAAAA,KAAY,KAC5B4mD,GAAc,GACdI,GAAkB,KACjB,IAEGU,IAAc1nD,EAAAA,EAAAA,KAAY,KAC9B4oB,EAAW,CAAE1pB,UAAWb,EAAQZ,GAAIqrB,SAAS,IAC7Cs+B,MACC,CAACx+B,EAAYvqB,EAAQZ,GAAI2pD,IAEtBxsC,IAAgB5a,EAAAA,EAAAA,KAAY,KAEhC,GADAonD,IACIv/B,MAAAA,GAAAA,EAAOI,SAAU,CACnB,MAAM3U,EAAauU,EAAMI,SAAShJ,KAAI,EAAGxhB,GAAAA,KAASA,IAClD6U,EAAgB,CAAEuI,WAAYxc,EAAQY,OAAQqU,WAAAA,SAE9ChB,EAAgB,CAAEuI,WAAYxc,EAAQY,OAAQqU,WAAY,CAACjV,EAAQZ,QAEpE,CAAC6U,EAAiBjU,EAAS+oD,EAAWv/B,IAEnC8/B,IAAoB3nD,EAAAA,EAAAA,KAAY,KACpConD,IACAd,EAAY,CAAEphB,QAAS7mC,EAAQs3B,QAAQuP,YACtC,CAACkiB,EAAW/oD,EAAQs3B,QAAQuP,QAASohB,IAElCsB,IAAsB5nD,EAAAA,EAAAA,KAAY,KACtConD,IACAb,EAAc,CAAErhB,QAAS7mC,EAAQs3B,QAAQuP,YACxC,CAACkiB,EAAW/oD,EAAQs3B,QAAQuP,QAASqhB,IAElCsB,IAAsB7nD,EAAAA,EAAAA,KAAY,KACtC,MAAM8nD,EAASjgC,MAAAA,GAAAA,EAAOI,SAClB,CACA/oB,UAAWb,EAAQZ,GACnBsqD,gBAAiBlgC,EAAMI,SAAShJ,KAAI,EAAGxhB,GAAAA,KAASA,IAChDuqD,WAAW,GAEX,CAAE9oD,UAAWb,EAAQZ,GAAIuqD,WAAW,GAExCxB,EAAuBsB,GACvBV,MACC,CAACA,EAAW/oD,EAAQZ,GAAI+oD,EAAwB3+B,IAE7CogC,IAA6BjoD,EAAAA,EAAAA,KAAY,KAC7CymD,EAAsB,CAAExnD,OAAQZ,EAAQY,OAAQxB,GAAIY,EAAQZ,KAC5D2pD,MACC,CAACA,EAAW/oD,EAAQY,OAAQZ,EAAQZ,GAAIgpD,IAErCyB,IAAqBloD,EAAAA,EAAAA,KAAY,KACrC4mD,GAAc,GACdM,MACC,CAACA,IAEEiB,IAA0BnoD,EAAAA,EAAAA,KAAagB,IAC3C0lD,EAAkB,CAChBznD,OAAQZ,EAAQY,OAChBC,UAAWb,EAAQZ,GACnB2qD,YAAaxlD,KAAKT,MAAMnB,EAAKsjB,UAAY,SAE1C,CAACjmB,EAAQY,OAAQZ,EAAQZ,GAAIipD,IAE1B2B,IAAiBroD,EAAAA,EAAAA,KAAY,MACjCulD,EAAAA,GAAAA,IAAqB,gBAAeY,GAAiB,KAAIvjD,KAAK0lD,IAAIjqD,EAAQY,aAAaZ,EAAQZ,MAC/F2pD,MACC,CAACjB,EAAciB,EAAW/oD,EAAQY,OAAQZ,EAAQZ,KAE/C8qD,IAAmBxmD,EAAAA,EAAAA,KAAQ,KAAO8lB,EAAQA,EAAMI,SAAW,CAAC5pB,IAAU4gB,KAAI,EAAGxhB,GAAAA,KAASA,KAAK,CAACoqB,EAAOxpB,IAEzG,GAAI4nD,EAGF,YAFAmB,IAKF,MAAMoB,GAAmB,IAAIxmC,KAG7B,OAFAwmC,GAAiB1jC,YAAY0jC,GAAiBtmC,cAAgB,GAG5D,0BAAK5hB,UAAW,CAAC,uBAAwBmK,GAAsB+B,KAAK,MAClE,mBAAC,GAAD,CACEnO,QAASA,EACT4D,OAAQ0kD,EACR1D,OAAQA,EACRC,WAAYA,EACZC,cAAeA,EACfC,SAAUA,EACV54B,UAAWA,EACXC,UAAWA,EACX64B,OAAQA,EACRC,SAAUA,EACVF,QAASA,EACTG,WAAYA,EACZC,eAAgBA,EAChBC,iBAAkBA,EAClBC,QAASA,EACTC,YAAaA,EACbC,UAAWA,EACXC,QAASyD,GACTxD,OAAQyD,GACRxD,MAAOyD,GACPt+B,QAASu+B,GACTpmD,UAAWsZ,GACX6Q,SAAUuB,EACVi3B,SAAUn6B,EACVo6B,cAAeyD,GACfxD,gBAAiByD,GACjB77B,SAAU87B,GACVzD,OAAQ6D,GACR5D,aAAc6D,GACdz/C,QAAS2+C,EACT9C,WAAY+D,KAEd,mBAAC,GAAD,CACEpmD,OAAQgpB,EACR/D,WAAgC,cAApBqD,EACZ9hB,QAAS0iB,EACTtD,MAAOA,EACPxpB,QAASA,IAEX,mBAAC,GAAD,CACE4D,OAAQmpB,EACR3iB,QAAS6iB,EACThY,WAAYi1C,KAEd,mBAAC,GAAD,CACEtmD,OAAQ8kD,EACR7nD,UAAWb,EAAQZ,GACnBwB,OAAQZ,EAAQY,OAChBwJ,QAAS4+C,IAEX,mBAAC,GAAD,CACEplD,OAAQglD,EACRnkC,gBAAc,EACdJ,WAA2B,IAAfrkB,EAAQ2C,KACpB2hB,OAAO8lC,EAAAA,EAAAA,IAAcD,IACrB5lC,cAAY,EACZna,QAAS6+C,EACTrkC,SAAUklC,UC9IlB,IAAejgD,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAU+oC,YAAAA,EAAa2gB,oBAAAA,MACtB,MAAMC,GAAqBxhC,EAAAA,EAAAA,IAAyBnoB,IAC9C,OAAEC,EAAF,SAAU+R,GAAa23C,GAAsB,GAC7ChoD,EAAO1B,IAAUM,EAAAA,EAAAA,IAAWP,EAAQC,GACpC2pD,EAAcjoD,GAAOkoD,EAAAA,EAAAA,IAA4BloD,QAAQkB,EAK/D,MAAO,CACLinD,gBALsBz/C,QACtB1I,GAAQqQ,IAAY6M,EAAAA,EAAAA,IAAiBld,EAAMqQ,KAAa43C,MAAAA,OAAxD,EAAwDA,EAAaE,kBAKrE3kB,WAAY4D,GACRghB,EAAAA,EAAAA,IAAiB/pD,EAAQ+oC,EAAYihB,cACrCN,GACEO,EAAAA,EAAAA,IAA4BjqD,EAAQ0pD,QACpC7mD,MAGV,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,eACA,mBACA,iBAtBgBZ,EA/F+C,EACjEkD,OAAAA,EACA8lC,YAAAA,EACA2gB,oBAAAA,EACAvkB,WAAAA,EACA2kB,gBAAAA,EACArgD,QAAAA,EACAygD,aAAAA,EACAC,iBAAAA,EACAC,YAAAA,MAGA,MAAM/qC,GAAepY,EAAAA,EAAAA,IAAuB,MACtChG,GAAOC,EAAAA,EAAAA,MAGXqmC,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAASroB,EAAcgrC,WAnBzB,IAmB4DC,YAAarnD,KAErGuB,EAAAA,EAAAA,KAAU,KACR,GAAIvB,EACF,GAAI8lC,EAAa,CACf,MAAM,aAAEihB,EAAF,qBAAgBO,GAAyBxhB,EAC/CmhB,EAAa,CACXF,aAAAA,EACAO,qBAAAA,SAEOb,GACTQ,EAAa,CACXR,oBAAAA,MAIL,CAACzmD,EAAQ8lC,EAAamhB,EAAcR,IAEvC,MAAM7d,GAAe7qC,EAAAA,EAAAA,KAAaklC,IAChCA,EAAU,IACLA,EACHskB,qBAAqB,GAGvBJ,EAAY,CAAElkB,QAAAA,IACdz8B,MACC,CAACA,EAAS2gD,IAEPK,GAAoBzpD,EAAAA,EAAAA,KAAY,KAChCmkC,IACFglB,EAAiB,CAAEH,aAAc7kB,EAAW1mC,KAC5CgL,OAED,CAACA,EAAS07B,EAAYglB,IAEzB,OACE,mBAACxqC,GAAA,EAAD,CACEre,UAAU,kBACV2B,OAAQA,EACRwG,QAASA,EACTihD,gBAAc,EACdxpC,MAAOikB,GAAarjC,EAAAA,EAAAA,GAAWqjC,EAAWjkB,MAAO,CAAC,QAAS,UAAYjgB,EAAK,uBAE3EkkC,MAAAA,GAAAA,EAAYU,SACX,sCACE,0BAAKj9B,IAAKyW,EAAc/d,UAAU,0BAC/B6jC,EAAWU,SAAS5lB,KAAKimB,GACxB,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTxkC,KAAMipD,EAAAA,GACNvlB,oBAAqBA,EACrB7jC,QAASuoD,EAAkBje,OAAehpC,EAC1C6wB,SAAUwS,OAIhB,0BAAK5kC,UAAU,kBACb,mBAAC4B,EAAA,EAAD,CACExB,KAAK,UACLu9B,OAAK,EACL77B,MAAO+hC,EAAWyD,cAAgB,SAAW,UAC7CrnC,QAASkpD,GAERxpD,EACCkkC,EAAWyD,cAAgB,iCAAmC,8BAC9DzD,EAAW/F,MACX,QAMR,mBAAC7e,GAAA,EAAD,W,eC5ER,MA+KA,IAAerX,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAChC,OAAK0B,GAAQA,EAAKipD,aACT,GAGF,CACLjpD,KAAAA,EACA2rB,SAASC,EAAAA,EAAAA,IAAkB5rB,GAAM6rB,EAAAA,EAAAA,IAAqBxtB,IAASytB,EAAAA,EAAAA,IAAuBztB,IACtFm5C,WAAW94C,EAAAA,EAAAA,IAAcsB,EAAKlD,IAC9BosD,eAAeC,EAAAA,EAAAA,IAAiBnpD,GAChCopD,cAAe1gD,QAAQ1I,MAAAA,GAAD,UAACA,EAAMq5B,gBAAP,aAAC,EAAgBgwB,kBAG3C,CAACtqD,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,uBACA,yBACA,iBACA,aACA,oBApBgBZ,EA/KmD,EACrEE,OAAAA,EACAgD,OAAAA,EACAghD,OAAAA,EACA7iC,UAAAA,EACA6pC,YAAAA,EACAC,cAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAC,SAAAA,EACA3pD,KAAAA,EACAw3C,UAAAA,EACA7rB,QAAAA,EACAu9B,cAAAA,EACAE,cAAAA,EACAQ,mBAAAA,EACAC,cAAAA,EACA/hD,QAAAA,EACAg4C,oBAAAA,EACAgK,qBAAAA,EACAC,uBAAAA,EACAC,eAAAA,EACAC,WAAAA,EACAC,eAAAA,MAEA,MAAOlE,EAAYC,IAAiBrjD,EAAAA,EAAAA,KAAS,IACtC0nB,EAAmB47B,IAAwBtjD,EAAAA,EAAAA,KAAS,IACrD,EAAEmL,EAAF,EAAKC,GAAMs0C,GAEjBt4C,EAAAA,EAAAA,GAAkB1I,EAAQw+C,OAAqB5+C,GAAW,GAE1D,MAAMmrB,GAAehtB,EAAAA,EAAAA,KAAY,KAC/B4mD,GAAc,GACdC,GAAqB,KACpB,IAEGO,GAAYpnD,EAAAA,EAAAA,KAAY,KAC5B4mD,GAAc,GACdn+C,MACC,CAACA,IAEE0iB,GAAmBnrB,EAAAA,EAAAA,KAAY,KACnC6mD,GAAqB,GACrBp+C,MACC,CAACA,IAEEqiD,GAAiB9qD,EAAAA,EAAAA,KAAY,KACjC2qD,EAAe,CAAEI,QAAS,aACzB,CAACJ,IAEEK,GAAmBhrD,EAAAA,EAAAA,KAAY,KACnC4qD,EAAW,CAAE3rD,OAAAA,MACZ,CAACA,EAAQ2rD,IAENK,GAAwBjrD,EAAAA,EAAAA,KAAY,KACxCyqD,EAAqB,CAAExrD,OAAAA,EAAQqtB,SAAUA,IACzC86B,MACC,CAACnoD,EAAQmoD,EAAW96B,EAASm+B,IAE1BS,GAAwBlrD,EAAAA,EAAAA,KAAY,KACxC6qD,EAAe,CAAEptD,GAAIwB,IACrBmoD,MACC,CAACnoD,EAAQmoD,EAAWyD,IAEjBM,GAAkBnrD,EAAAA,EAAAA,KAAY,KAClCuqD,IACAnD,MACC,CAACA,EAAWmD,IAETa,GAAeprD,EAAAA,EAAAA,KAAY,KAC/BwqD,IACApD,MACC,CAACA,EAAWoD,IAETa,GAAuBrrD,EAAAA,EAAAA,KAAY,KACvC0qD,IACAtD,MACC,CAACA,EAAWsD,KAEflnD,EAAAA,EAAAA,KAAU,KACRq/C,KAEOG,KACN,IAEH,MAAM/iD,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAACorD,GAAA,EAAD,KACE,0BAAKhrD,UAAU,uBACb,mBAAC0lD,GAAA,EAAD,CACE/jD,OAAQ0kD,EACRlkD,UAAU,QACVtE,MAAQ,SAAQuQ,YAAYC,OAC5BlG,QAAS2+C,GAER9kD,EAAAA,IAA2B2nD,GAC1B,mBAACvnD,EAAA,EAAD,CACEC,KAAK,OACLpC,QAASuqD,GAER7qD,EAAK,aAGTqC,EAAAA,IAA2B4nD,GAC1B,mBAACxnD,EAAA,EAAD,CACEC,KAAK,OACLpC,QAASyqD,GAER/qD,EAAK,eAGTqC,EAAAA,IAA2B6nD,GAC1B,mBAACznD,EAAA,EAAD,CACEC,KAAMyd,EAAY,UAAY,QAC9B7f,QAAS4qD,GAERlrD,EAAKmgB,EAAY,YAAc,eAGnC9d,EAAAA,IAA2B8nD,GAC1B,mBAAC1nD,EAAA,EAAD,CACEC,KAAK,SACLpC,QAAS6qD,GAERnrD,EAAK,WAGToqD,GACC,mBAAC3nD,EAAA,EAAD,CACEC,KAAM2pB,EAAU,SAAW,OAC3B/rB,QAAS0qD,GAERhrD,EAAKqsB,EAAU,cAAgB,cAGnCy9B,GACC,mBAACrnD,EAAA,EAAD,CACEC,KAAMyd,EAAY,WAAa,UAC/B7f,QAAS2qD,GAERjrD,EAAKmgB,EAAY,iBAAmB,6BAGzC,mBAAC1d,EAAA,EAAD,CACEC,KAAK,SACLpC,QAAS8qD,GAERprD,EAAK,yBAEPqqD,GACC,mBAAC5nD,EAAA,EAAD,CACEopB,aAAW,EACXnpB,KAAK,SACLpC,QAASysB,GAER/sB,EAAKk4C,EACF,iBACC0R,EAAgB,0BAA6BzpC,EAAY,eAAiB,sBAIpFzf,GACC,mBAAC0sB,GAAA,EAAD,CACEprB,OAAQgpB,EACRxiB,QAAS0iB,EACTxqB,KAAMA,U,eCzLlB,MAAM4qD,IAAwB/yB,EAAAA,EAAAA,KAAUjL,GAAOA,KAAM,KAAK,GAsK1D,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM2B,GAAO4oB,EAAAA,EAAAA,IAAkBvqB,GAC/B,IAAK2B,EACH,MAAO,GAGT,MAAM,MAAEywB,EAAF,QAASo6B,IAAYC,EAAAA,EAAAA,IAAwBzsD,IAAW,IACxD,WAAEuzC,EAAF,SAAcrgC,GAAas5C,GAAW,GAE5C,MAAO,CACL7qD,KAAAA,EACAywB,MAAAA,EACAmhB,WAAAA,EACArgC,SAAAA,EACAw5C,sBAAuBriD,QAAQrK,EAAO4nB,+BAG1C,CAAClnB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,0BACA,0BACA,eACA,uBACA,yBAvBgBZ,EApKuC,EACzD+c,SAAAA,EACAnb,KAAAA,EACAywB,MAAAA,EACAmhB,WAAAA,EACArgC,SAAAA,EACAw5C,sBAAAA,EACAC,wBAAAA,EACAC,wBAAAA,EACA9rD,aAAAA,EACA+rD,qBAAAA,EACAC,oBAAAA,MAGA,MAAMh/C,GAAW7G,EAAAA,EAAAA,IAAyB,OACnC8lD,EAAcC,IAAmBzoD,EAAAA,EAAAA,IAAS,IAGjDC,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEyoD,GAAmBjoD,OAC3B,IAAKioD,EACH,OAGF,MAAMC,EAAS9vD,SAASkd,eAAe,QACjCxV,EAAe,KACnB,MAAM,cAAEmoB,GAAkB7vB,SAC1B,GAAI6vB,GAAkBA,IAAkBnf,EAASrG,QAAU,CACzD,MAAM,QAAE0lD,EAAF,OAAWxoD,GAAWsoD,EAC5BC,EAAO/tD,MAAM4R,UAAa,cAAao8C,OACvCD,EAAO/tD,MAAMwF,OAAU,GAAEA,MACzBvH,SAASmrC,gBAAgB3pC,UAAYuuD,OAErCD,EAAO/tD,MAAM4R,UAAY,GACzBm8C,EAAO/tD,MAAMwF,OAAS,IAM1B,OAFAsoD,EAAehoD,iBAAiB,SAAUH,GAEnC,KACLmoD,EAAe/nD,oBAAoB,SAAUJ,MAE9C,KAGHN,EAAAA,EAAAA,KAAU,KACJ7C,GAAQuR,GAAYA,EAASvT,QAC/BmB,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWgT,EAASA,EAASvT,OAAS,KACtEqtD,EAAgB,IAEhBA,GAAiB,KAElB,CAACrrD,EAAMb,EAAcoS,KAGxB1O,EAAAA,EAAAA,KAAU,KACR4oD,MAAMC,KAAKjwD,SAASqC,iBAAmC,UAAU8kC,SAAS+oB,IACxEA,EAAMr/C,SAAW5D,QAAQyS,GAAYwwC,IAAUx/C,EAASrG,YAG1D2lD,MAAMC,KAAKjwD,SAASqC,iBAAiC,yBAAyB8kC,SAASgpB,IACrFA,EAAIC,gBAAkB1wC,EAAW,QAAU,YAE5C,CAACA,KAGJtY,EAAAA,EAAAA,KAAU,KACHsY,GACHhP,EAASrG,QAAS+W,SAEnB,CAAC1B,KAEJxS,EAAAA,EAAAA,KAAgB,KACMlN,SAASY,cAAgC,uBACjDwgB,SACX,CAACkuC,IAEJ,MAAMe,GAAiCzsD,EAAAA,EAAAA,KAAa0sD,IAClDf,EAAwB,CAAEv6B,MAAOs7B,IAE7BA,EAAS/tD,QACX4sD,GAAsBK,KAEvB,CAACA,EAAyBD,IAEvBgB,GAAW3sD,EAAAA,EAAAA,KAAY,KAC3B,GAAIW,GAAQuR,EAAU,CACpB,MAAM06C,EAAgBb,EAAe,EACrCjsD,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWgT,EAASA,EAASvT,OAAS,EAAIiuD,KAC1EZ,EAAgBY,MAEjB,CAACjsD,EAAMorD,EAAcjsD,EAAcoS,IAEhC26C,GAAa7sD,EAAAA,EAAAA,KAAY,KAC7B,GAAIW,GAAQuR,EAAU,CACpB,MAAM06C,EAAgBb,EAAe,EACrCjsD,EAAa,CAAEb,OAAQ0B,EAAKlD,GAAIyB,UAAWgT,EAASA,EAASvT,OAAS,EAAIiuD,KAC1EZ,EAAgBY,MAEjB,CAACjsD,EAAMorD,EAAcjsD,EAAcoS,IAEtC,OACE,0BAAKzU,GAAG,eAAe6C,UAAWwb,EAAW,SAAW,IACtD,0BAAKxb,UAAU,UACb,mBAAC4B,EAAA,EAAD,CACExB,KAAK,UACLyB,OAAK,EACLC,MAAM,cACN7B,QAASsrD,GAET,wBAAGvrD,UAAU,qBAEf,mBAACwsD,GAAA,EAAD,CACEllD,IAAKkF,EACLK,MAAOikB,EACP/jB,SAAUo/C,KAGd,0BAAKnsD,UAAU,UACb,0BAAKA,UAAU,WACZ8wB,EACClf,MAAAA,GAAAA,EAAUvT,OACP,GAAEotD,EAAe,QAAQxZ,IACxBrgC,IAAaA,EAASvT,OACxB,aAEA,GAGF,mBAACuD,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAAS,IAAMurD,EAAoB,CAAEppC,YAAY+lC,EAAAA,EAAAA,IAAczmC,KAAKmB,SACpE9gB,UAAU,2BAEV,wBAAG/B,UAAU,oBAInB,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASosD,EACT1/C,UAAWiF,IAAaA,EAASvT,QAAUotD,IAAiB75C,EAASvT,OAAS,GAE9E,wBAAG2B,UAAU,aAEf,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLzB,KAAK,UACL0B,MAAM,cACN7B,QAASssD,EACT5/C,UAAWiF,IAAaA,EAASvT,QAA2B,IAAjBotD,GAE3C,wBAAGzrD,UAAU,qB,2DCnMR,SAASysD,GACtB5vD,EACA6vD,EACAC,EAAS,EACTC,GAAU,EACVC,GAAsB,EACtBC,GAAe,GAEf,MAAMC,EAAalwD,EAAUiwD,EAAe,aAAe,aACrDE,EAAaD,EAAalwD,EAAUiwD,EAAe,cAAgB,gBACnEG,EAA4C,iBAAvBP,EACvB7vD,EAAUsB,iBAA8BuuD,GACxCA,GACE,OAAEruD,GAAW4uD,EACbC,EAA2B,GACjC,IAAIC,GAAU,EAEd,IAAK,IAAIvoC,EAAI,EAAGA,EAAIvmB,EAAQumB,IAAK,CAC/B,MAAMnnB,EAAUwvD,EAAYroC,GACtBwoC,EAAK3vD,EAAQqvD,EAAe,aAAe,aAC3CO,EAAKD,EAAK3vD,EAAQqvD,EAAe,cAAgB,gBAKvD,GAJkBD,EACdQ,GAAMN,EAAaJ,GAAUU,GAAML,EAAaL,EAChDS,GAAMJ,EAAaL,GAAUU,GAAMN,EAAaJ,EAGlDO,EAAeroC,KAAKD,GACpBuoC,GAAU,OACL,GAAIA,IAAYP,EACrB,MAIJ,MAAO,CAAEK,YAAAA,EAAaC,eAAAA,GCzBxB,SARA,SAAwBrwD,EAAwBY,EAAsBqvD,GAAe,GACnF,MAAMC,EAAalwD,EAAUiwD,EAAe,aAAe,aACrDE,EAAaD,EAAalwD,EAAUiwD,EAAe,cAAgB,gBACnEM,EAAK3vD,EAAQqvD,EAAe,aAAe,aAC3CO,EAAKD,EAAK3vD,EAAQqvD,EAAe,cAAgB,gBACvD,OAAOM,EAAKL,GAAcM,EAAKL,G,cCElB,SAASM,GAAsBC,EAAkB1yC,EAAekD,GAC7E,MAAMlhB,EAAYkhB,EAAa5X,QAC/B,IAAKtJ,GAAage,EAAQ,EACxB,OAEF,MAAM,eAAEqyC,EAAF,YAAkBD,GAAgBR,GACtC5vD,EACA0wD,EAVoB,GAYpB,GACA,GAGF,IAAKN,EAAY5uD,SAAW4uD,EAAYpyC,GACtC,OAEF,MAAM2yC,EAAQN,EAAe,GAC7B,IAAKA,EAAe9vD,SAASyd,IACvBA,IAAU2yC,IAAUC,GAAe5wD,EAAWowD,EAAYO,IAAU,CACxE,MAAMtiD,EAAW2P,EAAQqyC,EAAeA,EAAe7uD,OAAS,GAAK,QAAU,OAC/EqvD,EAAAA,GAAAA,GAAiB7wD,EAAWowD,EAAYpyC,GAAQ3P,EAtB9B,K,eCDf,SAASyiD,IAAsB,SACpCnyC,EADoC,aAEpCsxC,EAFoC,6BAGpCc,EAHoC,kBAIpCC,EAJoC,MAKpCrvC,EALoC,kBAMpCsvC,EANoC,SAOpCriC,EAPoC,QAQpCtjB,IAWA,MAAO4lD,EAAmBC,IAAwB/qD,EAAAA,EAAAA,KAAU,GAEtDgrD,GAAmBvuD,EAAAA,EAAAA,KAAawuD,GAC/B1vC,GAIE2vC,EAAAA,GAAAA,GAAc3vC,EAAMngB,OAAQ6vD,IAHzB,GAIT,CAAC1vC,IAEE4vC,GAAiB1uD,EAAAA,EAAAA,KAAY,CAACmN,EAAe9I,KACjDA,EAAEsH,iBACF2iD,GAAsBnzC,GAAWozC,EAAiBpzC,EAAQhO,OACzD,CAACmhD,EAAsBC,IAEpBI,GAAmB3uD,EAAAA,EAAAA,KAAaqE,IACpC,GAAIya,GAASA,EAAMngB,QAAU0vD,GAAqB,EAAG,CACnD,MAAMO,EAAO9vC,EAAMuvC,GACfO,IACFvqD,EAAEsH,iBACFogB,EAAS6iC,OAGZ,CAAC9vC,EAAOiN,EAAUsiC,IAkBrB,OAhBA7qD,EAAAA,EAAAA,KAAU,KACR8qD,EAAqBJ,GAAgC,EAAI,KACxD,CAACpvC,EAAOovC,KAEX1qD,EAAAA,EAAAA,KAAU,IAAOsY,GAAWyP,EAAAA,GAAAA,GAAyB,CACnDG,MAAOjjB,EACPomD,KAAMV,GAAqBf,OAAevrD,EAAawC,GAAqBqqD,GAAgB,EAAGrqD,GAC/FyqD,OAAQX,GAAqBf,OAAevrD,EAAawC,GAAqBqqD,EAAe,EAAGrqD,GAChG0qD,OAAQZ,IAAsBf,OAAevrD,EAAawC,GAAqBqqD,GAAgB,EAAGrqD,GAClG2qD,QAASb,IAAsBf,OAAevrD,EAAawC,GAAqBqqD,EAAe,EAAGrqD,GAClG4qD,MAAOb,EAAoBO,OAAmB9sD,EAC9CumB,QAASumC,SACN9sD,GAAY,CACfssD,EAAmBO,EAAgBC,EAAkB7yC,EAAUsxC,EAAc3kD,EAAS2lD,IAGjFC,ECvCT,MAiFA,IAAenmD,EAAAA,EAAAA,KAjFsB,EACnCjG,OAAAA,EACAwG,QAAAA,EACAymD,iBAAAA,EACAvhC,UAAAA,EACAwhC,cAAAA,MAGA,MAAM9wC,GAAepY,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQJ,OAAWA,GAAW,GAEzFutD,GAAmBpvD,EAAAA,EAAAA,KAAY,CAACqf,EAAgBgwC,GAAa,KACjE,MAAMzuD,EAAO+sB,MAAAA,OAAH,EAAGA,EAAYtO,GACpBze,GAILsuD,EAAiBtuD,EAAMyuD,KACtB,CAAC1hC,EAAWuhC,IAETI,GAAsBtvD,EAAAA,EAAAA,KAAauvD,IACvCH,EAAiBG,EAAO9xD,IAAI,KAC3B,CAAC2xD,IAEEI,EAAuBvB,GAAsB,CACjDnyC,SAAU7Z,EACV6c,MAAOqwC,EACPpjC,SAAUujC,EACVlB,mBAAmB,EACnB3lD,QAAAA,KAGFjF,EAAAA,EAAAA,KAAU,KACRoqD,GAAsB,uBAAwB4B,EAAsBnxC,KACnE,CAACmxC,KAEJhsD,EAAAA,EAAAA,KAAU,KACJ2rD,IAAkBA,EAAcxwD,QAClC8J,MAED,CAAC0mD,EAAe1mD,IAEnB,MAAMgnD,GAAkB5iD,EAAAA,EAAAA,GACtBsiD,MAAAA,GAAAA,EAAexwD,OACXwwD,OACAttD,EACJ0I,GAEImlD,EAAsBP,IAAkBA,EAAcxwD,OACxD8wD,EACAN,EAEJ,IAAK5kD,GAAiBmlD,IAAwBA,EAAoB/wD,OAChE,OAGF,MAAM2B,GAAY8D,EAAAA,EAAAA,GAChB,gDACAqG,GAGF,OACE,0BAAKnK,UAAWA,EAAWsH,IAAKyW,GAC7BqxC,MAAAA,OADH,EACGA,EAAqBzwC,KAAI,EAAGxhB,GAAAA,GAAM0d,IACjC,mBAAC+D,GAAA,EAAD,CACEze,IAAKhD,EACL6C,UAAU,kCACVC,QAAS,IAAM6uD,EAAiB3xD,GAChC8f,MAAOiyC,IAAyBr0C,GAEhC,mBAACgE,GAAA,EAAD,CACEE,OAAQ5hB,EACR2vB,WAAW,QACXV,cAAY,W,eCpDxB,MAwNA,IAAexkB,EAAAA,EAAAA,KAtNuB,EACpCynD,YAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAjzC,cAAAA,EACAkzC,iBAAAA,EACAniC,UAAAA,EACAoiC,aAAAA,EACAC,kBAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,gBAAAA,EACA/L,OAAAA,EACAgM,aAAAA,EACAC,QAAAA,MAGA,MAAMC,GAAiBrqD,EAAAA,EAAAA,IAAe,MAChCsqD,GAAkB1jD,EAAAA,EAAAA,GAAY8iD,GAC9Ba,EAAuBb,EAAYhxD,OAASgxD,EAAcY,EAC1DtuD,EAASoH,QAAQsmD,EAAYhxD,SAC5B8xD,EAAWC,EAAaC,IAAiBltC,EAAAA,GAAAA,KAC1CmtC,EAAUvnD,QAAQmnD,GAAwBA,EAAqBK,OAAO7+B,GAAMA,EAAE8+B,SAC9E7wD,GAAOC,EAAAA,EAAAA,MAEP,qBACJ6wD,EADI,oBACkBC,EADlB,cACuCC,EADvC,qBACsDC,IACxDC,EAAAA,GAAAA,GACFlvD,EACA2tD,EACAO,EACAiB,EAAAA,GACAtB,OACAjuD,EACA+a,EACA+Q,IAEI,mBACJ0jC,EADI,kBACgBC,EADhB,eACmCC,EADnC,YACmDC,IACrDC,EAAAA,GAAAA,GACFxvD,EACA2tD,EACAG,EACAqB,EAAAA,GACAjB,EACAH,EACAC,GACCJ,IAGHrsD,EAAAA,EAAAA,KAAU,IAAOvB,GAAS6Y,EAAAA,EAAAA,GAAsBu1C,QAAWxuD,GAAY,CAACI,EAAQouD,IAEhF,MAAMqB,GAAkB1xD,EAAAA,EAAAA,KAAY,KAC9BiC,GACFmiD,MAED,CAACniD,EAAQmiD,IAsBNuN,GAAkB3xD,EAAAA,EAAAA,KAAaqE,IACnCA,EAAEsH,iBACFglD,IAEA,MAAQiB,cAAc,MAAE/lB,IAAYxnC,EAEpC,GAAIwnC,MAAAA,GAAAA,EAAOltC,OAAQ,CACjB,MAAMkzD,EAAWjB,EACbxE,MAAMC,KAAKxgB,GAAOxuB,QAAQy0C,GACnBA,EAAK1kD,MAAQ2kD,EAAAA,GAAAA,IAA+BD,EAAK1kD,QAExDg/C,MAAMC,KAAKxgB,GAEfukB,EAAayB,EAAUjB,MAExB,CAACA,EAASR,EAAcO,IAW3B,IAAKH,EACH,OAGF,MAAMwB,EAAexB,EAAqBK,OAAO7+B,GAAMigC,EAAAA,GAAAA,IAAkCjgC,EAAEkgC,YACrFC,EAAe3B,EAAqBK,OAAO7+B,GAAMogC,EAAAA,GAAAA,IAAkCpgC,EAAEkgC,YACrFG,EAAe7B,EAAqBK,OAAO7+B,GAAMA,EAAEkgC,SAAS3gC,WAAW,YAE7E,IAAIrR,EAAQ,GAkCZ,OAhCEA,EAAQjgB,EADN+xD,EACW,0BACJG,EACI,0BACJE,EACI,0BAEA,yBAN2B7B,EAAqB7xD,OAAQ,KAiCrE,mBAACggB,GAAA,EAAD,CACE1c,OAAQA,EACRwG,QAAS4nD,EACTzxC,OA3BJ,WACE,GAAK4xC,EAIL,OACE,0BAAKlwD,UAAU,yBAAyBO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAChE,mBAACK,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,cAAc1B,KAAK,UAAU2B,UAAU,qBAAqB9B,QAAS8vD,GACvF,wBAAG/vD,UAAU,gBAEf,0BAAKA,UAAU,eAAe4f,GAC9B,mBAAChe,EAAA,EAAD,CACEE,MAAM,UACN1B,KAAK,UACLJ,UAAU,sBACVC,QAASmxD,GAERzxD,EAAK,UAUFqyD,GACRhyD,UAAY,oBAAkBmwD,EAAY,UAAY,KAEtD,0BACEnwD,UAAU,cACViyD,YAAa7B,EACb8B,OAAQb,EACRc,WA9DN,SAAwBpuD,GACtBA,EAAEsH,iBACFtH,EAAEC,kBAEEgsD,EAAe7pD,SACjBzC,OAAOqC,aAAaiqD,EAAe7pD,UA0DjCisD,YApGmBruD,IACvB,MAAQsuD,cAAeC,EAAUrlD,OAAQslD,GAAexuD,EAGnDwuD,EAA8B96C,QAAQ,kBAAoB66C,IAC7DtC,EAAe7pD,QAAUzC,OAAOoC,WAAWuqD,EAjEnB,MAqEtBkC,GAAeA,EAA2Br1D,QAAQ,8BAIlDo1D,GACFvuD,EAAEC,kBAGJqsD,MAoFI,0BAAyB1wD,EAAK,4BAA6B,KAE1D2wD,EACC,0BAAKtwD,UAAU,+BACZkwD,EAAqBvxC,KAAK6zC,GACzBA,EAAWZ,SAAS3gC,WAAW,UAC3B,0BAAK70B,IAAKo2D,EAAWpiD,QAASG,IAAI,KAClC,4BAAOnU,IAAKo2D,EAAWpiD,QAAS1E,UAAQ,EAACG,OAAK,EAACD,MAAI,OAI3D,0BAAK5L,UAAU,kCACZkwD,EAAqBvxC,KAAK6zC,GACzB,mBAACC,GAAA,EAAD,CACEz2C,KAAMw2C,EAAWE,SACjBC,WAAWC,EAAAA,GAAAA,IAAiBJ,EAAWE,SAAUF,EAAWZ,UAC5DiB,YAAaL,EAAW99C,eACxBtU,KAAMoyD,EAAWpyD,KACjB6zB,SAAO,OAMf,0BAAKj0B,UAAU,8BACb,mBAAC,GAAD,CACE2B,OAAQ8uD,EACRtoD,QAASuoD,EACT9B,iBAAkB+B,EAClB9B,cAAe+B,EACfvjC,UAAWA,IAEb,mBAAC,KAAD,CACE1rB,OAAQovD,EACR+B,OAAQ7B,EACR9oD,QAAS6oD,EACT+B,cAAe7B,EACftB,eAAgBA,IAElB,mBAACoD,GAAA,EAAD,CACE71D,GAAG,qBACH81D,wBAAsB,EACtBC,KAAM5D,EACN6D,gBAAiBrC,EAAAA,GACjB1yC,YAAaze,EAAK,WAClByzD,SAAUvD,EACV/L,OAAQA,EACRuP,eAAgBtqD,QAAQsmD,EAAYhxD,gB,eCrOhD,MAqUA,IAAeuJ,EAAAA,EAAAA,KA/TiB,EAAGjG,OAAAA,EAAQmiD,OAAAA,EAAQiM,QAAAA,MAEjD,MAAMuD,GAAmB3tD,EAAAA,EAAAA,IAAyB,MAE5C4tD,GAAiB5tD,EAAAA,EAAAA,IAAuB,MAExC6tD,GAAc7tD,EAAAA,EAAAA,IAAuB,OAEpC8tD,EAAUC,IAAezwD,EAAAA,EAAAA,IAAiB,KAC1C8mB,EAAS4pC,IAAc1wD,EAAAA,EAAAA,IAAmB,CAAC,MAC3C2wD,EAAaC,IAAkB5wD,EAAAA,EAAAA,KAAS,IACxC6wD,EAAmBC,IAAwB9wD,EAAAA,EAAAA,KAAS,IACpD+wD,EAAYC,IAAiBhxD,EAAAA,EAAAA,KAAS,IACtCixD,EAAUC,IAAelxD,EAAAA,EAAAA,OACzBmxD,EAAeC,IAAoBpxD,EAAAA,EAAAA,OACnCqxD,EAAWC,IAAgBtxD,EAAAA,EAAAA,KAAkB,GAE9CtD,GAAOC,EAAAA,EAAAA,KAEP40D,GAAa90D,EAAAA,EAAAA,KAAa4H,IAC1B3F,GAAU2F,EAAInB,SAChBmB,EAAInB,QAAQ8W,UAEb,CAACtb,KAEJuB,EAAAA,EAAAA,KAAU,IAAOvB,GAAS6Y,EAAAA,EAAAA,GAAsBu1C,QAAWxuD,GAAY,CAACI,EAAQouD,KAChF7sD,EAAAA,EAAAA,KAAU,KACHvB,IACH+xD,EAAY,IACZC,EAAW,CAAC,KACZE,GAAe,GACfE,GAAqB,GACrBE,GAAc,GACdE,EAAY,IACZE,EAAiB,IACjBE,GAAa,MAEd,CAAC5yD,KAEJuB,EAAAA,EAAAA,KAAU,IAAMsxD,EAAWlB,IAAmB,CAACkB,EAAY7yD,KAE3DqH,EAAAA,EAAAA,KAAgB,KACd,MAAMyrD,EAAajB,EAAYrtD,QAE3BsuD,GAAcP,IAAaO,EAAWC,YACxCD,EAAWC,UAAYR,KAExB,CAACA,IAEJ,MAAMS,GAAej1D,EAAAA,EAAAA,KAAY,CAACk1D,EAAuB,MACvDjB,EAAW,IAAIiB,EAAY,KAC3Bl8C,uBAAsB,KACpB,MAAMm8C,EAAOtB,EAAeptD,QACvB0uD,IAILA,EAAK74D,UAAU4Z,OAAO,YAAai/C,EAAK5S,aA/DtB,KAgElB4S,EAAKC,SAAS,CAAEn9C,IAAKk9C,EAAK5S,aAAc8S,SAAU,iBAEnD,IAEGC,GAAet1D,EAAAA,EAAAA,KAAY,KAE/B,GADA60D,GAAa,IACR5yD,EACH,OAGF,MAAMszD,EAAkBxB,EAAS36B,OAAOuP,UAAU,EAvE1B,KAwElB6sB,EAAiBnrC,EAAQpL,KAAKw2C,GAAMA,EAAEr8B,OAAOuP,UAAU,EAzEvC,OAyE8DtrB,QAAQo4C,GAAMA,EAAE92D,SAEpG,IAAK42D,GAAmBC,EAAe72D,OAAS,EAY9C,OAXAq1D,EAAYuB,GACRC,EAAe72D,OACb62D,EAAe72D,OAAS,EAC1Bs2D,EAAaO,GAEbvB,EAAWuB,GAGbP,SAEFJ,GAAa,GAIf,GAAIP,KAAgBI,IAAkBc,EAAeloD,OAAOonD,KAE1D,YADAG,GAAa,GAIf,MAOMp+B,EAAsB,CAC1Bi/B,QAAS,CACP3B,SAAUwB,EACVI,QAVYH,EACbv2C,KAAI,CAAC/b,EAAMiY,KAAP,CACHjY,KAAMA,EAAKk2B,OACX6K,OAAQ1hB,OAAOpH,MACXoH,OAAOpH,KAAWu5C,GAAiB,CAAEkB,SAAS,WAO7C1B,GAAe,CAAE2B,UAAU,MAC5BzB,GAAqB,CAAE0B,gBAAgB,MACvCxB,GAAc,CAAEyB,MAAM,KAI9B,GAAIzB,EAAY,CACd,MAAM,KAAEpxD,EAAF,SAAQ8yD,GAAcxB,IAAYyB,EAAAA,GAAAA,GAAkBzB,EAAS7rB,UAAU,EA/GvD,OA+GoF,GAE1GlS,EAAQs/B,KAAO,CACbG,eAAgB,CAACxB,MACbxxD,GAAQ,CAAEsxD,SAAUtxD,MACpB8yD,GAAY,CAAEG,iBAAkBH,IAIxC5R,EAAO3tB,KACN,CACDx0B,EACA8xD,EACA1pC,EACAiqC,EACAI,EACAR,EACAE,EACAhQ,EACA6Q,EACAT,IAGI4B,GAAep2D,EAAAA,EAAAA,KAAY,CAACmb,EAAejY,KAC/C,MAAMgyD,EAAa,IAAI7qC,GACvB6qC,EAAW/5C,GAASjY,EAChBgyD,EAAWA,EAAWv2D,OAAS,GAAGy6B,OAAOz6B,QAAUu2D,EAAWv2D,OA5I5C,GA6IpBs2D,EAAaC,GAEbjB,EAAWiB,KAEZ,CAAC7qC,EAAS4qC,IAEPoB,GAAer2D,EAAAA,EAAAA,KAAamb,IAChC,MAAM+5C,EAAa,IAAI7qC,GACvB6qC,EAAWrzB,OAAO1mB,EAAO,GACzB84C,EAAWiB,GACXl8C,uBAAsB,KACf66C,EAAeptD,SAIpBotD,EAAeptD,QAAQnK,UAAU4Z,OAAO,YAAa29C,EAAeptD,QAAQ87C,aA7J1D,UA+JnB,CAACl4B,IAEEisC,GAA4Bt2D,EAAAA,EAAAA,KAAam6C,IAC7Cwa,EAAiBxa,KAChB,CAACwa,IAEE4B,GAA0Bv2D,EAAAA,EAAAA,KAAaqE,IAC3C8vD,EAAe9vD,EAAEkJ,OAAO80B,WACvB,IAEGm0B,GAA8Bx2D,EAAAA,EAAAA,KAAaqE,IAC/CgwD,EAAqBhwD,EAAEkJ,OAAO80B,WAC7B,IAEGo0B,GAAuBz2D,EAAAA,EAAAA,KAAaqE,IACxCkwD,EAAclwD,EAAEkJ,OAAO80B,WACtB,IAEGq0B,GAAiB12D,EAAAA,EAAAA,KAAaqE,IAChB,KAAdA,EAAEsyD,SACJrB,MAED,CAACA,IAEEsB,GAAmB52D,EAAAA,EAAAA,KAAY,KACnC,GAAI40D,IAAcb,EAAS36B,OAAOz6B,OAChC,OAAOsB,EAAK,+BAIb,CAAC20D,EAAW30D,EAAM8zD,IAEf8C,GAAkB72D,EAAAA,EAAAA,KAAamb,IACnC,MAAMq6C,EAAiBnrC,EAAQpL,KAAKw2C,GAAMA,EAAEr8B,SAAQ/b,QAAQo4C,GAAMA,EAAE92D,SACpE,GAAIi2D,GAAaY,EAAe72D,OAAS,IAAM0rB,EAAQlP,GAAOie,OAAOz6B,OACnE,OAAOsB,EAAK,8BAGb,CAAC20D,EAAW30D,EAAMoqB,IAqBrB,SAASysC,IACP,OAAOzsC,EAAQpL,KAAI,CAACglB,EAAQ9oB,IAC1B,0BAAK7a,UAAU,kBACb,mBAACke,GAAA,EAAD,CACE2L,MAAOhP,IAAUkP,EAAQ1rB,OAAS,GA7NlB,KA6NuB0rB,EAAQ1rB,OAC3CsB,EAAK,cACLA,EAAK,wBACTwf,MAAOo3C,EAAgB17C,GACvBhO,MAAO82B,EACP52B,SAAWhJ,GAAM+xD,EAAaj7C,EAAO9W,EAAEgH,cAAc8B,OACrD4pD,WAAYL,IAEbv7C,IAAUkP,EAAQ1rB,OAAS,GAC1B,mBAACuD,EAAA,EAAD,CACE5B,UAAU,uBACV6B,OAAK,EACLC,MAAM,cACN1B,KAAK,UACL2B,UAAWpC,EAAK,UAChBM,QAAS,IAAM81D,EAAal7C,IAE5B,wBAAG7a,UAAU,mBAoBvB,OACE,mBAACqe,GAAA,EAAD,CAAO1c,OAAQA,EAAQwG,QAAS4nD,EAASzxC,OA3DvC,0BAAKte,UAAU,0BACb,mBAAC4B,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,cAAc1B,KAAK,UAAU2B,UAAU,uBAAuB9B,QAAS8vD,GACzF,wBAAG/vD,UAAU,gBAEf,0BAAKA,UAAU,eAAeL,EAAK,YACnC,mBAACiC,EAAA,EAAD,CACEE,MAAM,UACN1B,KAAK,UACLJ,UAAU,sBACVC,QAAS+0D,GAERr1D,EAAK,YAgDqDK,UAAU,aACzE,mBAACke,GAAA,EAAD,CACE5W,IAAKgsD,EACLzpC,MAAOlqB,EAAK,gBACZkN,MAAO4mD,EACPt0C,MAAOm3C,IACPvpD,SAAWhJ,GAAM2vD,EAAY3vD,EAAEgH,cAAc8B,OAC7C4pD,WAAYL,IAEd,0BAAKp2D,UAAU,oBAEf,0BAAKA,UAAU,6BAA6BsH,IAAKisD,GAC/C,yBAAIvzD,UAAU,kBAAkBL,EAAK,gBAEpC20D,GAvBP,WACE,MAAMY,EAAiBnrC,EAAQpL,KAAKw2C,GAAMA,EAAEr8B,SAAQ/b,QAAQo4C,GAAMA,EAAE92D,SAEpE,OAAO21D,KAAgBI,IAAkBc,EAAeloD,OAAOonD,MAC7D,wBAAGp0D,UAAU,SAASL,EAAK,6BAmBX+2D,GACb1C,EACC,mBAAClqC,GAAA,EAAD,CACE9N,KAAK,gBACL+N,QA/BDysC,IACJ73C,KAAI,CAACkL,EAAOhP,KAAR,CAAqBhO,MAAOoV,OAAOpH,GAAQgP,MAAAA,EAAO8sC,OAAQ97C,IAAUkP,EAAQ1rB,OAAS,MA+BpF0O,SAAUipD,IAGZQ,KAKJ,0BAAKx2D,UAAU,oBAEf,0BAAKA,UAAU,aACb,mBAAC8hC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,iBACZoiC,QAAS6xB,EACT7mD,SAAUkpD,IAEZ,mBAACn0B,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,gBACZoiC,QAAS+xB,EACTnnD,SAAUqnD,EACVjnD,SAAUmpD,IAEZ,mBAACp0B,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,YACZoiC,QAASiyB,EACTrnD,SAAUmnD,EACV/mD,SAAUopD,IAEXnC,GACC,sCACE,yBAAIh0D,UAAU,kBAAkBL,EAAK,6BACrC,0BACE2H,IAAKksD,EACLxzD,UAAU,eACVksD,iBAAe,EACf3rD,IAAI,OACJwM,SAAWhJ,GAAMowD,EAAYpwD,EAAEgH,cAAc2pD,aAE/C,0BAAK10D,UAAU,QAAQL,EAAK,qCCpTlCi3D,GAAkB,IA8LxB,IAAehvD,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACF,CACLk4D,iBAAkBn4D,EAAOo4D,IAAI5mC,SAASvxB,IAAW,IAAIo4D,YAGzD,CAAC33D,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,oBACA,sBARgBZ,EA5LwC,EAC1DkD,OAAAA,EACAhD,OAAAA,EACAoxD,QAAAA,EACA8G,gBAAAA,EACAG,kBAAAA,EACAC,iBAAAA,MAEA,MAAOC,EAAQC,IAAal0D,EAAAA,EAAAA,IAXP,KAYdkc,EAAOib,IAAYn3B,EAAAA,EAAAA,OAEpB,kBACJm0D,EADI,iBACeC,EADf,cACiCC,EADjC,SACgDC,GAuIxD,WACE,MAAM,IAAET,EAAF,OAAOU,GAAW9zD,QACjB+zD,EAAeC,IAAoBz0D,EAAAA,EAAAA,OACnCq0D,EAAeK,IAAoB10D,EAAAA,EAAAA,MAIpCm0D,EAAoBruD,QAAQ+tD,IAElC5zD,EAAAA,EAAAA,KAAU,KACHk0D,IAKLN,EAAIc,KAAK,uBAAuB/6B,MAAMg7B,IACpCH,EAAiBG,EAAS,OAE5Bf,EAAIc,KAAK,kBAAkB/6B,MAAMi7B,IAC/BH,EAAiBG,EAAUlB,UAE5B,CAACQ,EAAmBN,IAEvB,MAAMS,GAAW73D,EAAAA,EAAAA,KAAY,CAACq4D,EAAYb,IAEjCJ,EAAIc,KAAK,sBAAuB,CAAC,CACtC7L,KAAM0L,EACN5qD,MAAOoV,OAAOi1C,EAASN,IACvBmB,GAAAA,EACAh7B,KAAM,8BAEP,CAAC+5B,EAAKW,IAET,MAAO,CACLJ,iBAAkBtuD,QAAQyuD,EAAOQ,SACjCZ,kBAAAA,EACAE,cAAAA,EACAC,SAAAA,GA3KEU,GAEEC,GAAqBx4D,EAAAA,EAAAA,KAAaqE,IACtCq2B,OAAS74B,GACT41D,EAAUnqD,OAAOjJ,EAAEgH,cAAc8B,UAChC,IAEGsrD,EAAUtB,GAAmBS,GAAiBJ,EAAS,GAAKI,GAAiBJ,EAE7EU,GAAOl4D,EAAAA,EAAAA,KAAY,KAGvB,GAFA06B,OAAS74B,IAEJ42D,EACH,OAIF,MAAM3iB,EAAS+hB,EAASV,EAAkBK,GACtC1hB,aAAkBkP,QACpBlP,EACG3Y,MAAK,KACJo6B,EAAiB,CAAEl5D,QAAS,mCAE7Bq6D,OAAOC,IACNj+B,EAASi+B,EAAIt6D,YAERy3C,aAAkB8iB,MAC3Bl+B,EAASob,EAAOz3C,SAEhBq8B,EAAS,mBAEV,CAAC88B,EAAQiB,EAAStB,EAAiBU,EAAUN,IAgGhD,OA9FA/zD,EAAAA,EAAAA,KAAU,IAAOvB,GAAS6Y,EAAAA,EAAAA,GAAsBu1C,QAAWxuD,GAAY,CAACI,EAAQouD,KAChF7sD,EAAAA,EAAAA,KAAU,IAAOvB,GAASspB,EAAAA,GAAAA,GAAyB,CAAEnD,QAAS8vC,SAAUr2D,GAAY,CAACI,EAAQi2D,KAE7F10D,EAAAA,EAAAA,KAAU,KACHvB,IAIAk1D,GACHG,OAED,CAACr1D,EAAQk1D,EAAiBG,IAoF3B,mBAAC34C,GAAA,EAAD,CAAO1c,OAAQA,EAAQwG,QAAS4nD,EAASzxC,OAhFvC,0BAAKte,UAAU,0BACb,mBAAC4B,EAAA,EAAD,CACEC,OAAK,EACLC,MAAM,cACN1B,KAAK,UACL2B,UAAU,iBACV9B,QAAS8vD,GAET,wBAAG/vD,UAAU,gBAEf,0BAAKA,UAAU,eAAf,kBACA,mBAAC4B,EAAA,EAAD,CACEE,MAAM,UACN1B,KAAK,UACLJ,UAAU,sBACV2M,UAAWwrD,EACXl4D,QAAS23D,GALX,SAqE6D53D,UAAU,YAvDtEo3D,GAAsBC,EAUzB,sCACGR,EACC,0BAAK72D,UAAU,WACb,mBAAC6e,GAAA,EAAD,CAAiBE,OAAQpgB,EAAQmuB,WAAW,QAAQyrC,kBAAgB,KAGtE,0BAAKv4D,UAAU,YACb,mBAACyQ,EAAA,EAAD,MADF,6CAKF,0BAAKzQ,UAAU,aACZo3D,EACC,sCACE,mBAACl5C,GAAA,EAAD,CACE2L,MAAM,SACNhd,MAAOoV,OAAOi1C,GACdnxC,UAAU,UACV5G,MAAOA,EACPpS,SAAUmrD,IAEZ,0BAAKl4D,UAAU,aAAf,sBACsBs3D,EADtB,SAKF,sCACE,mBAAC11D,EAAA,EAAD,CACEW,KAAMi2D,EAAAA,GACN12D,MAAM,WAFR,qBAMA,0BAAK9B,UAAU,QAAf,oCAEE,8BAFF,oCAzCN,0BAAKA,UAAU,YAAf,gDAEE,8BAFF,yB,qCChHR,MAmBA,IAAe4H,EAAAA,EAAAA,KAnBmB,EAAG6wD,MAAAA,EAAOx7C,MAAAA,EAAOhd,QAAAA,MACjD,MAAM2sB,GAAcltB,EAAAA,EAAAA,KAAaqE,IAE/BA,EAAEsH,iBAEFpL,EAAQw4D,EAAMC,OAAQD,EAAMt7D,MAC3B,CAACs7D,EAAOx4D,IAEX,OACE,0BACED,UAAY,gBAAcid,EAAQ,QAAU,IAC5C/P,YAAa0f,EACbhN,MAAQ,IAAG64C,EAAME,MAAM,OAEtBC,EAAAA,GAAqBH,EAAMC,OAAS,0BAAKt8D,IAAM,kBAAiBq8D,EAAMxpD,YAAasB,IAAI,GAAGsoD,QAAQ,aCuDzG,IAAejxD,EAAAA,EAAAA,KAxDqB,EAClCkxD,SAAAA,EAAUj+C,MAAAA,EAAOk+C,UAAAA,EAAWj1B,oBAAAA,EAAqB75B,aAAAA,EAAc8oD,cAAAA,MAG/D,MAAMzrD,GAAM3B,EAAAA,EAAAA,IAAuB,OAEnCqzD,EAAAA,GAAAA,IAAe1xD,EAAKw8B,GAEpB,MAAM,qBAAE35B,IAAyBE,EAAAA,EAAAA,GAAkBJ,OAAc1I,OAAWA,EAAW,QAEjF5B,GAAOC,EAAAA,EAAAA,KAEPq5D,EAAej3D,EAAAA,GACjBM,KAAKkC,OAAOuS,EAAAA,EAAAA,MAAiB3Q,MAzBF,GAyBhB,IA3BiB,EA6B1B/C,EAAS,GAAAf,KAAK42D,KAAKJ,EAAShG,OAAOz0D,OAAS46D,GAElD,OACE,0BACE3xD,IAAKA,EACLnH,IAAK24D,EAAS37D,GACdA,GAAK,kBAAiB0d,IACtB7a,UAAU,cAEV,wBAAGA,UAAU,kBAAkBO,IAAI,QAChCZ,EAAqB,WAAhBm5D,EAAS37D,GAAkB,iBAAoB,QAAO0d,MAE9D,0BACE7a,WAAW8D,EAAAA,EAAAA,GAAe,uBAAwBqG,GAElDtM,MAAQ,WAAUwF,OAClB9C,IAAKZ,EAAKkc,MAAQ,WAAQta,GAEzB0I,GAAgB6uD,EAAShG,OAAOn0C,KAAK3C,IACpC,MAAMy8C,EAAQM,EAAU/8C,GAExB,IAAKy8C,EACH,OAIF,MAAMU,EAAiB,OAAQV,EAAQA,EAAQA,EAAM,GAErD,OACE,mBAAC,GAAD,CACEt4D,IAAKg5D,EAAeh8D,GACpBs7D,MAAOU,EACPl5D,QAAS8yD,YCjCjBqG,GAA4C,CAChDC,OAAQ,cACRC,OAAQ,aACRC,OAAQ,eACRC,MAAO,YACPC,SAAU,aACVC,OAAQ,WACRC,QAAS,YACTC,QAAS,gBACTC,MAAO,aAUHC,GAAmC,GAEzC,IAAIC,GACAC,GACAC,GAuKJ,UAAeryD,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IAAuBY,EAAAA,EAAAA,IAAKZ,EAAQ,CAAC,kBADpBD,EArK2B,EAC7CuB,UAAAA,EAAW+yD,cAAAA,EAAetD,aAAAA,MAG1B,MAAM1xC,GAAepY,EAAAA,EAAAA,IAAuB,MAEtCu0D,GAAYv0D,EAAAA,EAAAA,IAAuB,OAElCw0D,EAAYC,IAAiBn3D,EAAAA,EAAAA,OAC7B6vD,EAAQuH,IAAap3D,EAAAA,EAAAA,OACrBq3D,EAAqBC,IAA0Bt3D,EAAAA,EAAAA,IAAS,IAEvDgjC,QAASnC,IAAwBqC,EAAAA,GAAAA,IAAwB,CAC/DC,QAASroB,EACTgrC,WAtB0B,MAuBxByR,IACFA,EAAQv3B,SAASw3B,IACf,MAAM,GAAEt9D,GAAOs9D,EAAMxtD,OACrB,IAAK9P,IAAOA,EAAG8zB,WAAW,mBACxB,OAGF,MAAMpW,EAAQ7N,OAAO7P,EAAG+nB,QAAQ,kBAAmB,KACnD40C,GAAsBj/C,GAAS4/C,EAAM12B,kBAGvC,MAAM22B,EAA0BZ,GAC7Bn7C,KAAI,CAAColB,EAAgBlpB,KAAjB,CAA8BA,MAAAA,EAAOkpB,eAAAA,MACzChnB,QAAO,EAAGgnB,eAAAA,KAAqBA,IAE7B22B,EAAwBr8D,QAI7Bk8D,EAAuBG,EAAwBp4D,KAAKkC,MAAMk2D,EAAwBr8D,OAAS,IAAIwc,WAGjGmT,EAAAA,GAAAA,GAAoBksC,EAAU/zD,SAAUnE,EAAAA,KAGxCkB,EAAAA,EAAAA,KAAU,KACR,IAAKi3D,EACH,OAGF,MAAM77C,EAAS47C,EAAU/zD,QACzB,IAAKmY,EACH,OAGF,MAAMq8C,EA3DkB,GA2DRL,EAA4Ch8C,EAAOouB,YAAc,EAAIkuB,IAErFC,EAAAA,GAAAA,GAA2Bv8C,EAAQq8C,KAClC,CAACR,EAAYG,IAEhB,MAAM36D,GAAOC,EAAAA,EAAAA,KAEPk7D,GAAgBr5D,EAAAA,EAAAA,KAAQ,KAC5B,IAAK04D,EACH,OAAOjpC,GAAAA,EAET,MAAM6pC,EAAkB,IAAIZ,GAS5B,OARI1K,MAAAA,GAAAA,EAAcpxD,QAChB08D,EAAgBC,QAAQ,CACtB79D,GAAI,SACJ6e,KAAMrc,EAAK,kBACXmzD,OAAQrD,IAILsL,IACN,CAACZ,EAAYx6D,EAAM8vD,KAGtBvsD,EAAAA,EAAAA,KAAU,KACR4C,YAAW,KACT,MAAMm1D,EAAO,KACXb,EAAcH,GAAUE,YAExBE,EAAUJ,GAAUnH,SAGlBmH,GACFgB,IAuERhvB,iBAQE,OAPK8tB,KACHA,GAAmB,mCACnBC,UAAsBD,IAAkBmB,QAExCjB,IAAYkB,EAAAA,GAAAA,IAAgBnB,KAGvBD,GA7EDqB,GACGv+B,KAAKo+B,KAnGa,OAsGxB,IAEH,MAAMI,GAAiB37D,EAAAA,EAAAA,KAAamb,IAClC0/C,EAAuB1/C,GACvB,MAAMygD,EAAax/D,SAASkd,eAAgB,kBAAiB6B,MAC7D6yC,EAAAA,GAAAA,GAAiB3vC,EAAa5X,QAAUm1D,EAAY,QAxGnC,GADU,OA0G1B,IAEGC,GAAoB77D,EAAAA,EAAAA,KAAY,CAAC+4D,EAAez8C,KACpD+2C,EAAc0F,EAAOz8C,KACpB,CAAC+2C,IAEEhgC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIwoC,EAAAA,IAmB1CC,GAAqB33D,EAAAA,EAAAA,GAAe,cAAe9D,GAEzD,OAAK8yD,GAAW//B,EASd,0BAAK/yB,UAAWy7D,GACd,0BAAKn0D,IAAK4yD,EAAWl6D,UAAU,qBAAqBO,IAAKZ,EAAKkc,MAAQ,MAAQ,IAC3Ei/C,EAAcn8C,KA9BrB,SAA8Bm6C,EAA6Bj+C,GACzD,MAAMxY,EAAO+2D,GAAkBN,EAAS37D,IAExC,OAAOkF,GACL,mBAACT,EAAA,EAAD,CACE5B,UAAY,sBAAoB6a,IAAUy/C,EAAsB,YAAc,IAC9Ez4D,OAAK,EACL65D,OAAK,EACL55D,MAAM,cACN7B,QAAS,IAAMo7D,EAAexgD,GAC9B9Y,UAAW+2D,EAAS98C,MAEpB,wBAAGhc,UAAWqC,SAoBhB,0BACEiF,IAAKyW,EACL/d,WAAW8D,EAAAA,EAAAA,GAAe,gCAAiCwE,EAAAA,GAAe,eAAiB,kBAE1FwyD,EAAcn8C,KAAI,CAACm6C,EAAUl0C,IAC5B,mBAAC,GAAD,CACEk0C,SAAUA,EACVj+C,MAAO+J,EACPm0C,UAAWjG,EACXhvB,oBAAqBA,EACrB75B,aAAcqwD,GAAuB11C,EAAI,GAAK01C,GAAuB11C,EAAI,EACzEmuC,cAAewI,QAtBrB,0BAAKv7D,UAAWy7D,GACd,mBAACx8C,GAAA,EAAD,WCrKF08C,GAAiB35D,EAAAA,GAA0B,EAAI,GAsDrD,IAAe4F,EAAAA,EAAAA,KAnDkB,EAC/Bi8B,WAAAA,EACA+3B,YAAAA,EACA/gD,MAAAA,EACAipB,oBAAAA,EACA75B,aAAAA,EACA4xD,gBAAAA,EACAC,gBAAAA,MAGA,MAAMx0D,GAAM3B,EAAAA,EAAAA,IAAuB,OAEnCqzD,EAAAA,GAAAA,IAAe1xD,EAAKw8B,GAEpB,MAAM,qBAAE35B,IAAyBE,EAAAA,EAAAA,GAAkBJ,OAAc1I,OAAWA,EAAW,QAEjFw6D,EAAiB/5D,EAAAA,GACnBM,KAAKkC,OAAOuS,EAAAA,EAAAA,MAAiB3Q,MAnBF,IAmBuC41D,EAAAA,EAAsBL,KArB1D,EAuB5Bt4D,EAASf,KAAK42D,KAAKr1B,EAAW/F,MAAQi+B,IAAmBC,EAAAA,EAAsBL,IAErF,OACE,0BACEr0D,IAAKA,EACLnH,IAAK0jC,EAAW1mC,GAChBA,GAAK,eAAc0d,IACnB7a,UAAU,cAEV,wBAAGA,UAAU,mBAAmB6jC,EAAWjkB,OAC3C,0BACE5f,WAAW8D,EAAAA,EAAAA,GAAe,uBAAwBqG,GAElDtM,MAAQ,WAAUwF,QAEjB4G,GAAgB45B,EAAWU,UAAYV,EAAWU,SAAS5lB,KAAKimB,GAC/D,mBAACD,GAAA,EAAD,CACExkC,IAAKykC,EAAQznC,GACbynC,QAASA,EACTxkC,KAAM47D,EAAAA,EACNl4B,oBAAqBA,EACrBm4B,WAAYL,EACZ37D,QAAS47D,EACTzpC,SAAUwS,EACVs3B,cAAiC,aAAlBr4B,EAAW1mC,GAAoB2+D,OAAkBv6D,WChBtE46D,GAAqC,GAmO3C,IAAev0D,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,SACJwmC,EADI,MAEJH,EAFI,OAGJs0B,EAHI,SAIJ+C,GACE19D,EAAO6lC,SAEX,MAAO,CACL83B,eAAgBhD,EAAO90B,SACvB+3B,iBAAkBF,EAAS73B,SAC3BU,gBAAiBC,EACjBq3B,YAAax3B,EAAMC,OACnBw3B,WAAY99D,EAAOqS,SAASC,MAAM40B,uBAGtC,CAACxmC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBACA,qBACA,uBACA,oBACA,mBACA,mBAvBgBZ,EAjO6C,EAC/DuB,UAAAA,EACA47D,YAAAA,EACApT,gBAAAA,EACA6T,eAAAA,EACAC,iBAAAA,EACAC,YAAAA,EACAt3B,gBAAAA,EACAu3B,WAAAA,EACAX,gBAAAA,EACA/1B,gBAAAA,EACA22B,mBAAAA,EACAC,qBAAAA,EACA32B,kBAAAA,EACA42B,iBAAAA,EACA1W,cAAAA,MAGA,MAAMloC,GAAepY,EAAAA,EAAAA,IAAuB,MAEtCu0D,GAAYv0D,EAAAA,EAAAA,IAAuB,OAClCi3D,EAAgBC,IAAqB55D,EAAAA,EAAAA,IAAiB,IAErDgjC,QAASnC,IAAwBqC,EAAAA,GAAAA,IAAwB,CAC/DC,QAASroB,EACTgrC,WA7BkC,MA8BhCyR,IACFA,EAAQv3B,SAASw3B,IACf,MAAM,GAAEt9D,GAAOs9D,EAAMxtD,OACrB,IAAK9P,IAAOA,EAAG8zB,WAAW,gBACxB,OAGF,MAAMpW,EAAQ7N,OAAO7P,EAAG+nB,QAAQ,eAAgB,KAChDi3C,GAAwBthD,GAAS4/C,EAAM12B,kBAGzC,MAAM22B,EAA0ByB,GAC7Bx9C,KAAI,CAAColB,EAAgBlpB,KAAjB,CAA8BA,MAAAA,EAAOkpB,eAAAA,MACzChnB,QAAO,EAAGgnB,eAAAA,KAAqBA,IAE7B22B,EAAwBr8D,QAI7Bw+D,EAAkBnC,EAAwBp4D,KAAKkC,MAAMk2D,EAAwBr8D,OAAS,IAAIwc,WAEpForB,QAASC,IAAiCC,EAAAA,GAAAA,IAAwB,CAAEC,QAAS8zB,IAE/Ev6D,GAAOC,EAAAA,EAAAA,KAEPk9D,EAAiB/zD,QAAQwzD,GAEzBQ,GAAUt7D,EAAAA,EAAAA,KAAQ,IACjB86D,EAIE,CACL,CACEp/D,GAAI,SACJyiB,MAAOjgB,EAAK,kBACZ4kC,SAAU83B,EACVv+B,MAAOu+B,EAAeh+D,QAExB,CACElB,GAAI,WACJyiB,MAAOjgB,EAAK,oBACZ4kC,SAAU+3B,EACVx+B,MAAOw+B,EAAiBj+D,WAEvBk+D,EAAY59C,KAAKxhB,GAAO8nC,EAAgB9nC,KAAK4f,OAAOhU,UAhBhDmoB,GAAAA,GAkBR,CAACqrC,EAAa58D,EAAM08D,EAAgBC,EAAkBr3B,IAEnD+3B,GAAkBv7D,EAAAA,EAAAA,KAAQ,IAC9Bq7D,GAC4D,IAAzDC,EAAQhgD,QAAQkgD,IAAD,uBAASA,EAAI14B,gBAAb,aAAS,EAAclmC,UAAQA,QAChD,CAAC0+D,EAASD,KAEb55D,EAAAA,EAAAA,KAAU,KACJ04D,IACF91B,IACA22B,IACAC,OAED,CAACd,EAAac,EAAsBD,EAAoB32B,KAE3D5iC,EAAAA,EAAAA,KAAU,KACJq5D,MAAAA,GAAAA,EAAal+D,QACf0nC,MAED,CAACw2B,EAAax2B,KAEjB/X,EAAAA,GAAAA,GAAoBksC,EAAU/zD,UAG9BjD,EAAAA,EAAAA,KAAU,KACR,IAAK45D,EACH,OAGF,MAAMx+C,EAAS47C,EAAU/zD,QACzB,IAAKmY,EACH,OAGF,MAAMq8C,EAhHkB,GAgHRiC,GAAwCt+C,EAAOouB,YAAc,EAAIkuB,KAEjFC,EAAAA,GAAAA,GAA2Bv8C,EAAQq8C,KAClC,CAACmC,EAAgBF,IAEpB,MAAMnU,GAAmB/oD,EAAAA,EAAAA,KAAamb,IACpCgiD,EAAkBhiD,GAClB,MAAMqiD,EAAephE,SAASkd,eAAgB,eAAc6B,MAC5D6yC,EAAAA,GAAAA,GAAiB3vC,EAAa5X,QAAU+2D,EAAc,aAAS37D,EAzHpC,OA0H1B,IAEG47D,GAAsBz9D,EAAAA,EAAAA,KAAaklC,IACvCi3B,EAAgBj3B,GAChB+3B,EAAiB,CAAE/3B,QAAAA,MAClB,CAAC+3B,EAAkBd,IAEhBuB,GAAsB19D,EAAAA,EAAAA,KAAaklC,IACvCqhB,EAAc,CAAErhB,QAAAA,MACf,CAACqhB,IAEElzB,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAqD1CoqC,GAAgBv5D,EAAAA,EAAAA,GAAe,gBAAiB9D,GAEtD,OAAK88D,GAAmB/pC,IAAqBiqC,GAAoBxU,EAe/D,0BAAKxoD,UAAWq9D,GACd,0BACE/1D,IAAK4yD,EACLl6D,UAAU,kDAET+8D,EAAQp+C,KAzEf,SAAqBklB,EAAgChpB,GAAe,MAClE,MAAM2pB,EAAY,UAAGX,EAAWU,gBAAd,aAAG,EAAsB,GACrC+4B,GAAkBx5D,EAAAA,EAAAA,GACtB,uCACA+W,IAAU+hD,GAAkB,aAG9B,MAAsB,WAAlB/4B,EAAW1mC,IAAqC,aAAlB0mC,EAAW1mC,IAAqB0mC,EAAWS,eAAiBE,EAE1F,mBAAC5iC,EAAA,EAAD,CACEzB,IAAK0jC,EAAW1mC,GAChB6C,UAAWs9D,EACXv7D,UAAW8hC,EAAWjkB,MACtB/d,OAAK,EACL65D,MAAyB,WAAlB73B,EAAW1mC,IAAqC,aAAlB0mC,EAAW1mC,GAChD2E,MAAM,cACN7B,QAAS,IAAMwoD,EAAiB5tC,IAEb,WAAlBgpB,EAAW1mC,GACV,wBAAG6C,UAAU,gBACO,aAAlB6jC,EAAW1mC,GACb,wBAAG6C,UAAU,kBACX6jC,EAAWY,WACb,mBAAC,GAAD,CACEZ,WAAYA,EACZC,oBAAqBoC,IAGvB,mBAAC,GAAD,CACErC,WAAYA,EACZC,oBAAqBoC,KAO3B,mBAACvB,GAAA,EAAD,CACExkC,IAAK0jC,EAAW1mC,GAChBynC,QAASJ,EACTpkC,KAAMwjC,EAAAA,GACNhkB,MAAOikB,EAAWjkB,MAClB5f,UAAWs9D,EACXx5B,oBAAqBoC,EACrBjmC,QAASwoD,EACTr2B,SAAUvX,QA8Bd,0BACEvT,IAAKyW,EACL/d,WAAW8D,EAAAA,EAAAA,GAAe,kCAAmCwE,EAAAA,GAAe,eAAiB,kBAE5Fy0D,EAAQp+C,KAAI,CAACklB,EAAYjf,IACxB,mBAAC,GAAD,CACEzkB,IAAK0jC,EAAW1mC,GAChB0mC,WAAYA,EACZ+3B,YAAa7yD,QAAQyzD,GAAcZ,GACnC/gD,MAAO+J,EACPkf,oBAAqBA,EACrB75B,aAAc2yD,GAAkBh4C,EAAI,GAAKg4C,GAAkBh4C,EAAI,EAC/Di3C,gBAAiBsB,EACjBrB,gBAAiBsB,QAjCvB,0BAAKp9D,UAAWq9D,GACZ7U,EAEEwU,EACF,0BAAKh9D,UAAU,mBAAf,+BAEA,mBAACif,GAAA,EAAD,MAJA,0BAAKjf,UAAU,mBAAf,sD,+NCxNV,MAiFA,IAAe4H,EAAAA,EAAAA,KAjFiB,EAC9B21D,IAAAA,EAAKz5B,oBAAAA,EAAqBklB,WAAAA,EAAYhpD,UAAAA,EAAWC,QAAAA,MAC7C,QAEJ,MAAMqH,GAAM3B,EAAAA,EAAAA,IAAuB,MAE7ByC,GAAWzC,EAAAA,EAAAA,IAAyB,MAEpC2+B,EAAev7B,QAAO,UAACw0D,EAAIzzB,iBAAL,aAAC,EAAeC,SACtCJ,EAAkB,MAAK4zB,EAAIpgE,KAE3By+D,GADiB53B,EAAAA,GAAAA,IAAkB18B,EAAKw8B,KACPklB,EACjCt0C,GAAiBH,EAAAA,EAAAA,GAAU,GAAEo1B,YAA0BiyB,EAAapnD,EAAAA,GAAAA,SACpEo1B,GAAWC,EAAAA,GAAAA,GAAa,UAAC0zB,EAAIzzB,iBAAL,aAAC,EAAeC,QAAShhC,QAAQ2L,IACzD8oD,GAAYjpD,EAAAA,EAAAA,GAASo1B,GAAiBiyB,EAAapnD,EAAAA,GAAAA,SACnDipD,EAAoB10D,QAAQ6yD,GAAe4B,IAC3C,WAAE1zD,EAAF,kBAAcC,IAAsBC,EAAAA,EAAAA,IAAa,GACjDE,EAAsB0xD,IAAgB9xD,EACtC4zD,EAAe9B,GAAe9xD,GAEpCa,EAAAA,EAAAA,GAAgBvC,EAAU,CAACq1D,IAE3B,MAAM7wC,GAAcltB,EAAAA,EAAAA,KAClB,IAAMO,EAAQ,IACTs9D,EACHntD,QAASotD,KAEX,CAACv9D,EAASs9D,EAAKC,IAGXH,GAAgBv5D,EAAAA,EAAAA,GACpB,YACAy5D,EAAIn3D,OAASm3D,EAAIl6D,QAAUk6D,EAAIn3D,MAAQm3D,EAAIl6D,OAAS,WAAa,aACjEsmC,EACA3pC,GAGF,OACE,0BACEsH,IAAKA,EACLtH,UAAWq9D,EACXnwD,YAAaywD,GAAAA,EACb19D,QAAS2sB,GAER0X,GACC,6BACEh9B,IAAKsiC,EACL5pC,UAAU,YAGVnC,MAAO6/D,EAAe,sBAAmBn8D,IAG5CmT,IAAmBgpD,GAClB,0BACEthE,IAAKsY,EACLnE,IAAI,GACJvQ,UAAU,YAGby9D,GACC,+BACEn2D,IAAKc,EACLsD,UAAQ,EACRE,MAAI,EACJC,OAAK,EACLF,aAAW,EACXiyD,QAAQ,QAEJ7zD,GAEJ,6BAAQ3N,IAAKohE,KAGhBtzD,GACC,mBAACuG,EAAA,EAAD,CAAS3O,MAAO4S,GAAkB4vB,EAAe,QAAU,cCjBnE,IAAe18B,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACQ,CACLm/D,UAAWn/D,EAAOo/D,KAAKC,MAAMD,SAGjC,CAAC1+D,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mBANpCZ,EAjDyC,EAC3DuB,UAAAA,EACA47D,YAAAA,EACAoC,YAAAA,EACAH,UAAAA,EACAI,YAAAA,EACAC,cAAAA,MAGA,MAAMngD,GAAepY,EAAAA,EAAAA,IAAuB,OAG1CsgC,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAASroB,EAAcogD,WAfzB,OAiB5Bj7D,EAAAA,EAAAA,KAAU,KACJ04D,GACFsC,MAED,CAACtC,EAAasC,IAEjB,MAAMnrC,GAAoBC,EAAAA,GAAAA,GAAkB,GAAIC,EAAAA,GAEhD,OACE,0BACE3rB,IAAKyW,EACL/d,WAAW8D,EAAAA,EAAAA,GAAe,YAAa9D,EAAWsI,EAAAA,GAAe,eAAiB,kBAEhF01D,EAEEjrC,GAAqB8qC,GAAaA,EAAUx/D,OAC9Cw/D,EAAUl/C,KAAK4+C,GACb,mBAAC,GAAD,CACEp9D,IAAKo9D,EAAIpgE,GACTogE,IAAKA,EACLz5B,oBAAqBA,EACrBklB,YAAa4S,EACb37D,QAASg+D,MAGXlrC,GAAqB8qC,EACvB,0BAAK79D,UAAU,mBAAf,kBAEA,mBAACif,GAAA,EAAD,MAdA,0BAAKjf,UAAU,mBAAf,kDCnDD,IAAKo+D,I,SAAAA,GAAAA,EAAAA,EAAAA,MAAAA,GAAAA,QAAAA,EAAAA,EAAAA,SAAAA,GAAAA,WAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,KAAAA,GAAAA,KAQL,MAAMC,GAAyB1gE,OAAO8/C,OAAO2gB,IACjDrhD,QAAQlQ,GAA4C,iBAAVA,IAEvCyxD,GAAwB,CAC5B,CAACF,GAAeG,OAAQ,aACxB,CAACH,GAAeI,UAAW,gBAC3B,CAACJ,GAAeK,MAAO,aAkEzB,IAAe72D,EAAAA,EAAAA,KA/DwB,EACrCotB,UAAAA,EAAWS,YAAAA,EAAaipC,eAAAA,EAAgBC,aAAAA,MAExC,MAAMh/D,GAAOC,EAAAA,EAAAA,KAEb,SAASg/D,EAAgBxpC,GACvB,OACE,mBAACxzB,EAAA,EAAD,CACE5B,UAAY,sBAAoBg1B,IAAcI,EAAM,YAAc,IAClEn1B,QAAS,IAAMw1B,EAAYL,GAC3BrzB,UAAWs8D,GAAuBjpC,GAClCvzB,OAAK,EACL65D,OAAK,EACL55D,MAAM,eAEN,wBAAG9B,UAAWs+D,GAAsBlpC,MAK1C,MAAMypC,GAAmBn/D,EAAAA,EAAAA,KAAY,KACnCi/D,EAAa3pC,IAAcopC,GAAeI,SAAW,WAAa,UACjE,CAACxpC,EAAW2pC,IAMf,OACE,0BAAK3+D,UAAU,oBAAoBC,QALrC,SAAyBygC,GACvBA,EAAM18B,mBAIuDzD,IAAKZ,EAAKkc,MAAQ,WAAQta,GACpFyzB,IAAcopC,GAAeG,OAC5B,mBAAC38D,EAAA,EAAD,CACE5B,UAAU,uBACV+B,UAAWizB,IAAcopC,GAAeI,SAAW,kBAAoB,cACvE38D,OAAK,EACL65D,OAAK,EACL55D,MAAM,cACN7B,QAAS4+D,GAET,wBAAG7+D,UAAU,iBAIhB4+D,EAAgBR,GAAeG,OAC/BK,EAAgBR,GAAeI,UAC/BI,EAAgBR,GAAeK,MAE/BzpC,IAAcopC,GAAeG,OAC5B,mBAAC38D,EAAA,EAAD,CACE5B,UAAU,uBACVC,QAASy+D,EACT38D,UAAU,gBACVF,OAAK,EACL65D,OAAK,EACL55D,MAAM,eAEN,wBAAG9B,UAAU,0BCzCvB,IAAI8+D,IAAc,EAElB,MAqLA,IAAel3D,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACQ,CACLqgE,kBAAmBrgE,EAAOqgE,qBAHZtgE,EArL0B,EAC5CkD,OAAAA,EAAQq9D,yBAAAA,EAA0BD,kBAAAA,EAClCthC,OAAAA,EAAQt1B,QAAAA,EACR4qD,cAAAA,EAAe8I,gBAAAA,EAAiBoC,YAAAA,EAChCS,eAAAA,EAAgBC,aAAAA,EAAc/O,eAAAA,MAE9B,MAAO56B,EAAWC,IAAgBhyB,EAAAA,EAAAA,IAAiB,IAC5CwsD,EAAcwP,IAAmBh8D,EAAAA,EAAAA,IAAmB,KAEpDi8D,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAez9D,EAAQwG,OAAS5G,EAAWS,EAAAA,KAClF,aAAEiI,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,EAAQwG,GAAS,GAAO,IAEpF22D,IAAen9D,IAClBm9D,IAAc,IAGhB57D,EAAAA,EAAAA,KAAU,KACRu6B,MACC,CAACA,KAEJz0B,EAAAA,EAAAA,KAAgB,KACd,GAAKhH,EAAAA,GASL,OALIL,IACF7F,SAASkK,KAAKhK,UAAUC,IAAI,iCAC5BH,SAASkK,KAAKhK,UAAUC,IAAI,wBAGvB,KACD0F,IACF09D,EAAAA,EAAAA,KAAQ,KACNvjE,SAASkK,KAAKhK,UAAUiK,OAAO,uBAC/BH,YAAW,KACThK,SAASkK,KAAKhK,UAAUiK,OAAO,mCAxDhB,WA6DtB,CAACtE,IAEJ,MAAM29D,GAAkB35D,EAAAA,EAAAA,IAAO8pD,GAC/B6P,EAAgBn5D,QAAUspD,GAC1BvsD,EAAAA,EAAAA,KAAU,KACHo8D,EAAgBn5D,QAAQ9H,SAI7BihE,EAAgBn5D,QAAQ88B,SAASjnB,IAC/B4zC,EAAe,CAAE6I,MAAOz8C,OAG1BijD,EAAgB,OACf,CAACt9D,EAAQqzB,EAAW46B,IAEvB,MAAM2L,GAAoB77D,EAAAA,EAAAA,KAAY,CAAC+4D,EAAez8C,KACpDijD,GAAiBnM,GACR,IAAIA,EAAQ92C,KAGrB+2C,EAAc0F,KACb,CAAC1F,IAEEjI,GAAeprD,EAAAA,EAAAA,KAAaoN,IAChC3E,IACAw2D,EAAa7xD,KACZ,CAAC3E,EAASw2D,IAEPxB,GAAsBz9D,EAAAA,EAAAA,KAAaklC,IACvCi3B,EAAgBj3B,GAAS,KACxB,CAACi3B,IAEEl8D,GAAOC,EAAAA,EAAAA,MAEP,gBAAE4oD,EAAF,YAAmBwV,GAAgBgB,EAEzC,SAASO,EAAc/jD,EAAmB2hC,GACxC,OAAQnoB,GACN,KAAKopC,GAAeG,MAClB,OACE,mBAAC,GAAD,CACEv+D,UAAU,aACV+yD,cAAewI,IAGrB,KAAK6C,GAAeI,SAClB,OACE,mBAAC,GAAD,CACEx+D,UAAU,aACV47D,cAAapT,GAAkB7mD,IAAW6Z,GAAY2hC,GACtDqL,gBAAiBA,EACjBqT,gBAAiBsB,IAGvB,KAAKiB,GAAeK,KAClB,OACE,mBAAC,GAAD,CACEz+D,UAAU,aACV47D,cAAaoC,GAAcr8D,IAAW6Z,GAAY2hC,GAClD6gB,YAAaA,EACbC,YAAaA,KAYvB,MAAM5oC,EACJ,sCACE,0BAAKr1B,UAAU,kBAAkBC,QANrC,SAAyBygC,GACvBA,EAAM18B,oBAMD86D,IACC,mBAAChjD,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAWiZ,EAAWU,YAAa2oC,GAAuBhgE,QAChFkhE,IAINv9D,EAAAA,IACC,mBAACJ,EAAA,EAAD,CACEC,OAAK,EACL65D,OAAK,EACL55D,MAAM,cACNC,UAAWpC,EAAK,SAChBK,UAAU,sBACVI,KAAK,OACLH,QAASkI,GAET,wBAAGnI,UAAU,gBAGjB,mBAAC,GAAD,CACEg1B,UAAWA,EACXS,YAAaR,EACbypC,eAAgBA,EAChBC,aAAc7T,KAKpB,GAAI9oD,EAAAA,GAAyB,CAC3B,IAAKiI,EACH,OAGF,MAAMjK,GAAY8D,EAAAA,EAAAA,GAChB,yBACAqG,GACC40D,GAAqB,sBAGxB,OACE,mBAAC/T,GAAA,EAAD,KACE,0BAAKhrD,UAAWA,GACbq1B,IAMT,OACE,mBAACqwB,GAAA,EAAD,CACE/jD,OAAQA,EACRQ,UAAU,OACVmjD,UAAU,SACVn9C,QAASA,EACTnI,UAAU,aACVmgD,oBAAqBh4C,EACrBq3D,aAAel3D,EAAAA,QAAkC/G,EAAnB29D,EAC9BO,aAAen3D,EAAAA,QAAkC/G,EAAnB49D,EAC9BO,mBAAoBp3D,EAAAA,IAEnB+sB,O,eCtMP,MAkEA,IAAeztB,EAAAA,EAAAA,KAlEkB,EAC/BjG,OAAAA,EAAQg+D,YAAAA,EAAaX,yBAAAA,EAA0BY,aAAAA,EAAcC,aAAAA,EAAcC,WAAAA,EAAY33D,QAAAA,MAEvF,MAAO+2D,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAez9D,EAAQwG,GAE9DmjC,GAAmB5rC,EAAAA,EAAAA,KAAY,CAACqE,EAAUusD,KAC9C,MAAM,MAAE/kB,GAAUxnC,EAAEkJ,OAEhBs+B,GAASA,EAAMltC,OAAS,GAC1BuhE,EAAa9T,MAAMC,KAAKxgB,GAAQ+kB,KAEjC,CAACsP,IAEEG,GAAoBrgE,EAAAA,EAAAA,KAAY,KACpCioC,GACEmkB,MAAMC,KAAK0F,EAAAA,IAA4BvlD,KAAK,MAC3CnI,GAAMunC,EAAiBvnC,GAAG,OAE5B,CAACunC,IAEE00B,GAAuBtgE,EAAAA,EAAAA,KAAY,KACvCioC,GAAsB,KAAM5jC,GAAMunC,EAAiBvnC,GAAG,OACrD,CAACunC,IAEE3rC,GAAOC,EAAAA,EAAAA,MAEP,eAAEqgE,EAAF,eAAkBC,GAAmBlB,EAE3C,OACE,mBAACtZ,GAAA,EAAD,CACE/jD,OAAQA,EACRw+D,WAAS,EACTh+D,UAAU,QACVmjD,UAAU,SACVn9C,QAASA,EACTnI,UAAU,mBACVmgD,oBAAqBh4C,EACrBq3D,aAAel3D,EAAAA,QAAkC/G,EAAnB29D,EAC9BO,aAAen3D,EAAAA,QAAkC/G,EAAnB49D,EAC9BO,mBAAoBp3D,EAAAA,KAMlB23D,GACA,mBAAC79D,EAAA,EAAD,CAAUpC,UAAU,iBAAiB2M,UAAQ,GAA7C,uDAEDszD,GACC,sCACE,mBAAC79D,EAAA,EAAD,CAAUC,KAAK,QAAQpC,QAAS8/D,GAC7BpgE,EAAK,gCAER,mBAACyC,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAAS+/D,GAAuBrgE,EAAK,oBAGlEugE,GACC,mBAAC99D,EAAA,EAAD,CAAUC,KAAK,OAAOpC,QAAS4/D,GAAelgE,EAAK,SAEpDggE,GACC,mBAACv9D,EAAA,EAAD,CAAUg+D,QAASC,GAAYpgE,QAAS6/D,GAAxC,sBCvCR,IAAel4D,EAAAA,EAAAA,KA1BkB,EAC/B04D,WAAAA,EACArjD,MAAAA,EACAsjD,WAAAA,EACAC,IAAAA,EACAvgE,QAAAA,KAGE,mBAAC2e,GAAA,EAAD,CACEze,IAAKogE,EAAW9V,QAChBzqD,WAAW8D,EAAAA,EAAAA,GAAe,6CAA8Cw8D,GAAc,eACtFziC,WAAS,EACT59B,QAAS,IAAMA,EAAQsgE,GACvBtjD,MAAOA,GAENqjD,GACC,mBAACpgE,EAAA,EAAD,CAAQE,KAAK,QAAQE,KAAMkgE,IAE7B,0BAAKxgE,UAAU,iBACb,2BAAMA,UAAU,SAAhB,IAA0BugE,EAAW9V,SACrC,2BAAMzqD,UAAU,aAAYQ,EAAAA,EAAAA,GAAW+/D,EAAWj3C,kBC4D1D,IAAe1hB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IAAD,CACE2uB,UAAW3uB,EAAO4uB,MAAMpR,SAE1B,CAAC9c,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAJpCZ,EAnEiD,EACnE4uB,UAAAA,EACA1rB,OAAAA,EACAyqB,aAAAA,EACAq0C,YAAAA,EACAxgE,QAAAA,EACAkI,QAAAA,EACAkiD,eAAAA,MAGA,MAAMtsC,GAAepY,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQJ,OAAWA,GAAW,GAEzFm/D,GAAoBhhE,EAAAA,EAAAA,KAAY,EAAGihE,MAAAA,EAAOlW,QAAAA,MAC9C,MAAM+V,EAAMnzC,EAAUszC,GACtBtW,EAAe,CACbI,QAAU,IAAGA,IAAUr+B,GAAgBo0C,EAAO,IAAGA,EAAIlvC,WAAa,KAClEqvC,MAAAA,IAEF1gE,MACC,CAACA,EAASoqD,EAAgBh9B,EAAWjB,IAElCw0C,EAAuBjT,GAAsB,CACjDnyC,SAAU7Z,EACV6c,MAAOiiD,EACPh1C,SAAUi1C,EACVv4D,QAAAA,KAGFjF,EAAAA,EAAAA,KAAU,KACJu9D,IAAgBA,EAAYpiE,QAC9B8J,MAED,CAACs4D,EAAat4D,KAEjBjF,EAAAA,EAAAA,KAAU,KACRoqD,GAAsB,uBAAwBsT,EAAsB7iD,KACnE,CAAC6iD,IAEJ,MAAMC,GAAet0D,EAAAA,EAAAA,GAAYk0D,GAAeA,EAAYpiE,OAASoiE,OAAcl/D,EAAW0I,GACxF62D,EAAmBL,IAAgBA,EAAYpiE,OAASwiE,EAAeJ,EAE7E,IAAKx2D,GAAiB62D,IAAqBA,EAAiBziE,OAC1D,OAGF,MAAM2B,GAAY8D,EAAAA,EAAAA,GAChB,mDACAqG,GAGF,OACE,0BAAKnK,UAAWA,EAAWsH,IAAKyW,GAC7B+iD,GAAoBA,EAAiBniD,KAAI,CAACoiD,EAAgBlmD,IACzD,mBAAC,GAAD,CACE1a,IAAM,GAAE4gE,EAAeJ,SAASI,EAAetW,UAC/C8V,WAAYQ,EACZP,IAAKnzC,EAAU0zC,EAAeJ,OAC9BL,YAAU,EACVrgE,QAASygE,EACTzjD,MAAO2jD,IAAyB/lD,WClC1C,IAAejT,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,SAClB8C,GACA,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,oBAFpCZ,EApCiC,EACnDkD,OAAAA,EAAQ8+D,YAAAA,EAAat4D,QAAAA,EAASkiD,eAAAA,MAE9B,MAAO6U,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAez9D,EAAQwG,OAAS5G,EAAWS,EAAAA,IAElF4qB,GAAcltB,EAAAA,EAAAA,KAAa6gE,IAC/BlW,EAAe,CACbI,QAAU,IAAG8V,EAAW9V,UACxBkW,MAAOJ,EAAWI,QAEpBx4D,MACC,CAACA,EAASkiD,IAEb,OACE,mBAAC3E,GAAA,EAAD,CACE/jD,OAAQA,EACRQ,UAAU,OACVmjD,UAAU,SACVn9C,QAASA,EACTnI,UAAU,iBACVmgD,oBAAqBh4C,EACrBq3D,aAAel3D,EAAAA,QAAkC/G,EAAnB29D,EAC9BO,aAAen3D,EAAAA,QAAkC/G,EAAnB49D,EAC9BO,mBAAoBp3D,EAAAA,IAEnBm4D,EAAY9hD,KAAK4hD,GAChB,mBAAC,GAAD,CACEpgE,IAAKogE,EAAW9V,QAChB8V,WAAYA,EACZtgE,QAAS2sB,WCwCnB,IAAehlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,SAAE6lC,GAAa7lC,EAAO6lC,SAASy8B,SAErC,MAAO,CAAEz8B,SAAAA,MAEX,CAACnlC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,2BANpCZ,EAzD8C,EAChEkD,OAAAA,EACAk6D,gBAAAA,EACAt3B,SAAAA,EACA08B,sBAAAA,MAGA,MAAMljD,GAAepY,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQJ,OAAWA,GAAW,GACzF2/D,GAAe30D,EAAAA,EAAAA,GAAYg4B,GAAU,GACrC48B,EAAoB58B,GAAY28B,GAGpCj7B,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAASroB,EAAcgrC,WAhBzB,OAkB5B7lD,EAAAA,EAAAA,KAAU,IAAOvB,GAAS6Y,EAAAA,EAAAA,GAAsBymD,QAAyB1/D,GAAY,CAACI,EAAQs/D,IAE9F,MAQMjhE,GAAY8D,EAAAA,EAAAA,GAChB,gDACAqG,IACEg3D,MAAAA,GAAAA,EAAmB9iE,SAAW,UAGlC,OACE,0BACEiJ,IAAKyW,EACL/d,UAAWA,EACXw/D,aAAel3D,EAAAA,QAAkC/G,EAlB5B,KACvBzF,SAASkK,KAAKhK,UAAUC,IAAI,cAkB1BwjE,aAAen3D,EAAAA,QAAkC/G,EAf5B,KACvBzF,SAASkK,KAAKhK,UAAUiK,OAAO,eAgB5BgE,GAAgBk3D,EACfA,EAAkBxiD,KAAKimB,GACrB,mBAACD,GAAA,EAAD,CACExkC,IAAKykC,EAAQznC,GACbynC,QAASA,EACTxkC,KAAM47D,EAAAA,EACNl4B,oBAAqBA,EACrB7jC,QAAS47D,EACTzpC,SAAUwS,MAGZ36B,EACF,mBAACgV,GAAA,EAAD,WACE1d,OC1CV,IAAeqG,EAAAA,EAAAA,KA1BsB,EACnCjG,OAAAA,EAAQy/D,aAAAA,EAAcC,eAAAA,EAAgBl5D,QAAAA,EAASg4C,oBAAAA,MAE/C,MAAO+e,EAAkBC,IAAoBC,EAAAA,GAAAA,GAAez9D,EAAQwG,GAE9DxI,GAAOC,EAAAA,EAAAA,KAEb,OACE,mBAAC8lD,GAAA,EAAD,CACE/jD,OAAQA,EACRw+D,WAAS,EACTh+D,UAAU,QACVmjD,UAAU,SACVtlD,UAAU,iBACVmI,QAASA,EACTg4C,oBAAqBA,EACrBqf,aAAel3D,EAAAA,QAAkC/G,EAAnB29D,EAC9BO,aAAen3D,EAAAA,QAAkC/G,EAAnB49D,EAC9BO,mBAAoBp3D,EAAAA,IAEnB84D,GAAgB,mBAACh/D,EAAA,EAAD,CAAUC,KAAK,OAAOpC,QAASmhE,GAAezhE,EAAK,qBACnE0hE,GAAkB,mBAACj/D,EAAA,EAAD,CAAUC,KAAK,WAAWpC,QAASohE,GAAiB1hE,EAAK,wB,qCCkBlF,MAsEA,IAAeiI,EAAAA,EAAAA,KAtEoB,EACjCjG,OAAAA,EACAmxD,OAAAA,EACA3qD,QAAAA,EACA4qD,cAAAA,EACAnD,eAAAA,MAGA,MAAM7xC,GAAepY,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQJ,OAAWA,GAAW,GACzF+/D,GAAsBC,EAAAA,GAAAA,GAAuBzO,EAAOz0D,OAASy0D,OAASvxD,EAhDvD,MAgDqF,GAEpGigE,GAAoB9hE,EAAAA,EAAAA,KAAa+4D,IACrC1F,EAAc0F,EAAMC,QACpB9I,EAAe,CAAE6I,MAAOA,EAAMt7D,OAC7B,CAACyyD,EAAgBmD,IAEdnmC,GAAcltB,EAAAA,EAAAA,KAAY,CAACg5D,EAAgBv7D,KAC/C41D,EAAc2F,GACd9I,EAAe,CAAE6I,MAAOt7D,MACvB,CAACyyD,EAAgBmD,IAEd0O,EAAgB9T,GAAsB,CAC1CnyC,SAAU7Z,EACVmrD,cAAc,EACdtuC,MAAOs0C,EACPrnC,SAAU+1C,EACVr5D,QAAAA,KAGFjF,EAAAA,EAAAA,KAAU,MAlEZ,SAAwB2X,EAAekD,GACrC,MAAMlhB,EAAYkhB,EAAa5X,QAC/B,IAAKtJ,EACH,OAGF,MAAM,eAAEqwD,EAAF,YAAkBD,GAAgBR,GACtC5vD,EACA,eAZoB,GAcpB,GACA,GACA,GAGF,IAAKowD,EAAY5uD,SAAW4uD,EAAYpyC,GACtC,OAEF,MAAM2yC,EAAQN,EAAe,GAC7B,IAAKA,EAAe9vD,SAASyd,IACvBA,IAAU2yC,IAAUC,GAAe5wD,EAAWowD,EAAYO,IAAQ,GAAQ,CAC9E,MACMmN,EAAuB,UADZ9/C,EAAQqyC,EAAeA,EAAe7uD,OAAS,GAAK,QAAU,OAxBxD,GAyBgBwc,EAA6B,GAEpEggD,EAAAA,GAAAA,GAA2Bh+D,EAAW89D,IA2CtC+G,CAAeD,EAAe1jD,KAC7B,CAAC0jD,IAEJ,MAQMzhE,GAAY8D,EAAAA,EAAAA,GAChB,gDACAqG,GAGF,OACE,0BACE7C,IAAKyW,EACL/d,UAAWA,EACXw/D,aAAel3D,EAAAA,QAAkC/G,EAjB5B,KACvBzF,SAASkK,KAAKhK,UAAUC,IAAI,cAiB1BwjE,aAAen3D,EAAAA,QAAkC/G,EAd5B,KACvBzF,SAASkK,KAAKhK,UAAUiK,OAAO,eAe5BgE,GAAgBq3D,EACfA,EAAW3iD,KAAI,CAAC85C,EAAO59C,IACrB,mBAAC,GAAD,CACE1a,IAAKs4D,EAAMt7D,GACXs7D,MAAOA,EACPx7C,MAAOwkD,IAAkB5mD,EACzB5a,QAAS2sB,MAGX3iB,EACF,mBAACgV,GAAA,EAAD,WACE1d,MC5DV,IAAeqG,EAAAA,EAAAA,KAxCkB,EAC/BgY,MAAAA,EACA0J,YAAAA,EACAwgB,UAAAA,EACA63B,SAAAA,EACA1kD,MAAAA,EACA9S,qBAAAA,EAAuB,GACvBlK,QAAAA,MAEA,IAAIo1B,EAA8B,GAElC,MAAMusC,GAAmBrtD,EAAAA,EAAAA,GAASu1B,EAAa,eAAcA,EAAUjiC,WAAQtG,GAW/E,OAVAogE,EAAWA,GAAYC,GAGrBvsC,EACE,0BAAKj5B,IAAKulE,EAAU3hE,UAAWmK,EAAsBoG,IAAI,GAAGsxD,SAAS,QAAQrxD,UAAU,UAEhFoP,IACTyV,GAAUgP,EAAAA,GAAAA,IAAgBzkB,EAAO,IAIjC,mBAAChB,GAAA,EAAD,CACE3B,MAAOA,EACPjd,UAAU,iCACVkN,YAAaywD,GAAAA,EACb19D,QAASA,GAET,2BAAMD,UAAU,SACM,iBAAZq1B,GAAuB70B,EAAAA,EAAAA,GAAW60B,GAAWA,GAEvD,0BAAKr1B,UAAU,iBACZ4f,GAAU,0BAAK5f,UAAU,SAAS4f,GAClC0J,GAAgB,0BAAKtpB,UAAU,eAAespB,QCkBvD,IAAe1hB,EAAAA,EAAAA,KAvDmB,EAChCqV,MAAAA,EAAO6kD,aAAAA,EAAcC,aAAAA,EAAc9hE,QAAAA,MAC/B,MACJ,IAAIkS,EACA23B,EACAk4B,EAEA,UAAWD,IACb5vD,EAAQ4vD,EAAa5vD,OAGnB,cAAe4vD,IACjBj4B,EAAYi4B,EAAaj4B,WAEvB,iBAAkBi4B,GAAgBD,IACpCE,EAAeD,EAAaC,cAG9B,MAAMJ,GAAmBrtD,EAAAA,EAAAA,GAASytD,EAAgB,eAAcA,EAAan6D,WAAQtG,GAC/E8sB,GAAe9Z,EAAAA,EAAAA,GAASpC,GAAU,QAAOA,EAAMhV,cAC/C,kBACJ6sC,EADI,sBACe7F,EADf,qBACsCh6B,IACxCi6B,EAAAA,GAAAA,GAAsB/V,EAAc,QAElCzB,GAAcltB,EAAAA,EAAAA,KAAY,KAC9BO,EAAQ8hE,KACP,CAACA,EAAc9hE,IAEA,QAAlB,GAAI6hE,EACF,OACE,0BAAK9hE,UAAU,kCAAkCC,QAAS2sB,GACvDod,GACC,0BAAK5tC,KAAK,UAAC+V,SAAD,iBAAC,EAAO23B,iBAAR,aAAC,EAAkBC,UAAY63B,EAAkBrxD,IAAI,KAEhE4zB,GACC,0BAAK/nC,IAAKiyB,EAAcruB,UAAY,GAAEmK,eAAmCoG,IAAI,MAMrF,MAAM,MAAEqP,EAAF,YAAS0J,GAAgBy4C,EAE/B,OACE,mBAAC,GAAD,CACE9kD,MAAOA,EACP0kD,SAAUx9B,EAAwB9V,GAAyB,QAAT,EAAAyb,SAAA,eAAWC,UAAW63B,EACxEz3D,qBAAsBg6B,EAAwBh6B,OAAuB5I,EACrEqe,MAAOA,EACP0J,YAAaA,EACbrpB,QAAS2sB,OCtCf,IAAehlB,EAAAA,EAAAA,KApBqB,EAAGqV,MAAAA,EAAO8kD,aAAAA,EAAc9hE,QAAAA,MAC1D,MAAM,MACJ2f,EADI,IACG/X,EADH,YACQyhB,EADR,aACqB04C,GACvBD,EAEEn1C,GAAcltB,EAAAA,EAAAA,KAAY,KAC9BO,EAAQ8hE,KACP,CAACA,EAAc9hE,IAElB,OACE,mBAAC,GAAD,CACEgd,MAAOA,EACP6sB,UAAWk4B,EACXpiD,MAAOA,GAAS/X,EAChByhB,YAAaA,EACbrpB,QAAS2sB,OCYf,IAAehlB,EAAAA,EAAAA,KAvBiB,EAC9Bm6D,aAAAA,EAAcj+B,oBAAAA,EAAqB7jC,QAAAA,MAEnC,MAAM,IAAEs9D,GAAQwE,EAEVn1C,GAAcltB,EAAAA,EAAAA,KAAY,KAC9BO,EAAQ8hE,KACP,CAACA,EAAc9hE,IAElB,GAAKs9D,EAIL,OACE,mBAAC,GAAD,CACEA,IAAKA,EACLz5B,oBAAqBA,EACrB9jC,UAAU,sBACVC,QAAS2sB,OCCf,IAAehlB,EAAAA,EAAAA,KApBqB,EAAGm6D,aAAAA,EAAcj+B,oBAAAA,EAAqB7jC,QAAAA,MACxE,MAAM,QAAE2kC,GAAYm9B,EAEpB,GAAKn9B,EAIL,OACE,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTxkC,KAAM6hE,EAAAA,GACNn+B,oBAAqBA,EACrBlkB,MAAOglB,EAAQ6zB,MACfz4D,UAAU,sBACVC,QAASA,EACTmyB,SAAU2vC,OCAV/0C,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAK,GAwKjD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,SAClB8C,GACA,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,WAAY,WAAY,yBAHRZ,EAxJmC,EACrDkD,OAAAA,EACAg/D,MAAAA,EACAuB,UAAAA,EACAC,iBAAAA,EACAC,SAAAA,EACAC,SAAAA,EACAl6D,QAAAA,EACAylB,SAAAA,EACA00C,SAAAA,EACAC,eAAAA,MAGA,MAAMxkD,GAAepY,EAAAA,EAAAA,IAAuB,OACtC,aAAEsE,EAAF,qBAAgBE,IAAyBE,EAAAA,EAAAA,GAAkB1I,OAAQJ,OAAWA,GAAW,IAE7F0kC,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAC1BC,QAASroB,EACTogD,WApC6B,IAqC7BnV,YAAarnD,IAGTivB,GAAiBlxB,EAAAA,EAAAA,KAAY,EAAGkb,UAAAA,MAChCA,IAAciW,EAAAA,GAAAA,WAChB7D,GAAaq1C,KAEd,CAACA,IAEEZ,EAAgB9T,GAAsB,CAC1CnyC,SAAU7Z,EACVisD,6BAA8BsU,EAC9BrU,kBAAmBqU,EACnB1jD,MAAO2jD,EACP12C,SAAU82C,EACVp6D,QAAAA,KAGFjF,EAAAA,EAAAA,KAAU,KACRoqD,GAAsB,uBAAwBmU,EAAe1jD,KAC5D,CAAC0jD,IAEJ,MAAMe,GAAe9iE,EAAAA,EAAAA,KAAY,KAC/BkuB,EAAS,CAAEzwB,GAAIwjE,IACf2B,EAAS,CAAE3B,MAAAA,EAAOx4B,MAAOi6B,EAAUK,eAClC,CAAC9B,EAAO/yC,EAAU00C,EAAUF,IAEzBM,GAAuBn2D,EAAAA,EAAAA,GAC3B41D,MAAAA,GAAAA,EAAkB9jE,OACd8jE,OACA5gE,EACJ0I,GAEI04D,EAA2BR,IAAqBA,EAAiB9jE,OACnEqkE,EACAP,EAEJ,IAAKl4D,IAAiB04D,IAA8BA,EAAyBtkE,SAAW+jE,EACtF,OAGF,MAAMpiE,GAAY8D,EAAAA,EAAAA,GAChB,oCACAwE,EAAAA,GAAe,eAAiB,gBAChC45D,GAAa,UACb/3D,GAuEF,OACE,mBAACoU,GAAA,EAAD,CACEjX,IAAKyW,EACL/d,UAAWA,EACXwe,MAAOmkD,EACPvvC,aAAa,uBACbpB,YAAU,EACVvT,WAAYmS,EACZgyC,cAAe,KAEdR,GA5ED,mBAACxjD,GAAA,EAAD,CAAUpX,QAAM,EAACxH,UAAU,wBAAwBC,QAASuiE,GAC1D,2BAAMxiE,UAAU,SAASoiE,EAAUx/D,OAMhC+/D,EAA0BhkD,KAAI,CAACkkD,EAAiBhoD,KACrD,OAAQgoD,EAAgB/1D,MACtB,IAAK,MACH,OACE,mBAAC,GAAD,CACE3M,IAAK0iE,EAAgB1lE,GACrB4kE,aAAcc,EACd/+B,oBAAqBA,EACrB7jC,QAASsiE,IAIf,IAAK,QACH,OACE,mBAAC,GAAD,CACEpiE,IAAK0iE,EAAgB1lE,GACrB2kE,aAAcI,EACdH,aAAcc,EACd5iE,QAASsiE,IAIf,IAAK,UACH,OACE,mBAAC,GAAD,CACEpiE,IAAK0iE,EAAgB1lE,GACrB4kE,aAAcc,EACd/+B,oBAAqBA,EACrB7jC,QAASsiE,IAIf,IAAK,QACL,IAAK,OACH,OACE,mBAAC,GAAD,CACEpiE,IAAK0iE,EAAgB1lE,GACrB8f,MAAOwkD,IAAkB5mD,EACzBknD,aAAcc,EACd5iE,QAASsiE,IAGf,IAAK,UACL,IAAK,QACH,OACE,mBAAC,GAAD,CACEpiE,IAAK0iE,EAAgB1lE,GACrB8f,MAAOwkD,IAAkB5mD,EACzBknD,aAAcc,EACd5iE,QAASsiE,IAIf,QACE,gB,eCvHV,MA+GA,IAAe36D,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAC1BmkE,EAAeziE,IAAQkR,EAAAA,EAAAA,IAAmB7S,EAAQ2B,EAAKlD,IAC7D,IAAKkD,IAASyiE,EACZ,MAAO,GAGT,MAAM,MAAEhyC,EAAF,QAASo6B,IAAYC,EAAAA,EAAAA,IAAwBzsD,IAAW,IACxD,WAAEuzC,EAAF,SAAcrgC,GAAas5C,GAAW,GAE5C,MAAO,CACL7qD,KAAAA,EACAyiE,aAAAA,EACAhyC,MAAAA,EACAmhB,WAAAA,EACArgC,SAAAA,MAGJ,CAAClT,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAA2B,kBAnB5DZ,EA/G2C,EAC7DE,OAAAA,EACA+R,SAAAA,EACAvI,QAAAA,EACAqT,SAAAA,EACAnb,KAAAA,EACAyiE,aAAAA,EACAhyC,MAAAA,EACAmhB,WAAAA,EACArgC,SAAAA,EACA05C,wBAAAA,EACA9rD,aAAAA,MAEA,MAAMG,GAAOC,EAAAA,EAAAA,KAEPmjE,GAAethE,EAAAA,EAAAA,KAAQ,KAC3B,KAAKqvB,GAAUlf,GAAaA,EAASvT,QAAWykE,GAC9C,OAAO5xC,GAAAA,EAGT,MAAMg6B,EAAUt5C,EAAS+M,KAAKxhB,IAC5B,MAAMY,EAAU+kE,EAAa3lE,GAC7B,IAAKY,EACH,OAGF,MAAMilE,EAAajlE,EAAQkT,UAAWjS,EAAAA,EAAAA,KAAWikE,EAAAA,EAAAA,MAAallE,EAAQkT,eAAY1P,EAElF,IAAI2hE,EACJ,GAAI7iE,IAAQ6nB,EAAAA,EAAAA,IAAc7nB,GACxB6iE,EAAa7iE,OACR,GAAItC,EAAQolE,YAAa,CAC9B,MAAM,cAAEC,EAAF,WAAiB7oD,GAAexc,EAAQolE,YAC9CD,EAAaE,GAAiB7oD,GAAatb,EAAAA,EAAAA,KAAWgkE,EAAAA,EAAAA,MAAa1oD,QAAchZ,OAEjF2hE,EAAanlE,EAAQkT,UAAWhS,EAAAA,EAAAA,KAAWgkE,EAAAA,EAAAA,MAAallE,EAAQkT,eAAY1P,EAG9E,MAAO,CACLxD,QAAAA,EACAilE,WAAAA,EACAE,WAAAA,EACAjjE,QAAS,IAAMT,EAAa,CAAEb,OAAAA,EAAQ+R,SAAAA,EAAU9R,UAAWzB,QAE5D4f,OAAOhU,SAEV,OAAOs6D,EAAAA,EAAAA,IAAQnY,GAAS,EAAGntD,QAAAA,KAAcA,EAAQ2C,MAAM,UACtD,CAAC/B,EAAQ+R,EAAUlR,EAAcoS,EAAUvR,EAAMyiE,EAAchyC,KA2BlEnV,EAAAA,EAAAA,IAAeH,EAAUrT,GAGzB,MAAM4V,GAAepY,EAAAA,EAAAA,IAAuB,MACtCqV,GAAgBgD,EAAAA,GAAAA,GAA0BD,GAAc,GAAOlD,IACnE,MAAMyoD,EAAcP,MAAAA,OAAH,EAAGA,GAA0B,IAAXloD,EAAe,EAAIA,GAClDyoD,GACFA,EAAYrjE,YAEb,oBAAoB,GAEvB,OACE,mBAACse,GAAA,EAAD,CACEve,UAAU,4BACVwe,MAAOukD,EACPQ,iBAAkB,EAClB9kD,WAAY6sC,EACZt5B,YAAU,EACV7T,UAAWnD,EACX1T,IAAKyW,GAEL,wBAAG/d,UAAU,cAAcO,IAAI,QAC3BuwB,EAEkB,IAAfmhB,GAAqB8wB,EAAa1kE,OAEpB,IAAf4zC,EACF,kBAEC,GAAG8wB,EAAa1kE,SAAW4zC,GAAc8wB,EAAa1kE,yBAJvDsB,EAAK,yBAFLA,EAAK,gCASRojE,EAAapkD,KAzDS,EACzB5gB,QAAAA,EAASilE,WAAAA,EAAYE,WAAAA,EAAYjjE,QAAAA,MAEjC,MAAM2f,EAAQsjD,GAAaxlD,EAAAA,EAAAA,GAAa/d,EAAMujE,IAAc7xC,EAAAA,EAAAA,IAAgB2xC,GACtEpgE,GAAOmsB,EAAAA,EAAAA,IAAsBpvB,EAAM5B,GAEzC,OACE,mBAAC6gB,GAAA,EAAD,CACE5e,UAAU,gDACVC,QAASA,GAET,mBAACC,EAAA,EAAD,CAAQG,KAAM6iE,EAAY5iE,KAAM0iE,IAChC,0BAAKhjE,UAAU,QACb,0BAAKA,UAAU,SACb,yBAAIO,IAAI,QAAQqf,IAASpf,EAAAA,EAAAA,GAAWof,IACpC,mBAAC4jD,GAAA,EAAD,CAAiBzlE,QAASA,KAE5B,0BAAKiC,UAAU,WAAWO,IAAI,SAC3BC,EAAAA,EAAAA,GAAWoC,EAAM,CAAC,QAAS,aAAc,CAAEosB,UAAW8B,e,eC1FnE,MAqFA,IAAelpB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUgqD,aAAAA,MACF,CACLuU,KAAKxU,EAAAA,EAAAA,IAAiB/pD,EAAQgqD,GAC9B8T,YAAYiH,EAAAA,EAAAA,IAAyB/kE,OAGzC,CAACU,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,eAAgB,sBAPpDZ,EAnFgD,EAClEiqD,aAAAA,EAAc5kB,oBAAAA,EAAqBm5B,IAAAA,EAAKT,WAAAA,EACxC5T,aAAAA,EAAcC,iBAAAA,EAAkB6a,gBAAAA,EAAiBC,cAAAA,MAEjD,MAAMhkE,GAAOC,EAAAA,EAAAA,KACPgkE,EAAU3G,GAAOl0D,QAAQk0D,EAAI31B,eAC7Bu8B,EAAoB96D,QAAQk0D,MAAAA,OAAD,EAACA,EAAK14B,WAEhC8B,EAAaC,EAAWC,IAAcpjB,EAAAA,GAAAA,MAE7C2gD,EAAAA,GAAAA,IAAY,KACVH,EAAct9B,KACb,CAACA,EAAas9B,IAEjB,MAAMxC,GAAoB1/D,EAAAA,EAAAA,KAAQ,KAChC,IAAKw7D,EACH,MAAO,GAGT,MAAM8G,GAAmB9G,EAAI+G,QAAU,IAAIrlD,KAAI,EAAGxhB,GAAAA,KAASA,IACrD8mE,EAAgBhH,EAAI14B,SAAW04B,EAAI14B,SAASxnB,QAAO,EAAG5f,GAAAA,MAAU4mE,EAAgB3mE,SAASD,KAAO,GAEtG,MAAO,IAAK8/D,EAAI+G,QAAU,MAAQC,GAAevvC,MAAM,EAxB/B,KAyBvB,CAACuoC,KAEJ/5D,EAAAA,EAAAA,KAAU,MAEH2gE,GAAqB1C,EAAkB9iE,OA7BpB,GA8BtBuqD,EAAa,CAAEF,aAAAA,MAEhB,CAACmb,EAAmB1C,EAAkB9iE,OAAQuqD,EAAcF,IAE/D,MAAMwb,GAAiBxkE,EAAAA,EAAAA,KAAY,KACjCmpD,EAAiB,CAAEH,aAAAA,MAClB,CAACG,EAAkBH,IAEtB,IAAKuU,EACH,OAGF,MAAMkH,EAAoBhD,EAAkB9iE,OAAS,EAErD,OACE,0BAAK8B,IAAK88D,EAAI9/D,GAAI6C,UAAU,cAAcO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAClE,0BAAKvB,UAAU,sBACb,0BAAKA,UAAU,iBACb,yBAAIA,UAAU,QAAQO,IAAI,QAAQ08D,EAAIr9C,OACtC,wBAAG5f,UAAU,QAAQO,IAAI,QAAQZ,EAAK,WAAYs9D,EAAIn/B,MAAO,OAE/D,mBAACl8B,EAAA,EAAD,CACE5B,UAAW4jE,EAAU,gBAAariE,EAClCO,MAAM,UACN1B,KAAK,OACLs9B,MAAI,EACJC,OAAK,EACL19B,QAASikE,GAERvkE,EAAKikE,EAAU,qBAAuB,sBAG3C,0BAAK5jE,UAAU,qBACXmkE,GAAqB,mBAAC1zD,EAAA,EAAD,MACtB0zD,GAAqBhD,EAAkBxiD,KAAKimB,GAC3C,mBAACD,GAAA,EAAD,CACEC,QAASA,EACTxkC,KAAMgkE,EAAAA,GACNtgC,oBAAqBA,EACrBm4B,WAAYO,GAAcn2B,GAAeq9B,EACzCzjE,QAASqmC,OAId69B,GACC,mBAAC,KAAD,CACExiE,OAAQ0kC,EACRoB,YAAa05B,EAAkB,GAC/Bh5D,QAASo+B,SC/EbvZ,IAAevpB,EAAAA,EAAAA,KAAUwpB,GAAOA,KAAM,KAAO,GA0EnD,IAAerlB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAMgT,GAAgB2yD,EAAAA,EAAAA,IAA2B3lE,IAC3C,MAAEoyB,EAAF,UAASitB,GAAcrsC,GAAiB,IACxC,SAAE4yD,GAAa5lE,EAAO6lC,SAE5B,MAAO,CACLzT,MAAAA,EACAyzC,YAAaD,EAASt/B,OACtB+Y,UAAAA,MAGJ,CAAC3+C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,0BAZpCZ,EAxE6C,EAC/D0J,QAAAA,EACAqT,SAAAA,EACAsV,MAAAA,EACAyzC,YAAAA,EACAxmB,UAAAA,EACAymB,qBAAAA,MAGA,MAAMzmD,GAAepY,EAAAA,EAAAA,IAAuB,MAEtChG,GAAOC,EAAAA,EAAAA,MAENymC,EAAao+B,IAAkBxhE,EAAAA,EAAAA,KAAS,IAG7CgjC,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAASroB,EAAcgrC,WArBzB,MAqE5B,OA5CA7lD,EAAAA,EAAAA,KAAU,KACR8pB,IAAa,KACXw3C,WAIJ7oD,EAAAA,EAAAA,IAAeH,EAAUrT,GAuCvB,0BAAKb,IAAKyW,EAAc/d,UAAU,8BAA8BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GArC5F,WACE,QAAcA,IAAVuvB,EAIJ,OAAKA,GAASyzC,EACLA,EAAY5lD,KAAKxhB,GACtB,mBAAC,GAAD,CACEgD,IAAKhD,EACLurD,aAAcvrD,EACd2mC,oBAAqBA,EACrB4/B,gBAAiBr9B,EACjBs9B,cAAec,MAKjB1mB,EACGA,EAAU1/C,OAIR0/C,EAAUp/B,KAAKxhB,GACpB,mBAAC,GAAD,CACEgD,IAAKhD,EACLurD,aAAcvrD,EACd2mC,oBAAqBA,EACrB4/B,gBAAiBr9B,EACjBs9B,cAAec,MATV,wBAAGzkE,UAAU,cAAcO,IAAI,QAA/B,kBAcJ,mBAAC0e,GAAA,EAAD,MAKJsgD,QCsBP,IAAe33D,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAMgT,GAAgBgzD,EAAAA,EAAAA,IAAuBhmE,IACvC,MAAEoyB,EAAF,QAASo6B,GAAYx5C,GAAiB,IACtC,OAAE/S,IAAWkoB,EAAAA,EAAAA,IAAyBnoB,IAAW,GACjD2B,EAAO1B,GAASM,EAAAA,EAAAA,IAAWP,EAAQC,QAAU4C,EAGnD,MAAO,CACLuvB,MAAAA,EACAo6B,QAAAA,EACA7qD,KAAAA,EACAskE,cANoBtkE,GAAOukE,EAAAA,EAAAA,IAAoBlmE,EAAQ2B,QAAQkB,MASnE,CAACnC,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,iBAAkB,cAAe,uBAfrEZ,EAhFyC,EAC3D0J,QAAAA,EACAqT,SAAAA,EACAsV,MAAAA,EACAo6B,QAAAA,EACA7qD,KAAAA,EACAskE,cAAAA,EACAE,eAAAA,EACA/b,YAAAA,EACAgc,kBAAAA,MAGA,MAAM/mD,GAAepY,EAAAA,EAAAA,IAAuB,OAG1CsgC,QAASnC,IACPqC,EAAAA,GAAAA,IAAwB,CAAEC,QAASroB,EAAcogD,WAlBzB,OAoBtB,YAAEH,IAAgBzV,EAAAA,EAAAA,IAA4BloD,EAAMskE,GAEpDI,GAAiBrlE,EAAAA,EAAAA,KAAa69D,IAC9BS,GACFlV,EAAY,CAAEyU,IAAAA,IAGZj1D,EAAAA,IACFw8D,EAAkB,CAAEh0C,WAAOvvB,MAE5B,CAACy8D,EAAalV,EAAagc,IAExBnlE,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,GA6BzB,MAAM68D,EAAaj8D,aAAkBxH,IAAVuvB,GAAuBo6B,GAAWA,EAAQ7sD,QAErE,OACE,0BAAK2B,UAAU,YAAYO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACnD,mBAACgd,GAAA,EAAD,CACEjX,IAAKyW,EACL/d,WAAW8D,EAAAA,EAAAA,GAAe,8BAA+BkhE,GAAc,QACvExmD,MAAO0sC,EACP93B,aAAa,aACbmwC,iBAzEkB,GA0ElBvxC,YAAU,EACVvT,WAAYomD,GAtClB,WACE,QAActjE,IAAVuvB,EAIJ,OAAKo6B,EAMAA,EAAQ7sD,OAMN6sD,EAAQvsC,KAAK4+C,GAClB,mBAAC,GAAD,CACEp9D,IAAKo9D,EAAIpgE,GACTogE,IAAKA,EACLz5B,oBAAqBA,EACrB7jC,QAAS8kE,MATT,wBAAG/kE,UAAU,cAAcO,IAAI,QAAQZ,EAAK,gBAN5C,mBAACsf,GAAA,EAAD,MAiCCsgD,SCcT,IAAe33D,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUumE,OAAAA,MACT,MAAM,OAAEC,EAAF,QAAUC,GAAYzmE,EAAO0mE,YAEnC,MAAO,CACLF,OAAQA,MAAAA,OAAF,EAAEA,EAASD,EAAOthC,QACxB0hC,QAASF,MAAAA,OAAD,EAACA,EAAUF,EAAOthC,UAAY,OAG1C,CAACjlC,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,wBAAyB,WAAY,sBATtEZ,EA5FiD,EACnE4B,KAAAA,EACAtC,QAAAA,EACAknE,OAAAA,EACAK,WAAAA,EACAC,YAAAA,EACAL,OAAAA,EACAG,OAAAA,EACAG,sBAAAA,EACA53C,SAAAA,EACA63C,iBAAAA,MAEA,MAAMC,GAAkBn5D,EAAAA,EAAAA,GAAoB+4D,EAAWK,cAChDhzC,EAAWizC,IAAgB3iE,EAAAA,EAAAA,KAAkB,GAC9C4iE,EAAkB98D,QAAQm8D,IAC1B,OAAEvhC,EAAF,KAAU/gC,GAASqiE,EACnBtlE,GAAOC,EAAAA,EAAAA,MAEbsD,EAAAA,EAAAA,KAAU,KAEH2iE,GAAmBH,IAAoBJ,EAAWK,aACrDH,EAAsB,CACpBnlE,KAAAA,EAAMzB,UAAWb,EAAQZ,GAAIwmC,OAAAA,EAAQ0hC,OAAAA,EAAQS,MAzB/B,EAyBqDC,mBAAmB,MAIzF,CAACT,EAAWK,YAAaE,IAE5B,MAAMG,GAAsBtmE,EAAAA,EAAAA,KAAY,KACtCkmE,GAAa,GACbJ,EAAsB,CACpBnlE,KAAAA,EAAMzB,UAAWb,EAAQZ,GAAIwmC,OAAAA,EAAQ0hC,OAAAA,EAAQS,MAjC3B,OAmCnB,CAACzlE,EAAMmlE,EAAuBznE,EAAQZ,GAAIkoE,EAAQ1hC,KAErDzgC,EAAAA,EAAAA,KAAU,KACR0iE,GAAa,KACZ,CAACV,IAEJ,MAAMe,GAAoBvmE,EAAAA,EAAAA,KAAavC,IACrCywB,EAAS,CAAEzwB,GAAAA,IACXsoE,MACC,CAACA,EAAkB73C,IAetB,OACE,0BAAK5tB,UAAU,qBACb,0BAAKA,UAAU,eACZklE,EACGA,EAAOvmD,KAAKxhB,GACZ,mBAACyhB,GAAA,EAAD,CACEze,IAAKhD,EACL6C,UAAU,sBACVC,QAAS,IAAMgmE,EAAkB9oE,IAEjC,mBAAC0hB,GAAA,EAAD,CACEiO,WAAW,OACX/N,OAAQ5hB,EACRy6B,eAAa,EACb2gC,kBAAgB,OAIpB,mBAACt5C,GAAA,EAAD,MACHimD,GAhCP,WACE,MAAMgB,EAAkBZ,EAAWK,YAAcT,EAAQ7mE,OAEzD,OAAOinE,EAAWK,YAlDA,GAkD+BO,EAAkB,GACjE,mBAAC,GAAD,CACEpoC,MAAOooC,EACPnoC,SAAS,QACTpL,UAAWA,EACX1yB,QAAS+lE,IAwBEG,IAEb,0BAAKnmE,UAAU,cAAcO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACrD,2BAAMvB,UAAU,eAAeO,IAAI,QAAQqC,GAC3C,2BAAM5C,UAAU,iBAAiBO,IAAKZ,EAAKkc,MAAQ,YAASta,IAQ7CsL,EAPEy4D,EAAWK,aAOES,EAPWb,GAQhC,GAAM14D,EAAQu5D,EAAS,KAAK1hE,UAAY,GATjD,OAQR,IAAuBmI,EAAeu5D,MC7DtC,IAAex+D,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MACE0mE,aAAa,OAAEzmE,EAAF,UAAUC,GADnB,aAEJsvB,GACExvB,EAEJ,OAAKC,GAAWC,EAOT,CACLyB,MAJWpB,EAAAA,EAAAA,IAAWP,EAAQC,GAK9BZ,SAJcmB,EAAAA,EAAAA,IAAkBR,EAAQC,EAAQC,GAKhDsvB,aAAAA,GATO,KAROzvB,EAzC2B,EAC7C0J,QAAAA,EACAqT,SAAAA,EACAnb,KAAAA,EACAtC,QAAAA,EACAmwB,aAAAA,MAEA,MAAMvuB,GAAOC,EAAAA,EAAAA,KAGb,IAFA+b,EAAAA,EAAAA,IAAeH,EAAUrT,IAEpBpK,IAAYsC,EACf,OAAO,mBAAC4e,GAAA,EAAD,MAGT,MAAM,QAAEm2C,EAAF,QAAWlK,IAAYmb,EAAAA,EAAAA,IAAetoE,GAC5C,IAAKmtD,EAAQA,QACX,OAGF,MAAMob,GAAkBC,EAAAA,EAAAA,IAAqBrb,EAAQA,QAAS,UAE9D,OACE,0BAAKlrD,UAAU,cAAcO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACrD,yBAAIvB,UAAU,gBAAgBO,IAAI,SAAQC,EAAAA,EAAAA,GAAW40D,EAAQ3B,SAAU,CAAC,QAAS,QACjF,0BAAKzzD,UAAU,mCACZkuB,GAAgBknC,EAAQC,QAAQ12C,KAAKsmD,GACpC,mBAAC,GAAD,CACE9kE,IAAM,GAAEpC,EAAQZ,MAAM8nE,EAAOthC,SAC7BtjC,KAAMA,EACNtC,QAASA,EACTknE,OAAQA,EACRK,WAAYgB,EAAgBrB,EAAOthC,QACnC4hC,YAAara,EAAQqa,iBAGvBr3C,GAAgB,mBAACjP,GAAA,EAAD,YChBpBka,GAA2B,4BAoKjC,IAAevxB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUqgB,OAAAA,MACT,MAAMze,GAAOtB,EAAAA,EAAAA,IAAWN,EAAQqgB,GAC1B1e,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQqgB,IAC1B,SAAErc,GAAahE,EAAO8nE,WAG5B,MAAO,CACLlmE,KAAAA,EAAMD,KAAAA,EAAMqC,SAAAA,EAAUspB,SAHRC,EAAAA,EAAAA,IAAkB5rB,GAAM6rB,EAAAA,EAAAA,IAAqBxtB,IAASytB,EAAAA,EAAAA,IAAuBztB,QAM/F,CAACA,EAAQW,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAChD,gBAAiB,aAAc,kBAAmB,WAAY,mBAZ9CZ,EAlK0C,EAC5DsgB,OAAAA,EACAze,KAAAA,EACAD,KAAAA,EACAqC,SAAAA,EACAspB,QAAAA,EACAy6C,cAAAA,EACAC,WAAAA,EACAC,cAAAA,EACAC,gBAAAA,EACAh5C,SAAAA,EACAzlB,QAAAA,EACAqT,SAAAA,MAEA,MAAOqrD,EAAoBC,EAAkBC,IAAqB5jD,EAAAA,GAAAA,MAC3D+W,EAAwBC,IAA6Bl3B,EAAAA,EAAAA,KAAS,IAC9Dkc,EAAOib,IAAYn3B,EAAAA,EAAAA,MACpBtD,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,GAEzB,MAAMoxB,EAAmBj5B,GAAQA,EAAKg5B,WAAmB,GACnDG,EAAkBn5B,GAAQA,EAAKk5B,UAAkB,IAEhDF,EAAWgB,IAAgBr3B,EAAAA,EAAAA,IAASs2B,IACpCC,EAAUe,IAAet3B,EAAAA,EAAAA,IAASw2B,IAClCutC,EAAwBC,IAA6BhkE,EAAAA,EAAAA,KAAU+oB,IAEtE9oB,EAAAA,EAAAA,KAAU,KACR+jE,GAA2Bj7C,KAC1B,CAACA,KAEJ9oB,EAAAA,EAAAA,KAAU,KACRi3B,GAA0B,GAC1B4sC,MACC,CAACA,EAAmBhoD,KAEvB7b,EAAAA,EAAAA,KAAU,KACRo3B,EAAaf,GACbgB,EAAYd,KACX,CAACF,EAAkBE,EAAiBn5B,KAEvC4C,EAAAA,EAAAA,KAAU,KACJR,IAAawkE,EAAAA,GAAAA,WACf/sC,GAA0B,GAC1BC,OAAS74B,GACTwlE,OAED,CAACA,EAAmBrkE,IAEvB,MAAMq4B,GAAwBr7B,EAAAA,EAAAA,KAAaqE,IACzCu2B,EAAav2B,EAAEkJ,OAAOJ,OACtBstB,GAA0B,KACzB,IAEGa,GAAuBt7B,EAAAA,EAAAA,KAAaqE,IACxCw2B,EAAYx2B,EAAEkJ,OAAOJ,OACrBstB,GAA0B,KACzB,IAEGgtC,GAA2BznE,EAAAA,EAAAA,KAAaqE,IAC5CkjE,EAA0BljE,EAAEkJ,OAAO80B,SACnC5H,GAA0B,KACzB,IAEGe,GAAoBx7B,EAAAA,EAAAA,KAAY,KACpC,MAAMy7B,EAAmB7B,EAAUR,OAC7BsC,EAAkB5B,EAASV,OAE5BqC,EAAiB98B,QACpB+7B,EAASjB,IAGXstC,EAAc,CACZ1nD,OAAAA,EACAiN,SAAUg7C,EACV1tC,UAAW6B,EACX3B,SAAU4B,MAEX,CAAC9B,EAAWE,EAAUitC,EAAe1nD,EAAQioD,IAE1CI,GAAsB1nE,EAAAA,EAAAA,KAAY,KACtCinE,EAAc,CACZhoE,OAAQ0B,EAAKlD,GACbyqB,oBAAoB,IAEtB8+C,EAAW,CAAE3nD,OAAAA,IACbgoD,IACAH,IACAh5C,EAAS,CAAEzwB,QAAIoE,MACd,CAAClB,EAAKlD,GAAI4pE,EAAmBH,EAAiBD,EAAeD,EAAY94C,EAAU7O,IAEtF,IAAKze,EACH,OAGF,MAAMqyB,EAAYjwB,IAAawkE,EAAAA,GAAAA,WAE/B,OACE,0BAAKlnE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC6e,GAAA,EAAD,CACEE,OAAQze,EAAKnD,GACb2vB,WAAW,QACXhO,OAAO,gBACPuoD,cAAY,IAEd,mBAACnpD,GAAA,EAAD,CACE/gB,GAAG,kBACH0sB,MAAOlqB,EAAK,iCACZoN,SAAUguB,EACVluB,MAAOysB,EACPna,MAAOA,IAAUga,GAA2Bha,OAAQ5d,IAEtD,mBAAC2c,GAAA,EAAD,CACE/gB,GAAG,iBACH0sB,MAAOlqB,EAAK,gCACZoN,SAAUiuB,EACVnuB,MAAO2sB,IAET,0BAAKx5B,UAAU,gCACb,mBAAC8hC,GAAA,EAAD,CACEC,QAASilC,EACTn9C,MAAOlqB,EAAK,iBACZ+mC,SAAU/mC,EAAKqnE,EACX,gCACA,kCACJj6D,SAAUo6D,MAIhB,0BAAKnnE,UAAU,WACb,mBAAC4e,GAAA,EAAD,CAAUvc,KAAK,SAASmF,QAAM,EAACgkB,aAAW,EAACvrB,QAAS6mE,GACjDnnE,EAAK,oBAIZ,mBAAC67B,GAAA,EAAD,CACEpvB,QAAS8tB,EACTj6B,QAASi7B,EACTvuB,SAAUgmB,EACV5wB,UAAWpC,EAAK,SAEfgzB,EACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,gBAGjB,mBAAC+gB,GAAA,EAAD,CACEpf,OAAQklE,EACR1+D,QAAS4+D,EACTnkE,KAAMjD,EAAK,2BACXqhB,aAAcrhB,EAAK,iBACnBshB,eAAgBmmD,EAChB7vC,sBAAoB,SCzJtB+vC,GAAoB,6BAiR1B,IAAe1/D,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,SAAE+D,GAAahE,EAAO8nE,WACtBe,EAAmBx+D,QAAO,UAAC1I,EAAKq5B,gBAAN,aAAC,EAAegwB,cAC1C8d,GAAepgD,EAAAA,EAAAA,IAAiB/mB,GAEtC,MAAO,CACLA,KAAAA,EACAqC,SAAAA,EACA8kE,aAAAA,EACAD,iBAAAA,EACAE,cAAeD,EAAennE,EAAKqnE,WAAYC,EAAAA,EAAAA,IAAiBtnE,EAAM,cACtEunE,YAAaJ,EAAennE,EAAKqnE,WAAYC,EAAAA,EAAAA,IAAiBtnE,EAAM,gBAGxE,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,yBAA0B,aAAc,kBACxC,eAAgB,gBAAiB,aAAc,cAlB/BZ,EA3Q2C,EAC7DE,OAAAA,EACA0B,KAAAA,EACAqC,SAAAA,EACA8kE,aAAAA,EACAD,iBAAAA,EACAE,cAAAA,EACAG,YAAAA,EACAnxC,eAAAA,EACAoxC,uBAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAC,aAAAA,EACAC,cAAAA,EACArB,gBAAAA,EACAh5C,SAAAA,EACAzlB,QAAAA,EACAqT,SAAAA,MACI,UACJ,MAAOqrD,EAAoBC,EAAkBC,IAAqB5jD,EAAAA,GAAAA,KAC5D+kD,EAAe7nE,EAAKuf,MACpBuoD,EAAe9nE,EAAKq5B,UAAYr5B,EAAKq5B,SAASslB,OAAe,IAE5D9kB,EAAwBC,IAA6Bl3B,EAAAA,EAAAA,KAAS,IAC9D2c,EAAOm/B,IAAY97C,EAAAA,EAAAA,IAASilE,IAC5BlpB,EAAOC,IAAYh8C,EAAAA,EAAAA,IAASklE,IAC5Bh2D,EAAOkoB,IAAYp3B,EAAAA,EAAAA,OACnBkc,EAAOib,IAAYn3B,EAAAA,EAAAA,MACpBmlE,GAAY/zD,EAAAA,EAAAA,IAAkBhU,GAC9Bo6B,GAAuBlmB,EAAAA,EAAAA,GAAS6zD,GAAW,EAAO5zD,EAAAA,GAAAA,SAClD7U,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,IAEzBjF,EAAAA,EAAAA,KAAU,KACJR,IAAawkE,EAAAA,GAAAA,WACf/sC,GAA0B,GAC1BC,OAAS74B,MAEV,CAACmB,IAEJ,MAAM2lE,GAAsB3oE,EAAAA,EAAAA,KAAY,KACtC+2B,EAAe6xC,EAAAA,GAAAA,mBACd,CAAC7xC,IAEE8xC,GAAwB7oE,EAAAA,EAAAA,KAAY,KACxC+2B,EAAe6xC,EAAAA,GAAAA,cACd,CAAC7xC,IAEE+xC,GAAyB9oE,EAAAA,EAAAA,KAAY,KACzC+2B,EAAe6xC,EAAAA,GAAAA,oBACd,CAAC7xC,IAEEgyC,GAA4B/oE,EAAAA,EAAAA,KAAY,KAC5C+2B,EAAe6xC,EAAAA,GAAAA,sBACd,CAAC7xC,IAEEiyC,GAAiBhpE,EAAAA,EAAAA,KAAa8xD,IAClCn3B,EAASm3B,GACTr3B,GAA0B,KACzB,IAEGmlB,GAAoB5/C,EAAAA,EAAAA,KAAaqE,IACrCg7C,EAASh7C,EAAEkJ,OAAOJ,OAClBstB,GAA0B,KACzB,IAEGwuC,GAAoBjpE,EAAAA,EAAAA,KAAaqE,IACrCk7C,EAASl7C,EAAEkJ,OAAOJ,OAClBstB,GAA0B,KACzB,IAEGyuC,IAAoBlpE,EAAAA,EAAAA,KAAY,KACpC,MAAMmpE,EAAejpD,EAAMkZ,OACrBgwC,EAAe9pB,EAAMlmB,OAEtB+vC,EAAaxqE,OAKlBypE,EAAW,CACTnpE,OAAAA,EACAihB,MAAOipD,EACP7pB,MAAO8pB,EACP32D,MAAAA,IARAioB,EAASktC,MAUV,CAACtoB,EAAOrgD,EAAQwT,EAAOyN,EAAOkoD,IAE3BiB,IAAqBrpE,EAAAA,EAAAA,KAAY,KACrC+2B,EAAe6xC,EAAAA,GAAAA,gBACd,CAAC7xC,IAEEuyC,IAAyBtpE,EAAAA,EAAAA,KAAY,KACzC,IAAKW,EAAKq5B,SACR,OAGF,MAAM,mBAAEuvC,GAAuB5oE,EAAKq5B,SAEpCmuC,EAAuB,CAAElpE,OAAQ0B,EAAKlD,GAAI+rE,WAAYD,MACrD,CAAC5oE,EAAMwnE,IAEJsB,IAA0B1nE,EAAAA,EAAAA,KAAQ,KACtC,IAAKpB,EAAK+oE,oBACR,OAAO,EAGT,IAAIn3B,EAAa,CACf,eACA,YACA,aACA,YACA,aACA,cACA,eACAl1B,QACC5c,IAASE,EAAK+oE,oBAAqBjpE,KACpC9B,OAEF,MAAM,aAAEgrE,EAAF,SAAgBC,GAAajpE,EAAK+oE,oBAOxC,OAJKC,GAAiBC,IACpBr3B,GAAc,GAGTA,IACN,CAAC5xC,IAEEkpE,IAAc,UAAClpE,EAAKq5B,gBAAN,iBAAC,EAAe8vC,oBAAhB,aAAC,EAA6BnrE,SAAW,EAEvDorE,IAAoB/pE,EAAAA,EAAAA,KAAY,KAChC8nE,EACFO,EAAW,CAAEppE,OAAQ0B,EAAKlD,KAChBkD,EAAKqnE,UAGfO,EAAc,CAAEtpE,OAAQ0B,EAAKlD,KAF7B6qE,EAAa,CAAErpE,OAAQ0B,EAAKlD,KAI9B4pE,IACAH,IACAh5C,EAAS,CAAEzwB,QAAIoE,MACd,CACDimE,EAAcnnE,EAAKqnE,UAAWrnE,EAAKlD,GACnC4pE,EAAmBH,EAAiBoB,EAAcC,EAAeF,EAAYn6C,IAG/E,GAAIvtB,EAAKipD,aACP,OAGF,MAAM32B,GAAYjwB,IAAawkE,EAAAA,GAAAA,WAE/B,OACE,0BAAKlnE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACs7B,GAAA,EAAD,CACEb,qBAAsBA,EACtB1tB,SAAU27D,EACV/7D,UAAW86D,IAEb,mBAACvpD,GAAA,EAAD,CACE/gB,GAAG,cACH0sB,MAAOlqB,EAAK,aACZoN,SAAUuyC,EACVzyC,MAAO+S,EACPT,MAAOA,IAAUmoD,GAAoBnoD,OAAQ5d,EAC7CoL,UAAW86D,IAEb,mBAACvpD,GAAA,EAAD,CACE/gB,GAAG,cACH6C,UAAU,OACV6pB,MAAOlqB,EAAK,0BACZoN,SAAU47D,EACV97D,MAAOmyC,EACPryC,UAAW86D,IAEZpnE,EAAKqnE,WACJ,mBAAC9oD,GAAA,EAAD,CAAUvc,KAAK,OAAOw7B,WAAS,EAAC59B,QAASooE,GACvC,2BAAMroE,UAAU,SAASL,EAAK,cAC9B,2BAAMK,UAAU,YAAYK,EAAKixB,SAAW3xB,EAAK,cAAgBA,EAAK,iBAGzE4nE,GACC,mBAAC3oD,GAAA,EAAD,CACEvc,KAAK,UACLw7B,WAAS,EACT59B,QAASsoE,GAET,2BAAMvoE,UAAU,SAASL,EAAK,kBAC9B,2BAAMK,UAAU,YAAYL,EAAK,sBAGrC,mBAACif,GAAA,EAAD,CACEvc,KAAK,cACLw7B,WAAS,EACT59B,QAASuoE,EACT77D,UAAWi7D,GAEX,2BAAM5nE,UAAU,SAASL,EAAK,uBAC9B,2BAAMK,UAAU,WAAWO,IAAI,QAC5B4oE,GADH,IA5MoB,IAgNtB,mBAACvqD,GAAA,EAAD,CACEvc,KAAK,QACLw7B,WAAS,EACT59B,QAASwoE,GAET,2BAAMzoE,UAAU,SAASL,EAAK,0BAC9B,2BAAMK,UAAU,aAAY0pE,EAAAA,GAAAA,IAAcH,OAG9C,0BAAKvpE,UAAU,WACb,mBAAC4e,GAAA,EAAD,CAAUvc,KAAK,QAAQw7B,WAAS,EAAC59B,QAAS8oE,IACxC,2BAAM/oE,UAAU,SAASL,EAAK,iBAC9B,2BAAMK,UAAU,aAAY0pE,EAAAA,GAAAA,IAAa,UAACrpE,EAAKo1C,oBAAN,QAAsB,KAGhEp1C,EAAKq5B,UACJ,0BAAK15B,UAAU,gCACb,mBAAC8hC,GAAA,EAAD,CACEC,SAAU1hC,EAAKq5B,SAASuvC,mBACxBp/C,MAAOlqB,EAAK,eACZoN,SAAUi8D,GACVr8D,UAAWi7D,MAKnB,0BAAK5nE,UAAU,WACb,mBAAC4e,GAAA,EAAD,CAAUvc,KAAK,SAASmF,QAAM,EAACgkB,aAAW,EAACvrB,QAAS6mE,GACjDnnE,EAAK,iBAIZ,mBAAC67B,GAAA,EAAD,CACEpvB,QAAS8tB,EACTj6B,QAAS2oE,GACTj8D,SAAUgmB,GACV5wB,UAAWpC,EAAK,SAEfgzB,GACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,gBAGjB,mBAAC+gB,GAAA,EAAD,CACEpf,OAAQklE,EACR1+D,QAAS4+D,EACTrwD,WAAWlW,EAAAA,EAAAA,GACTgnE,IAAiBnnE,EAAKqnE,UAClB/nE,EAAK,2BACLA,EAAK,oCAAqCU,EAAKuf,OACnD,CAAC,KAAM,oBAEToB,aAAcwmD,IAAiBnnE,EAAKqnE,UAAY/nE,EAAK,cAAgBA,EAAK,qBAC1EshB,eAAgBwoD,GAChBlyC,sBAAoB,SCjB5B,IAAe3vB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAGF,CAAE0B,MAFIpB,EAAAA,EAAAA,IAAWP,EAAQC,GAEjB2d,cAAe5d,EAAO4d,kBAEvC,CAACld,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,mCANpCZ,EAjPsD,EACxEg4B,eAAAA,EACAkzC,mBAAAA,EACAtpE,KAAAA,EACAic,cAAAA,EACAstD,8BAAAA,EACAzhE,QAAAA,EACAqT,SAAAA,MAEA,MAAOquD,EAAaC,IAAkB7mE,EAAAA,EAAAA,IAA8B,KAC7D8mE,EAAuBC,IAA4B/mE,EAAAA,EAAAA,KAAS,IAC5D0vB,EAAWizC,IAAgB3iE,EAAAA,EAAAA,KAAS,GACrCtD,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,GAEzB,MAAM8hE,GAA0BvqE,EAAAA,EAAAA,KAAY,KAC1C+2B,EAAe6xC,EAAAA,GAAAA,qBACd,CAAC7xC,IAEEyzC,GAA0BxqE,EAAAA,EAAAA,KAAY,KAC1C+2B,EAAe6xC,EAAAA,GAAAA,8BACd,CAAC7xC,IAEE0zC,GAA6BzqE,EAAAA,EAAAA,KAAauvD,IAC9C0a,EAAmB1a,EAAOlwC,OAAQkwC,EAAOmb,mBAAqB9tD,GAC9Dma,EAAe6xC,EAAAA,GAAAA,wBACd,CAAChsD,EAAeqtD,EAAoBlzC,KAEvCvzB,EAAAA,EAAAA,KAAU,KACR4mE,GAAgBzpE,MAAAA,OAAD,EAACA,EAAM+oE,sBAAwB,IAC9CY,GAAyB,GACzBlkE,YAAW,KACT8/D,GAAa,KA1D0B,OA4DxC,CAACvlE,IAEJ,MAAMgqE,GAAyB3qE,EAAAA,EAAAA,KAAaqE,IAC1C,MAAM,KAAEiY,GAASjY,EAAEkJ,OAEnB,SAASq9D,EAA0Bz9D,GACjC,OAAOA,QAAQtL,EAGjBuoE,GAAgB5gC,IAAD,IACVA,EACH,CAACltB,GAAOsuD,EAA0BphC,EAAEltB,OACvB,iBAATA,GAA2B,CAC7BstD,SAAUgB,EAA0BphC,EAAEltB,SAG1CguD,GAAyB,KACxB,IAEGO,GAAwB7qE,EAAAA,EAAAA,KAAY,KACnCW,IAILulE,GAAa,GACbgE,EAA8B,CAAEjrE,OAAQ0B,EAAKlD,GAAIqtE,aAAcX,OAC9D,CAACxpE,EAAMwpE,EAAaD,IAEjBa,GAAoBhpE,EAAAA,EAAAA,KAAQ,IAC3BpB,GAASA,EAAKq5B,UAAar5B,EAAKq5B,SAASgxC,cAIvCrqE,EAAKq5B,SAASgxC,cAAcrsE,OAH1B,GAIR,CAACgC,IAEEsqE,GAAmBlpE,EAAAA,EAAAA,KAAQ,IAC1BpB,GAASA,EAAKq5B,UAAar5B,EAAKq5B,SAASkxC,QAIvCvqE,EAAKq5B,SAASkxC,QAAQ7tD,QAAO,EAAGytD,aAAAA,OAAqBA,IAHnD,IAIR,CAACnqE,IAEEwqE,GAAsBnrE,EAAAA,EAAAA,KAAauvD,IACvC,MAAM,aAAEub,GAAiBvb,EACzB,IAAKub,IAAiBnqE,EACpB,OAGF,MAAM,oBAAE+oE,GAAwB/oE,EAEhC,OAAO1C,OAAOi3B,KAAK41C,GAAcj1B,QAAO,CAACC,EAAQr1C,KAC/C,IACGqqE,EAAarqE,IACVipE,MAAAA,GAAAA,EAAsBjpE,IACf,eAARA,GAAgC,iBAARA,GAAkC,cAARA,EAErD,OAAOq1C,EAGT,MAAMs1B,EAvHZ,SAAqC3qE,GACnC,OAAQA,GACN,IAAK,eACH,MAAO,yBACT,IAAK,YACH,MAAO,8BACT,IAAK,eACH,MAAO,iCACT,IAAK,aACH,MAAO,+BACT,IAAK,YACH,MAAO,8BACT,IAAK,aACH,MAAO,+BACT,IAAK,cACH,MAAO,8BACT,IAAK,cACH,MAAO,8BACT,QACE,QAoGgB4qE,CAA4B5qE,GAE5C,IAAK2qE,EACH,OAAOt1B,EAGT,MAAMw1B,EAAmBrrE,EAAKmrE,GAE9B,MAAQ,GAAEt1B,IAAUA,EAAOn3C,OAA6B,KAAI2sE,IAAxBA,MACnC,MACF,CAAC3qE,EAAMV,IAEV,OACE,0BAAKK,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,yBAAIA,UAAU,kBAAkBO,IAAI,QAAQZ,EAAK,6BAEjD,0BAAKK,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,eACL+lB,SAAU8nC,EAAYoB,aACtBphD,MAAOlqB,EAAK,wBACZurE,UAAQ,EACRn+D,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,YACL+lB,SAAU8nC,EAAYsB,UACtBthD,MAAOlqB,EAAK,6BACZurE,UAAQ,EACRn+D,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,eACL+lB,SAAU8nC,EAAYR,eAAiBQ,EAAYP,SACnDz/C,MAAOlqB,EAAK,gCACZurE,UAAQ,EACRn+D,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,YACL+lB,SAAU8nC,EAAYuB,UACtBvhD,MAAOlqB,EAAK,6BACZurE,UAAQ,EACRn+D,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAU8nC,EAAYwB,WACtBxhD,MAAOlqB,EAAK,8BACZurE,UAAQ,EACRn+D,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,cACL+lB,SAAU8nC,EAAYyB,YACtBzhD,MAAOlqB,EAAK,+BACZurE,UAAQ,EACRn+D,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,cACL+lB,SAAU8nC,EAAY0B,YACtB1hD,MAAOlqB,EAAK,+BACZurE,UAAQ,EACRn+D,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAU8nC,EAAY2B,WACtB3hD,MAAOlqB,EAAK,8BACZurE,UAAQ,EACRn+D,SAAUs9D,MAKhB,0BAAKrqE,UAAU,WACb,mBAAC4e,GAAA,EAAD,CACEvc,KAAK,cACLw7B,WAAS,EACTD,QAAM,EACN39B,QAASgqE,GAET,2BAAMjqE,UAAU,SAASL,EAAK,wBAC9B,2BAAMK,UAAU,YAAYyqE,KAIhC,0BAAKzqE,UAAU,WACb,yBAAIA,UAAU,kBAAkBO,IAAI,QAAQZ,EAAK,sBAEjD,mBAACif,GAAA,EAAD,CACEvc,KAAK,WACLpC,QAASiqE,GAERvqE,EAAK,wBAGPgrE,EAAiBhsD,KAAKswC,GACrB,mBAACrwC,GAAA,EAAD,CACEze,IAAK8uD,EAAOlwC,OACZ/e,UAAU,wCACVC,QAAS,IAAMkqE,EAA2Blb,IAE1C,mBAACpwC,GAAA,EAAD,CACEE,OAAQkwC,EAAOlwC,OACfD,OAAQ+rD,EAAoB5b,UAOtC,mBAACzzB,GAAA,EAAD,CACEpvB,QAAS29D,EACT9pE,QAASsqE,EACTxoE,UAAWpC,EAAK,QAChBgN,SAAUgmB,GAETA,EACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,qBC9LvB,IAAe4H,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBud,KAAMmR,GAAc3uB,EAAO4uB,MAEnC,MAAO,CAAEjtB,KAAAA,EAAMgtB,UAAAA,MAEjB,CAACjuB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kCAPpCZ,EA1EuD,EACzE4B,KAAAA,EACAgtB,UAAAA,EACAo+C,6BAAAA,EACAtjE,QAAAA,EACAqT,SAAAA,MAEA,MAAM7b,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,GAEzB,MAAMujE,GAAiBjqE,EAAAA,EAAAA,KAAQ,IACxBpB,GAASA,EAAKq5B,UAAar5B,EAAKq5B,SAASgxC,cAIvCrqE,EAAKq5B,SAASgxC,cAHZ,IAIR,CAACrqE,IAEEsrE,GAAejsE,EAAAA,EAAAA,KAAauvD,IAChC,IAAKA,EAAO2c,eACV,OAGF,MAAMC,EAAex+C,EAAU4hC,EAAO2c,gBACtC,OAAKC,EAIElsE,EAAK,iBAAiB0xB,EAAAA,EAAAA,IAAgBw6C,SAJ7C,IAKC,CAAClsE,EAAM0tB,IAEJy+C,GAAoBpsE,EAAAA,EAAAA,KAAauvD,IACrC,GAAK5uD,EAIL,MAAO,CAAC,CACNuf,MAAOjgB,EAAK,WACZ0C,KAAM,SACNmpB,aAAa,EACbyrB,QAAS,IAAMw0B,EAA6B,CAC1C9sE,OAAQ0B,EAAKlD,GACb4hB,OAAQkwC,EAAOlwC,OACfyrD,aAAc,SAGjB,CAAC7qE,EAAMU,EAAMorE,IAEhB,OACE,0BAAKzrE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjD,wBAAGvB,UAAU,cAAcL,EAAK,oBAE/B+rE,EAAe/sD,KAAKswC,GACnB,mBAACrwC,GAAA,EAAD,CACEze,IAAK8uD,EAAOlwC,OACZ/e,UAAU,sBACVwH,QAAM,EACNglB,eAAgBs/C,EAAkB7c,IAElC,mBAACpwC,GAAA,EAAD,CACEE,OAAQkwC,EAAOlwC,OACfD,OAAQ6sD,EAAa1c,eChD/B8c,GAAsB,+BAiN5B,IAAenkE,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,SAAE+D,GAAahE,EAAO8nE,WAG5B,MAAO,CACLnmE,KAAAA,EACAqC,SAAAA,EACAspE,kBALwBjjE,QAAQ1I,MAAAA,OAAD,EAACA,EAAM2rE,mBAMtCvE,eAAeE,EAAAA,EAAAA,IAAiBtnE,EAAM,kBAG1C,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,mBAAoB,aAAc,kBAAmB,eAAgB,gBAAiB,cAdtEZ,EA/M6C,EAC/DE,OAAAA,EACA0B,KAAAA,EACAqC,SAAAA,EACAspE,kBAAAA,EACAvE,cAAAA,EACAhxC,eAAAA,EACAqxC,WAAAA,EACAmE,iBAAAA,EACArF,gBAAAA,EACAoB,aAAAA,EACAC,cAAAA,EACAr6C,SAAAA,EACAzlB,QAAAA,EACAqT,SAAAA,MACI,YACJ,MAAM0sD,EAAe7nE,GAAQA,EAAKuf,OAAe,GAC3CuoD,EAAe9nE,MAAAA,GAAAA,EAAMq5B,UAAYr5B,EAAKq5B,SAASslB,OAAe,GAC9DyK,EAAgBppD,MAAAA,GAAH,UAAGA,EAAMq5B,gBAAT,aAAG,EAAgBgwB,cAE/Bmd,EAAoBC,EAAkBC,IAAqB5jD,EAAAA,GAAAA,MAC3D+W,EAAwBC,IAA6Bl3B,EAAAA,EAAAA,KAAS,IAC9D2c,EAAOm/B,IAAY97C,EAAAA,EAAAA,IAASilE,IAC5BlpB,EAAOC,IAAYh8C,EAAAA,EAAAA,IAASklE,IAC5Bh2D,EAAOkoB,IAAYp3B,EAAAA,EAAAA,OACnBkc,EAAOib,IAAYn3B,EAAAA,EAAAA,MACpBmlE,EAAY/nE,IAAQgU,EAAAA,EAAAA,IAAkBhU,GACtCo6B,GAAuBlmB,EAAAA,EAAAA,GAAS6zD,GAAW,EAAO5zD,EAAAA,GAAAA,SAClD7U,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,IAEzBjF,EAAAA,EAAAA,KAAU,KACJR,IAAawkE,EAAAA,GAAAA,WACf/sC,GAA0B,GAC1BC,OAAS74B,MAEV,CAACmB,IAEJ,MAAM6mE,GAAelpE,MAAAA,GAAD,UAACA,EAAMq5B,gBAAP,iBAAC,EAAgB8vC,oBAAjB,aAAC,EAA8BnrE,SAAW,EAExDgqE,GAAsB3oE,EAAAA,EAAAA,KAAY,KACtC+2B,EAAe6xC,EAAAA,GAAAA,mBACd,CAAC7xC,IAEE8xC,GAAwB7oE,EAAAA,EAAAA,KAAY,KACxC+2B,EAAe6xC,EAAAA,GAAAA,cACd,CAAC7xC,IAEEgyC,GAA4B/oE,EAAAA,EAAAA,KAAY,KAC5C+2B,EAAe6xC,EAAAA,GAAAA,sBACd,CAAC7xC,IAEEiyC,GAAiBhpE,EAAAA,EAAAA,KAAa8xD,IAClCn3B,EAASm3B,GACTr3B,GAA0B,KACzB,IAEGmlB,GAAoB5/C,EAAAA,EAAAA,KAAaqE,IACrCg7C,EAASh7C,EAAEkJ,OAAOJ,OAClBstB,GAA0B,KACzB,IAEGwuC,GAAoBjpE,EAAAA,EAAAA,KAAaqE,IACrCk7C,EAASl7C,EAAEkJ,OAAOJ,OAClBstB,GAA0B,KACzB,IAEG+xC,GAAsBxsE,EAAAA,EAAAA,KAAY,KACtC,MAAMmpE,EAAejpD,EAAMkZ,OACrBgwC,EAAe9pB,EAAMlmB,OAEtB+vC,EAAaxqE,OAKlBypE,EAAW,CACTnpE,OAAAA,EACAihB,MAAOipD,EACP7pB,MAAO8pB,EACP32D,MAAAA,IARAioB,EAAS2xC,MAUV,CAAC/sB,EAAOrgD,EAAQwT,EAAOyN,EAAOkoD,IAE3BqE,GAAyBzsE,EAAAA,EAAAA,KAAY,KACzCusE,EAAiB,CAAEttE,OAAAA,EAAQuqE,WAAY8C,MACtC,CAACrtE,EAAQqtE,EAAmBC,IAEzBG,IAAyB1sE,EAAAA,EAAAA,KAAY,KACzC+2B,EAAe6xC,EAAAA,GAAAA,sBACd,CAAC7xC,IAEE41C,IAAsB3sE,EAAAA,EAAAA,KAAY,KAClCW,EAAKqnE,UACPO,EAAc,CAAEtpE,OAAQ0B,EAAKlD,KAE7B6qE,EAAa,CAAErpE,OAAQ0B,EAAKlD,KAG9B4pE,IACAH,IACAh5C,EAAS,CAAEzwB,QAAIoE,MACd,CAAClB,EAAKqnE,UAAWrnE,EAAKlD,GAAI4pE,EAAmBH,EAAiBoB,EAAcC,EAAer6C,IAE9F,GAAIvtB,EAAKipD,aACP,OAGF,MAAM32B,GAAYjwB,IAAawkE,EAAAA,GAAAA,WAE/B,OACE,0BAAKlnE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAACs7B,GAAA,EAAD,CACEb,qBAAsBA,EACtB1tB,SAAU27D,EACV/7D,UAAW86D,IAEb,mBAACvpD,GAAA,EAAD,CACE/gB,GAAG,gBACH0sB,MAAOlqB,EAAK,oBACZoN,SAAUuyC,EACVzyC,MAAO+S,EACPT,MAAOA,IAAU4sD,GAAsB5sD,OAAQ5d,EAC/CoL,UAAW86D,IAEb,mBAACvpD,GAAA,EAAD,CACE/gB,GAAG,gBACH6C,UAAU,OACV6pB,MAAOlqB,EAAK,0BACZoN,SAAU47D,EACV97D,MAAOmyC,EACPryC,UAAW86D,IAEZpnE,EAAKqnE,WACJ,mBAAC9oD,GAAA,EAAD,CAAUvc,KAAK,OAAOw7B,WAAS,EAAC59B,QAASooE,GACvC,2BAAMroE,UAAU,SAASL,EAAK,gBAC9B,2BAAMK,UAAU,YAAYK,EAAKixB,SAAW3xB,EAAK,cAAgBA,EAAK,iBAG1E,mBAACif,GAAA,EAAD,CACEvc,KAAK,UACLw7B,WAAS,EACT59B,QAASsoE,EACT57D,UAAW86D,GAEX,2BAAMznE,UAAU,SAASL,EAAK,eAC9B,2BAAMK,UAAU,YAA4BL,EAAhB8pD,EAAqB,mBAA2B,SAE9E,mBAAC7qC,GAAA,EAAD,CACEvc,KAAK,QACLw7B,WAAS,EACT59B,QAASwoE,GAET,2BAAMzoE,UAAU,SAASL,EAAK,0BAC9B,2BAAMK,UAAU,YAAYupE,IAE9B,0BAAKvpE,UAAU,gCACb,mBAAC8hC,GAAA,EAAD,CACEC,QAASiqC,EACTniD,MAAOlqB,EAAK,uBACZoN,SAAUo/D,MAIhB,0BAAKnsE,UAAU,WACb,mBAAC4e,GAAA,EAAD,CACEvc,KAAK,QACLw7B,WAAS,EACT59B,QAASmsE,IAET,2BAAMpsE,UAAU,QAAQO,IAAI,QAAQZ,EAAK,uBACzC,2BAAMK,UAAU,WAAWO,IAAI,QAAQZ,EAAK,cAAD,UAAgBU,EAAKo1C,oBAArB,QAAqC,EAAG,QAGvF,0BAAKz1C,UAAU,WACb,mBAAC4e,GAAA,EAAD,CAAUvc,KAAK,SAASmF,QAAM,EAACgkB,aAAW,EAACvrB,QAAS6mE,GACjDzmE,EAAKqnE,UAAY/nE,EAAK,iBAAmBA,EAAK,mBAIrD,mBAAC67B,GAAA,EAAD,CACEpvB,QAAS8tB,EACTj6B,QAASisE,EACTv/D,SAAUgmB,GACV5wB,UAAWpC,EAAK,SAEfgzB,GACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,gBAGjB,mBAAC+gB,GAAA,EAAD,CACEpf,OAAQklE,EACR1+D,QAAS4+D,EACTnkE,KAAMvC,EAAKqnE,UAAY/nE,EAAK,sBAAwBA,EAAK,qBACzDqhB,aAAc3gB,EAAKqnE,UAAY/nE,EAAK,iBAAmBA,EAAK,gBAC5DshB,eAAgBorD,GAChB90C,sBAAoB,S,aC7M5B,MA4HA,IAAe3vB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,oBAAE05B,IAAwBi0C,EAAAA,EAAAA,IAAiB5tE,EAAQC,GAEzD,MAAO,CACL0B,KAAAA,EACAyf,WAAWoI,EAAAA,EAAAA,IAAc7nB,GACzBqC,SAAUhE,EAAO8nE,WAAW9jE,SAC5B21B,oBAAAA,MAGJ,CAACj5B,EAAWC,KAAYC,EAAAA,EAAAA,IAAKD,EAAS,CACpC,kBAAmB,mBAAoB,uBAbvBZ,EA5HqD,EACvE4B,KAAAA,EACA8H,QAAAA,EACAqT,SAAAA,EACAsE,UAAAA,EACApd,SAAAA,EACA21B,oBAAAA,EACAk0C,gBAAAA,EACAC,iBAAAA,EACAC,kBAAAA,MACI,MACJ,MAAMlX,EAAWxsD,QAAQ1I,EAAKixB,UACxBo7C,EAAW,UAAGrsE,EAAKq5B,gBAAR,aAAG,EAAeizC,YAE5BC,EAAaC,IAAkB5pE,EAAAA,EAAAA,IAAsBsyD,EAAW,SAAW,YAC3EjkC,EAAUiH,IAAet1B,EAAAA,EAAAA,OACzB6pE,EAA2BC,EAAyBC,IAA4B7pD,EAAAA,GAAAA,KAEjF8pD,EAAYlkE,QACC,WAAhB6jE,GAA4Bt7C,GAAY+G,GACrB,YAAhBu0C,GAA6BrX,IAGnC55C,EAAAA,EAAAA,IAAeH,EAAUrT,IAEzBjF,EAAAA,EAAAA,KAAU,KACJ0pE,IAAgBF,GAClBD,MAED,CAACG,EAAaF,EAAaD,IAE9B,MAAMS,GAAqBxtE,EAAAA,EAAAA,KAAamN,IACtCggE,EAAehgE,KACd,IAEGsgE,GAAaztE,EAAAA,EAAAA,KAAY,KAC7B8sE,EAAiB,CAAEl7C,SAA0B,WAAhBs7C,EAA2Bt7C,EAAW,OAClE,CAACs7C,EAAaJ,EAAkBl7C,IAE7B87C,GAA0B1tE,EAAAA,EAAAA,KAAY,KAC1CstE,IACAP,MACC,CAACO,EAA0BP,IAExB9sE,GAAOC,EAAAA,EAAAA,KACPytE,EAAcvtD,EAAY,UAAY,OACtCwtD,EAAcxtD,EAAY,UAAY,QAEtCiK,EAAU,CACd,CAAEld,MAAO,UAAWgd,MAAOlqB,EAAM,GAAE0tE,YAAuB3mC,SAAU/mC,EAAM,GAAE0tE,iBAC5E,CAAExgE,MAAO,SAAUgd,MAAOlqB,EAAM,GAAE0tE,WAAsB3mC,SAAU/mC,EAAM,GAAE0tE,iBAGtE16C,EAAYjwB,IAAawkE,EAAAA,GAAAA,WAE/B,OACE,0BAAKlnE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjD,yBAAIvB,UAAU,mBAAmBL,EAAM,GAAE2tE,UACzC,mBAACxjD,GAAA,EAAD,CACEE,SAAU4iD,EACV5wD,KAAK,eACL+N,QAASA,EACThd,SAAUmgE,KAGG,YAAhBN,EACC,0BAAK5sE,UAAU,UAAUO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAChDmrE,EACC,sCACE,mBAACa,GAAA,EAAD,CAAU1lE,IAAK6kE,EAAa1sE,UAAU,aAAa4C,KAAM8pE,IACzD,wBAAG1sE,UAAU,eAAeO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACnD5B,EAAM,GAAE0tE,qBAGX,mBAACzuD,GAAA,EAAD,CAAUvc,KAAK,SAASmF,QAAM,EAACgkB,aAAW,EAACvrB,QAAS8sE,GACjDptE,EAAK,eAER,mBAACohB,GAAA,EAAD,CACEpf,OAAQmrE,EACR3kE,QAAS6kE,EACTpqE,KAAMjD,EAAK,eACXqhB,aAAcrhB,EAAK,gBACnBshB,eAAgBmsD,EAChB71C,sBAAoB,KAIxB,mBAACtY,GAAA,EAAD,OAIJ,0BAAKjf,UAAU,qBACb,mBAACu7B,GAAD,CACEnD,QAAM,EACND,gBAAiB93B,EAAKixB,SACtBqB,UAAWA,EACX0F,oBAAqBA,EACrBC,cAAei0C,EACfx/D,SAAUwrB,IAEZ,wBAAGv4B,UAAU,eAAeO,IAAI,QAC7BZ,EAAM,GAAE2tE,sCAKjB,mBAAC9xC,GAAA,EAAD,CACEpvB,QAAS6gE,EACTtgE,SAAUgmB,EACV5wB,UAAWpC,EAAK,QAChBM,QAASktE,GAERx6C,EACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,qBCkGvB,IAAe4H,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IAC1B,iBAAE6uE,EAAkBtxD,KAAMi7B,GAAez4C,EAAOud,MAKtD,MAAO,CACL5b,KAAAA,EACA82C,WAAAA,EACAq2B,iBAAAA,EACAC,WARiBptE,MAAAA,GAAA,UAAAA,EAAMq5B,gBAAN,SAAgBgwB,cAC/BzqD,EAAAA,EAAAA,IAAWP,EAAQ2B,EAAKq5B,SAASgwB,mBACjCnoD,EAOFue,UAAWzf,IAAQ6nB,EAAAA,EAAAA,IAAc7nB,OAGrC,CAACjB,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,0BAA2B,sBAAuB,2BAjBlCZ,EAxNgD,EAClE4B,KAAAA,EACA8H,QAAAA,EACAqT,SAAAA,EACA7c,OAAAA,EACAw4C,WAAAA,EACAs2B,WAAAA,EACAD,iBAAAA,EACA1tD,UAAAA,EACA2W,eAAAA,EACAi3C,wBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,MAEA,MAAOC,EAAeC,IAAoB7qE,EAAAA,EAAAA,OACnCs5B,EAAeC,IAAoBv5B,EAAAA,EAAAA,OACnCw5B,EAAmBC,IAAwBz5B,EAAAA,EAAAA,KAAS,GACrD05B,GAAsBj9B,EAAAA,EAAAA,KAAY,IAAMg9B,GAAqB,IAAO,KACnEqxC,EAAgCC,EAA8BC,IAAiC9qD,EAAAA,GAAAA,MAC/F+qD,EAA8BC,EAA4BC,IAA+BjrD,EAAAA,GAAAA,KAC1FxjB,GAAOC,EAAAA,EAAAA,KACP8pD,EAAe+jB,MAAAA,OAAH,EAAGA,EAAYtwE,IAEjCwe,EAAAA,EAAAA,IAAeH,EAAUrT,IAEzBjF,EAAAA,EAAAA,KAAU,KACRwqE,MACC,CAACA,KAEJxqE,EAAAA,EAAAA,KAAU,KACHq5B,IACHK,EAAAA,GAAAA,GAAiB,oBAAoBC,KAAKL,KAE3C,CAACD,IAEJ,MAAM8xC,GAA4B3uE,EAAAA,EAAAA,KAAY,KAC5CuuE,IACAL,EAAsB,CAAEU,UAAWxuD,EAAYnhB,EAAS+qD,IACnD5pC,GACH2W,EAAe6xC,EAAAA,GAAAA,WAEhB,CAAC2F,EAA+BL,EAAuB9tD,EAAWnhB,EAAQ+qD,EAAcjzB,IAErF83C,GAA0B7uE,EAAAA,EAAAA,KAAY,KAC1C0uE,IACAT,EAAoB,CAAEW,UAAW3vE,EAAQA,OAAQkvE,MAChD,CAACO,EAA6BT,EAAqBhvE,EAAQkvE,IAkJ9D,OACE,0BAAK7tE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,0BAAKA,UAAU,gBACZu8B,GACC,mBAACc,GAAA,EAAD,CACElgC,GAAG,wBACHiD,KAAMouE,EAAAA,GACNjyC,cAAeA,EACfgB,KAAMd,EACNe,QAAM,EACNC,OAAQd,KAIb8wC,GA3FL,8BACE,mBAAC7uD,GAAA,EAAD,CACE5e,UAAU,sBACVwgC,UAAQ,GAER,mBAACxhB,GAAA,EAAD,CAAergB,OAAQ8uE,EAAYtwE,MAErC,mBAACyhB,GAAA,EAAD,CACEvc,KAAK,SACLmF,QAAM,EACNgkB,aAAW,EACXvrB,QAAS+tE,GAERruE,EAAKmgB,EAAY,wBAA0B,4BAE9C,mBAACiB,GAAA,EAAD,CACEpf,OAAQosE,EACR5lE,QAAS8lE,EACT3vD,OAhFJ,0BAAKte,UAAU,gBACb,mBAACE,EAAA,EAAD,CACEE,KAAK,OACLC,KAAMotE,IAER,0BAAKztE,UAAU,eACZL,EAAKmgB,EAAY,wBAA0B,6BA2E5CpJ,WAAWlW,EAAAA,EAAAA,GACTb,EAAKmgB,EAAY,+BAAiC,6BAA8B2tD,EAAY7tD,OAC5F,CAAC,KAAM,oBAEToB,aAAcrhB,EAAKmgB,EAAY,wBAA0B,2BACzDmB,eAAgBotD,EAChB92C,sBAAoB,MAmElBk2C,GA3DN,8BACE,wBAAGztE,UAAU,eAAeO,IAAI,QAAQZ,EAAK,0BAE7C,0BAAK8uE,eAAa,GAChB,mBAAC7vD,GAAA,EAAD,CACEze,IAAI,eACJkC,KAAK,QACLmF,QAAM,EACNknE,cAAe,EACf1uE,UAAU,mBAETL,EAAK,0BAEP6tE,EACCA,EAAiB7uD,KAAI,CAACxhB,EAAIynB,IACxB,mBAAChG,GAAA,EAAD,CACEze,IAAKhD,EACLuxE,cAAe9pD,EAAI,EACnB5kB,UAAU,kCACVC,QAAS,KAxHrB6tE,EAwH+C3wE,GAvH/CgxE,MAyHY,mBAACnvD,GAAA,EAAD,CAAergB,OAAQxB,OAI3B,mBAAC80B,GAAA,EAAD,CAAc9xB,IAAI,gBAAgBuuE,cAAe,EAAG9rE,KAAK,gCAG7D,wBAAG5C,UAAU,yBAAyBO,IAAI,QAAQZ,EAAK,2BACvD,mBAACohB,GAAA,EAAD,CACEpf,OAAQusE,EACR/lE,QAASimE,EACT9vD,OApHR,WACE,MAAMqwD,EAAcx3B,EAAW02B,GAE/B,GAAKc,EAIL,OACE,0BAAK3uE,UAAU,gBACb,mBAACE,EAAA,EAAD,CACEE,KAAK,OACLC,KAAMsuE,IAER,0BAAK3uE,UAAU,eACZL,EAAK,uCAsGEivE,GACRl4D,UAjGR,WACE,MAAMi4D,EAAcx3B,EAAW02B,GAE/B,GAAKc,EAIL,OAAIA,EAAYE,gBACPruE,EAAAA,EAAAA,GACJ,yBAAwBmuE,EAAY/uD,sCAAsCvf,EAAMuf,WACjF,CAAC,KAAM,qBAQJpf,EAAAA,EAAAA,GAEJ,yBAAwBmuE,EAAY/uD,sCAAsCvf,EAAMuf,kFACjF,CAAC,KAAM,oBA4EQkvD,GACX9tD,aAAcrhB,EAAK,uBACnBshB,eAAgBstD,EAChBQ,mBAAiB,YCgC3B,IAAennE,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,EAAQqwE,wBAAAA,MACjB,MAAM3uE,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,GAGhC,MAAO,CAAE0B,KAAAA,EAAM4uE,sBAFe5uE,EAAKqnE,WAAasH,OAIlD,CAAC5vE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,kCAPpCZ,EA/N0D,EAC5E4B,KAAAA,EACA6uE,qBAAAA,EACAz4C,eAAAA,EACAg1C,6BAAAA,EACAwD,oBAAAA,EACA9mE,QAAAA,EACAqT,SAAAA,MAEA,MAAOquD,EAAaC,IAAkB7mE,EAAAA,EAAAA,IAA8B,KAC7D8mE,EAAuBC,IAA4B/mE,EAAAA,EAAAA,KAAS,IAC5D0vB,EAAWizC,IAAgB3iE,EAAAA,EAAAA,KAAS,IACpCksE,EAA6BC,EAA2BC,IAA8BlsD,EAAAA,GAAAA,KACvFxjB,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,GAEzB,MAAMmnE,GAAqB7tE,EAAAA,EAAAA,KAAQ,KACjC,GAAKpB,GAASA,EAAKq5B,UAAar5B,EAAKq5B,SAASkxC,QAI9C,OAAOvqE,EAAKq5B,SAASkxC,QAAQjpC,MAAK,EAAG5iB,OAAAA,KAAaA,IAAWmwD,MAC5D,CAAC7uE,EAAM6uE,KAEVhsE,EAAAA,EAAAA,KAAU,KACJ7C,MAAAA,GAAAA,EAAMq5B,UAAYw1C,IAAyBI,GAC7C74C,EAAe6xC,EAAAA,GAAAA,oBAEhB,CAACjoE,EAAMo2B,EAAgB64C,EAAoBJ,KAE9ChsE,EAAAA,EAAAA,KAAU,KACR4mE,GAAgBwF,MAAAA,OAAD,EAACA,EAAoB9E,gBAAkBnqE,MAAAA,OAAvC,EAAuCA,EAAM+oE,sBAAwB,IACpFY,GAAyB,GACzBpE,GAAa,KACZ,CAACvlE,EAAMivE,IAEV,MAAMjF,GAAyB3qE,EAAAA,EAAAA,KAAaqE,IAC1C,MAAM,KAAEiY,GAASjY,EAAEkJ,OAEnB,SAASq9D,EAA0Bz9D,GACjC,OAAOA,QAAQtL,EAGjBuoE,GAAgB5gC,IAAD,IACVA,EACH,CAACltB,GAAOsuD,EAA0BphC,EAAEltB,OACvB,iBAATA,GAA2B,CAC7BstD,SAAUgB,EAA0BphC,EAAEltB,SAG1CguD,GAAyB,KACxB,IAEGO,GAAwB7qE,EAAAA,EAAAA,KAAY,KACnCW,GAAS6uE,IAIdtJ,GAAa,GACb6F,EAA6B,CAC3B9sE,OAAQ0B,EAAKlD,GACb4hB,OAAQmwD,EACR1E,aAAcX,OAEf,CAACxpE,EAAM6uE,EAAsBrF,EAAa4B,IAEvC8D,GAAqB7vE,EAAAA,EAAAA,KAAY,KAChCW,GAAS6uE,GAIdzD,EAA6B,CAC3B9sE,OAAQ0B,EAAKlD,GACb4hB,OAAQmwD,EACR1E,aAAc,CACZgF,cAAc,OAGjB,CAACnvE,EAAM6uE,EAAsBzD,IAE1BgE,GAAuB/vE,EAAAA,EAAAA,KAAaS,KACpC8uE,MAIC5uE,IAASA,EAAK+oE,sBAIZ/oE,EAAK+oE,oBAAoBjpE,IAC/B,CAACE,EAAM4uE,IAEV,GAAKK,EAIL,OACE,0BAAKtvE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC4e,GAAA,EAAD,CAAU4hB,UAAQ,EAACxgC,UAAU,uBAC3B,mBAAC6e,GAAA,EAAD,CAAiBE,OAAQuwD,EAAmBvwD,UAG9C,yBAAI/e,UAAU,uBAAuBO,IAAI,QAAQZ,EAAK,0BAEtD,0BAAKK,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,eACL+lB,SAAU8nC,EAAYoB,aACtBphD,MAAOlqB,EAAK,wBACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,gBAC/B1iE,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,YACL+lB,SAAU8nC,EAAYsB,UACtBthD,MAAOlqB,EAAK,6BACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,aAC/B1iE,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,eACL+lB,SAAU8nC,EAAYR,eAAiBQ,EAAYP,SACnDz/C,MAAOlqB,EAAK,gCACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,gBAC/B1iE,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,YACL+lB,SAAU8nC,EAAYuB,UACtBvhD,MAAOlqB,EAAK,6BACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,aAC/B1iE,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAU8nC,EAAYwB,WACtBxhD,MAAOlqB,EAAK,8BACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,cAC/B1iE,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,cACL+lB,SAAU8nC,EAAYyB,YACtBzhD,MAAOlqB,EAAK,+BACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,eAC/B1iE,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,cACL+lB,SAAU8nC,EAAY0B,YACtB1hD,MAAOlqB,EAAK,+BACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,eAC/B1iE,SAAUs9D,KAGd,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAU8nC,EAAY2B,WACtB3hD,MAAOlqB,EAAK,8BACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,cAC/B1iE,SAAUs9D,OAKd4E,GACA,0BAAKjvE,UAAU,WACb,mBAAC4e,GAAA,EAAD,CAAUvc,KAAK,cAAcmF,QAAM,EAACgkB,aAAW,EAACvrB,QAASmvE,GACtDzvE,EAAK,4BAMd,mBAAC67B,GAAA,EAAD,CACEpvB,QAAS29D,EACT9pE,QAASsqE,EACTxoE,UAAWpC,EAAK,QAChBgN,SAAUgmB,GAETA,EACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,gBAIjB,mBAAC+gB,GAAA,EAAD,CACEpf,OAAQwtE,EACRhnE,QAASknE,EACTzsE,KAAK,oEACLoe,aAAa,SACbC,eAAgBsuD,EAChBh4C,sBAAoB,SCnI5B,IAAe3vB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MACT,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBud,KAAMmR,GAAc3uB,EAAO4uB,MAEnC,MAAO,CACLjtB,KAAAA,EACAic,cAAe5d,EAAO4d,cACtBwD,WAAWoI,EAAAA,EAAAA,IAAc7nB,GACzBgtB,UAAAA,KATc5uB,EA7FwC,EAC1D4B,KAAAA,EACAyf,UAAAA,EACAxD,cAAAA,EACA+Q,UAAAA,EACAoJ,eAAAA,EACAkzC,mBAAAA,EACAxhE,QAAAA,EACAqT,SAAAA,MAEA,MAAM7b,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,GAMzB,MAAMqhE,GAAe/nE,EAAAA,EAAAA,KAAQ,IACtBpB,EAAKq5B,UAAar5B,EAAKq5B,SAAS8vC,aAI9BnpE,EAAKq5B,SAAS8vC,aAAa/3C,MAAK,CAACC,EAAGC,IACrCD,EAAEg+C,SACI,EACC/9C,EAAE+9C,QACJ,EAGF,IAVA,IAYR,CAACrvE,IAEEsvE,GAAyBjwE,EAAAA,EAAAA,KAAauvD,IAC1C0a,EAAmB1a,EAAOlwC,OAAQkwC,EAAOmb,mBAAqB9tD,GAC9Dma,EAAe6xC,EAAAA,GAAAA,mBACd,CAAChsD,EAAeqtD,EAAoBlzC,IAEjCm5C,GAAkBlwE,EAAAA,EAAAA,KAAauvD,IACnC,GAAIA,EAAOygB,QACT,OAAO/vE,EAAK,kBAGd,MAAMkwE,EAAiB5gB,EAAOmb,iBAAmB/8C,EAAU4hC,EAAOmb,uBAAoB7oE,EAEtF,OAAIsuE,EACKlwE,EAAK,uBAAuB0xB,EAAAA,EAAAA,IAAgBw+C,IAG9ClwE,EAAK,kBACX,CAACA,EAAM0tB,IAEV,OACE,0BAAKrtB,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC4e,GAAA,EAAD,CACEvc,KAAK,SACLw7B,WAAS,EACT59B,QA9CV,WACEw2B,EAAe6xC,EAAAA,GAAAA,sBA+CP,2BAAMtoE,UAAU,SAASL,EAAK,aAC9B,2BAAMK,UAAU,YAAYL,EAAKmgB,EAAY,4BAA8B,yBAI/E,0BAAK9f,UAAU,UAAUO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjD,wBAAGvB,UAAU,aAAaO,IAAI,QAC3Buf,EACG,8DACA,6DAGL0pD,EAAa7qD,KAAKswC,GACjB,mBAACrwC,GAAA,EAAD,CACEze,IAAK8uD,EAAOlwC,OACZ/e,UAAU,sBACVC,QAAS,IAAM0vE,EAAuB1gB,IAEtC,mBAACpwC,GAAA,EAAD,CACEE,OAAQkwC,EAAOlwC,OACfD,OAAQ8wD,EAAgB3gB,GACxBr3B,eAAa,cCoC7B,IAAehwB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAGF,CAAE0B,MAFIpB,EAAAA,EAAAA,IAAWP,EAAQC,MAFhBF,EA9HwC,EAAG4B,KAAAA,EAAM8H,QAAAA,EAASqT,SAAAA,MAC5E,MAAM7b,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,GAEzB,MAAMqhE,GAAe/nE,EAAAA,EAAAA,KAAQ,IACtBpB,GAASA,EAAKq5B,UAAar5B,EAAKq5B,SAAS8vC,aAIvCnpE,EAAKq5B,SAAS8vC,aAAa/3C,MAAK,CAACC,EAAGC,IACrCD,EAAEg+C,SACI,EACC/9C,EAAE+9C,QACJ,EAGF,IAVA,IAYR,CAACrvE,IAEEuvE,GAAkBlwE,EAAAA,EAAAA,KAAauvD,GAC/BA,EAAOygB,QACF/vE,EAAK,kBAGPA,EAAK,iBACX,CAACA,IAEJ,OACE,0BAAKK,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,0BAA0BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjE,yBAAIvB,UAAU,kBAAkBO,IAAI,QAApC,WAEA,0BAAKP,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAS,EACTlY,MAAOlqB,EAAK,qBACZoN,cAAUxL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAS,EACTlY,MAAOlqB,EAAK,2BACZoN,cAAUxL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAS,EACTlY,MAAOlqB,EAAK,4BACZoN,cAAUxL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAS,EACTlY,MAAOlqB,EAAK,6BACZoN,cAAUxL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAS,EACTlY,MAAOlqB,EAAK,iCACZoN,cAAUxL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAS,EACTlY,MAAOlqB,EAAK,gCACZoN,cAAUxL,KAGd,0BAAKvB,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAS,EACTlY,MAAOlqB,EAAK,gCACZoN,cAAUxL,MAKhB,0BAAKvB,UAAU,0BAA0BO,IAAKZ,EAAKkc,MAAQ,WAAQta,GACjE,yBAAIvB,UAAU,kBAAkBO,IAAI,QAAQZ,EAAK,6BAEjD,0BAAKK,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,SAAS,EACTlY,MAAOlqB,EAAK,qBACZoN,cAAUxL,KAIbioE,EAAa7qD,KAAKswC,GACjB,mBAACrwC,GAAA,EAAD,CACEze,IAAK8uD,EAAOlwC,OACZ/e,UAAU,uCACVC,aAASsB,EACTiG,QAAM,GAEN,mBAACs6B,GAAA,EAAD,CAAUjY,MAAM,GAAGkY,SAAS,IAC5B,mBAACljB,GAAA,EAAD,CACEE,OAAQkwC,EAAOlwC,OACfD,OAAQ8wD,EAAgB3gB,GACxBr3B,eAAa,cCmM7B,IAAehwB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,EAAQqwE,wBAAAA,MACjB,MAAM3uE,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBud,KAAMmR,GAAc3uB,EAAO4uB,OAC7B,cAAEhR,GAAkB5d,EAI1B,MAAO,CACL2B,KAAAA,EACAgtB,UAAAA,EACA/Q,cAAAA,EACAwD,WAPgBoI,EAAAA,EAAAA,IAAc7nB,GAQ9B4uE,sBAP4B5uE,EAAKqnE,WAAasH,OAUlD,CAAC5vE,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CAAC,qBAhBpCZ,EAlSsD,EACxEywE,qBAAAA,EACAz4C,eAAAA,EACAp2B,KAAAA,EACAgtB,UAAAA,EACA/Q,cAAAA,EACAwD,UAAAA,EACAmvD,oBAAAA,EACAa,gBAAAA,EACA3nE,QAAAA,EACAqT,SAAAA,MAEA,MAAOquD,EAAaC,IAAkB7mE,EAAAA,EAAAA,IAA6B,KAC5D09B,EAAWovC,IAAgB9sE,EAAAA,EAAAA,KAAS,IACpC0vB,EAAWizC,IAAgB3iE,EAAAA,EAAAA,KAAS,IACpC+sE,EAAiCC,EAA+BC,IAAkC/sD,EAAAA,GAAAA,MAClGgtD,EAAaC,IAAkBntE,EAAAA,EAAAA,IAAS,IACzCtD,GAAOC,EAAAA,EAAAA,MAEb+b,EAAAA,EAAAA,IAAeH,EAAUrT,GAEzB,MAAMmnE,GAAqB7tE,EAAAA,EAAAA,KAAQ,KACjC,GAAKpB,EAAKq5B,UAAar5B,EAAKq5B,SAAS8vC,aAIrC,OAAOnpE,EAAKq5B,SAAS8vC,aAAa7nC,MAAK,EAAG5iB,OAAAA,KAAaA,IAAWmwD,MACjE,CAAC7uE,EAAM6uE,KAEVhsE,EAAAA,EAAAA,KAAU,KACJ7C,MAAAA,GAAAA,EAAMq5B,UAAYw1C,IAAyBI,GAC7C74C,EAAe6xC,EAAAA,GAAAA,sBAEhB,CAACjoE,EAAMo2B,EAAgB64C,EAAoBJ,KAE9ChsE,EAAAA,EAAAA,KAAU,KACR4mE,GAAgBwF,MAAAA,OAAD,EAACA,EAAoBe,cAAgB,IACpDD,IAAiBd,MAAAA,OAAD,EAACA,EAAoBa,cAAgB,IAAIl8B,OAAO,EAvCpC,KAwC5B87B,GAAa,GACbnK,GAAa,KACZ,CAAC0J,IAEJ,MAAMjF,GAAyB3qE,EAAAA,EAAAA,KAAaqE,IAC1C,MAAM,KAAEiY,GAASjY,EAAEkJ,OAMnB68D,GAAgB5gC,IAAD,UACVA,EACH,CAACltB,IANgCnP,EAMCq8B,EAAEltB,IAL7BnP,QAAQtL,IADjB,IAAmCsL,KAQnCkjE,GAAa,KACZ,IAEGxF,GAAwB7qE,EAAAA,EAAAA,KAAY,KACnCwvE,IAILtJ,GAAa,GACbkK,EAAgB,CACdnxE,OAAQ0B,EAAKlD,GACb4hB,OAAQmwD,EACRmB,YAAaxG,EACbsG,YAAAA,OAED,CAAC9vE,EAAM6uE,EAAsBrF,EAAasG,EAAaL,IAEpDQ,GAAqB5wE,EAAAA,EAAAA,KAAY,KAChCwvE,IAILY,EAAgB,CACdnxE,OAAQ0B,EAAKlD,GACb4hB,OAAQmwD,EACRmB,YAAa,KAEfH,OACC,CAAC7vE,EAAKlD,GAAI+yE,EAAgChB,EAAsBY,IAE7DL,GAAuB/vE,EAAAA,EAAAA,KAAaS,MACpCinB,EAAAA,EAAAA,IAAiB/mB,KAIjB4uE,GAAwB5uE,EAAKgwE,aAIzBhwE,EAAKgwE,YAAalwE,KACzB,CAACE,EAAM4uE,IAEJsB,GAAe9uE,EAAAA,EAAAA,KAAQ,KAC3B,IAAK6tE,EACH,OAGF,GAAIA,EAAmBI,QACrB,OAAO/vE,EAAK,kBAGd,MAAMkwE,EAAiBP,EAAmBlF,iBACtC/8C,EAAUiiD,EAAmBlF,uBAC7B7oE,EAEJ,OAAIsuE,EACKlwE,EAAK,uBAAuB0xB,EAAAA,EAAAA,IAAgBw+C,IAG9ClwE,EAAK,kBACX,CAAC2vE,EAAoBjiD,EAAW1tB,IAE7B6wE,GAA0B9wE,EAAAA,EAAAA,KAAaqE,IAC3C,MAAM,MAAE8I,GAAU9I,EAAEkJ,OACpBmjE,EAAevjE,GACfkjE,GAAa,KACZ,IAEH,GAAKT,EAIL,OACE,0BAAKtvE,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,WACb,mBAAC4e,GAAA,EAAD,CAAU4hB,UAAQ,EAACxgC,UAAU,uBAC3B,mBAAC6e,GAAA,EAAD,CACEE,OAAQuwD,EAAmBvwD,OAC3BD,OAAQyxD,EACR34C,eAAa,KAIjB,yBAAI53B,UAAU,uBAAuBO,IAAI,QAAQZ,EAAK,uBAEtD,0BAAKK,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,aACL+lB,UAAW8nC,EAAY2B,WACvB3hD,MAAOlqB,EAAKmgB,EAAY,6BAA+B,4BACvDorD,UAAQ,EACRv+D,SAAU8iE,EAAqB,cAC/B1iE,SAAUs9D,KAGbvqD,GACC,0BAAK9f,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,eACL+lB,UAAW8nC,EAAY4G,aACvB5mD,MAAOlqB,EAAK,yBACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,gBAC/B1iE,SAAUs9D,KAIfvqD,GACC,0BAAK9f,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,eACL+lB,UAAW8nC,EAAY6G,aACvB7mD,MAAOlqB,EAAK,yBACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,gBAC/B1iE,SAAUs9D,KAIhB,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,iBACL+lB,UAAW8nC,EAAYriD,eACvBqC,MAAOlqB,EAAKmgB,EAAY,0BAA4B,gCACpDorD,UAAQ,EACRv+D,SAAU8iE,EAAqB,kBAC/B1iE,SAAUs9D,MAGZvqD,GACA,0BAAK9f,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,WACL+lB,UAAW8nC,EAAY8G,SACvB9mD,MAAOlqB,EAAK,qBACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,YAC/B1iE,SAAUs9D,KAIhB,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,cACL+lB,UAAW8nC,EAAYyB,YACvBzhD,MAAOlqB,EAAK,qBACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,eAC/B1iE,SAAUs9D,MAGZvqD,GACA,0BAAK9f,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,cACL+lB,UAAW8nC,EAAY0B,YACvB1hD,MAAOlqB,EAAK,wBACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,eAC/B1iE,SAAUs9D,KAIhB,0BAAKrqE,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,YACL+lB,UAAW8nC,EAAY+G,UACvB/mD,MAAOlqB,EAAK,sBACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,aAC/B1iE,SAAUs9D,MAGZvqD,GACA,0BAAK9f,UAAU,yBACb,mBAAC8hC,GAAA,EAAD,CACE9lB,KAAK,YACL+lB,UAAW8nC,EAAYgH,UACvBhnD,MAAOlqB,EAAK,4BACZurE,UAAQ,EACRv+D,SAAU8iE,EAAqB,aAC/B1iE,SAAUs9D,KAKf4E,GACC,wBAAGjvE,UAAU,oBAAoBO,IAAI,QAClCZ,EAAK,kCAIRmgB,GACA,mBAAC5B,GAAA,EAAD,CACE/gB,GAAG,cACH0sB,MAAOlqB,EAAK,iBACZoN,SAAUyjE,EACV3jE,MAAOsjE,EACPxjE,SAAUsiE,EACV6B,UA/PkB,KAmQrBx0D,IAAkB4yD,IAAyBD,GAC1C,mBAACrwD,GAAA,EAAD,CAAUvc,KAAK,SAASmF,QAAM,EAACgkB,aAAW,EAACvrB,QAASgwE,GACjDtwE,EAAK,2BAMd,mBAAC67B,GAAA,EAAD,CACEpvB,QAASu0B,EACT1gC,QAASsqE,EACTxoE,UAAWpC,EAAK,QAChBgN,SAAUgmB,GAETA,EACC,mBAACliB,EAAA,EAAD,CAAS3O,MAAM,UAEf,wBAAG9B,UAAU,gBAIjB,mBAAC+gB,GAAA,EAAD,CACEpf,OAAQquE,EACR7nE,QAAS+nE,EACTttE,KAAK,+CACLoe,aAAa,UACbC,eAAgBqvD,EAChB/4C,sBAAoB,SCvP5B,IAAe3vB,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBud,KAAMmR,GAAc3uB,EAAO4uB,MAInC,MAAO,CACLs9C,QAJcvqE,MAAAA,GAAH,UAAGA,EAAMq5B,gBAAT,aAAG,EAAgBkxC,QAK9Bv9C,UAAAA,EACAvN,UALgBzf,IAAQ6nB,EAAAA,EAAAA,IAAc7nB,GAMtCy9C,iBAAkBp/C,EAAOo/C,qBAG7B,CAAC1+C,EAAWC,KAA2BC,EAAAA,EAAAA,IAAKD,EAAS,CACnD,kBAfgBZ,EAnDkD,EACpEmsE,QAAAA,EACAv9C,UAAAA,EACAvN,UAAAA,EACAixD,aAAAA,EACA5oE,QAAAA,EACAqT,SAAAA,EACAsiC,iBAAAA,MAEA,MAAMc,GAAYn9C,EAAAA,EAAAA,KAAQ,KACxB,GAAKmpE,GAAYv9C,EAIjB,OAAO2wB,EAAAA,EAAAA,IAAY4sB,EAAQjsD,KAAI,EAAGI,OAAAA,KAAaA,IAASsO,OAAW9rB,EAAWu8C,KAC7E,CAAC8sB,EAAS9sB,EAAkBzwB,IAEzB44C,GAAoBvmE,EAAAA,EAAAA,KAAavC,IACrC4zE,EAAa,CAAE5zE,GAAAA,MACd,CAAC4zE,IAIJ,OAFAp1D,EAAAA,EAAAA,IAAeH,EAAUrT,GAGvB,0BAAKnI,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUyuE,eAAa,GACnC7vB,EACCA,EAAUjgC,KAAI,CAACxhB,EAAIynB,IACjB,mBAAChG,GAAA,EAAD,CACEze,IAAKhD,EACLuxE,cAAe9pD,EACf5kB,UAAU,kCACVC,QAAS,IAAMgmE,EAAkB9oE,IAEjC,mBAAC0hB,GAAA,EAAD,CAAiBE,OAAQ5hB,EAAIy6B,eAAa,OAI9C,mBAAC3F,GAAA,EAAD,CACEy8C,cAAe,EACfvuE,IAAI,gBACJyC,KAAMkd,EAAY,uBAAyB,4BCczD,IAAelY,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KAClB,CAACC,GAAUC,OAAAA,MAAyB,MAClC,MAAM0B,GAAOpB,EAAAA,EAAAA,IAAWP,EAAQC,IACxBud,KAAMmR,GAAc3uB,EAAO4uB,MAInC,MAAO,CACLs9C,QAJcvqE,MAAAA,GAAH,UAAGA,EAAMq5B,gBAAT,aAAG,EAAgBkxC,QAK9Bv9C,UAAAA,EACAvN,UALgBzf,IAAQ6nB,EAAAA,EAAAA,IAAc7nB,GAMtCy9C,iBAAkBp/C,EAAOo/C,oBAXXr/C,EAxDgD,EAClE4uB,UAAAA,EACAu9C,QAAAA,EACA9qD,UAAAA,EACA2W,eAAAA,EACAkzC,mBAAAA,EACAxhE,QAAAA,EACAqT,SAAAA,EACAsiC,iBAAAA,OAEAniC,EAAAA,EAAAA,IAAeH,EAAUrT,GAEzB,MAAMy2C,GAAYn9C,EAAAA,EAAAA,KAAQ,KACxB,GAAKmpE,GAAYv9C,EAIjB,OAAO2wB,EAAAA,EAAAA,IACL4sB,EAAQ7tD,QAAQkyC,IAAYA,EAAOygB,UAAS/wD,KAAI,EAAGI,OAAAA,KAAaA,IAChEsO,OAAW9rB,EAAWu8C,KAEvB,CAAC8sB,EAAS9sB,EAAkBzwB,IAEzB88C,GAA6BzqE,EAAAA,EAAAA,KAAasxE,IAC9CrH,EAAmBqH,GACnBv6C,EAAe6xC,EAAAA,GAAAA,wBACd,CAACqB,EAAoBlzC,IAExB,OACE,0BAAKz2B,UAAU,cACb,0BAAKA,UAAU,iBACb,0BAAKA,UAAU,UAAUyuE,eAAa,GACnC7vB,EACCA,EAAUjgC,KAAI,CAACxhB,EAAIynB,IACjB,mBAAChG,GAAA,EAAD,CACEze,IAAKhD,EACLuxE,cAAe9pD,EACf5kB,UAAU,kCACVC,QAAS,IAAMkqE,EAA2BhtE,IAE1C,mBAAC0hB,GAAA,EAAD,CAAiBE,OAAQ5hB,EAAIy6B,eAAa,OAI9C,mBAAC3F,GAAA,EAAD,CACEy8C,cAAe,EACfvuE,IAAI,gBACJyC,KAAMkd,EAAY,uBAAyB,4BC4IzD,IAAelY,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IAGQ,CACLuyE,gBAHqBC,EAAAA,EAAAA,IAA4BxyE,MAFnCD,EAtL0B,EAC5CE,OAAAA,EACAy3B,cAAAA,EACA84C,qBAAAA,EACAF,wBAAAA,EACAv4C,eAAAA,EACAkzC,mBAAAA,EACAxhE,QAAAA,EACAqT,SAAAA,EACAy1D,eAAAA,MAEA,OAAQ76C,GACN,KAAKkyC,EAAAA,GAAAA,QACH,OAAQ2I,GACN,IAAK,OACH,OACE,mBAAC,GAAD,CACE9wE,IAAKxB,EACLogB,OAAQpgB,EACRwJ,QAASA,EACTqT,SAAUA,IAGhB,IAAK,QACH,OACE,mBAAC,GAAD,CACErb,IAAKxB,EACLA,OAAQA,EACR83B,eAAgBA,EAChBtuB,QAASA,EACTqT,SAAUA,GAAY,CACpB8sD,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,iBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,qBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACAlrE,SAASg5B,KAGjB,IAAK,UACH,OACE,mBAAC,GAAD,CACEj2B,IAAKxB,EACLA,OAAQA,EACR83B,eAAgBA,EAChBtuB,QAASA,EACTqT,SAAUA,GAAY,CACpB8sD,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,mBACAA,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACAlrE,SAASg5B,KAKnB,MAGF,KAAKkyC,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACR6c,SAAUA,EACVrT,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACR83B,eAAgBA,EAChBjb,SAAUA,EACVrT,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,iBACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACR83B,eAAgBA,EAChBkzC,mBAAoBA,EACpBnuD,SAAUA,GAAY,CACpB8sD,EAAAA,GAAAA,kBACAA,EAAAA,GAAAA,2BACAA,EAAAA,GAAAA,sBACAlrE,SAASg5B,GACXjuB,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,kBACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACR6c,SAAUA,EACVrT,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,2BACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACRgrE,mBAAoBA,EACpBlzC,eAAgBA,EAChBjb,SAAUA,GAAY,CACpB8sD,EAAAA,GAAAA,sBACAlrE,SAASg5B,GACXjuB,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,qBACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACRuwE,qBAAsBA,EACtBF,wBAAyBA,EACzBv4C,eAAgBA,EAChBjb,SAAUA,EACVrT,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACR83B,eAAgBA,EAChBkzC,mBAAoBA,EACpBnuD,SAAUA,GAAY,CACpB8sD,EAAAA,GAAAA,gBACAA,EAAAA,GAAAA,oBACAlrE,SAASg5B,GACXjuB,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,mBACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACR6c,SAAUA,EACVrT,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,gBACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACRuwE,qBAAsBA,EACtBF,wBAAyBA,EACzBv4C,eAAgBA,EAChBjb,SAAUA,EACVrT,QAASA,IAIf,KAAKmgE,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE3pE,OAAQA,EACR6c,SAAUA,EACVrT,QAASA,S,eClNnB,MAAMgpE,GAAO,8BACPC,GAAc,uBACdC,GAAc,uBAEb,IAAKC,I,SAAAA,GAAAA,EAAAA,EAAAA,QAAAA,GAAAA,UAAAA,EAAAA,EAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,WAAAA,GAAAA,a,CAAAA,KAAAA,GAAAA,KAMZ,MAAMC,GAAgC,CACpC,CAACD,GAASE,SAAU,GACpB,CAACF,GAASG,MAAO,OACjB,CAACH,GAASI,YAAa,cAGlB,SAASC,GAAeC,GAE7B,OADAA,EAAaA,EAAW1sD,QAAQ,MAAO,IACnCisD,GAAKx4C,KAAKi5C,GACLN,GAASG,KAEdL,GAAYz4C,KAAKi5C,IAAeP,GAAY14C,KAAKi5C,GAC5CN,GAASI,WAEXJ,GAASE,QCvBlB,MA0OMK,GAAuC,GAChCC,GAA2B,oDAoCxC,GA/Qc,+8JA8OXtgD,MAAM,MACN7S,KAAKozD,IAQG,CACL50E,GARS40E,EAAI99B,OAAO,EAAG,GAQnB+9B,KAPOD,EAAI99B,OAAO,EAAG,GAOf9tB,KANE,IAAG4rD,EAAI3iD,MAAM,OAAQ,KAMjBpT,KALL+1D,EAAIvgD,MAAM,OAAO,GAKNygD,YAI5B,SAA8BC,GAC5B,IAAKA,EACH,OAAOJ,GAGT,MAAMK,EAAcD,EAAO,GAC3B,IAAIE,EAEJ,IAAKP,GAAaM,GAAc,CAC9B,MAAME,EAAoBF,EAAY3gD,MAAM,IAAI7S,IAAI3R,QACpDolE,EAAoBC,EAAkB98B,QAAO,CAACC,EAAQ1X,EAAOlZ,IACnD,GAAE4wB,WAAgB1X,MAAUlZ,EAAI,EAAI,IAAM,MACjD,IACHitD,GAAaM,GAAe,IAAIG,OAAQ,GAAEF,IAAoB,MAAMG,OAAO,EAAIF,EAAkBh0E,WAGnG,OAAOwzE,GAAaM,GAvBEK,CADLT,EAAI3iD,MAAM,aCpNvBuG,GAA2B,CAC/B88C,YAAa,GACbC,YAAa,GACbC,KAAM,GACN18C,MAAO,GACP28C,YAAa,GACbC,SAAU,GACVzhD,SAAU,GACV2E,MAAO,GACP+8C,MAAO,GACPC,SAAU,GACVnB,WAAY,GACZoB,WAAY,GACZC,OAAQ,GACRC,IAAK,GACLC,eAAgB,GAChBC,WAAY,GACZC,UAAU,EACVC,iBAAiB,EACjBC,WAAY,IAGRC,GAAgD,CAACv9C,EAAOC,KAC5D,OAAQA,EAAOppB,MACb,IAAK,iBACH,MAAO,IACFmpB,EACHw8C,YAAav8C,EAAOC,QACpBo9C,WAAY,IACPt9C,EAAMs9C,WACTd,iBAAalxE,IAGnB,IAAK,iBACH,MAAO,IACF00B,EACHy8C,YAAax8C,EAAOC,QACpBo9C,WAAY,IACPt9C,EAAMs9C,WACTb,iBAAanxE,IAGnB,IAAK,aACH,MAAO,IACF00B,EACH08C,KAAMz8C,EAAOC,QACbo9C,WAAY,IACPt9C,EAAMs9C,WACTZ,UAAMpxE,IAGZ,IAAK,cACH,MAAO,IACF00B,EACHA,MAAOC,EAAOC,QACdo9C,WAAY,IACPt9C,EAAMs9C,WACTt9C,WAAO10B,IAGb,IAAK,gBACH,MAAO,IACF00B,EACH28C,YAAa18C,EAAOC,QACpBg9C,eAAgBM,GAAkBv9C,EAAOC,SACzCo9C,WAAY,IACPt9C,EAAMs9C,WACTX,iBAAarxE,IAGnB,IAAK,iBACH,MAAO,IACF00B,EACH48C,SAAU38C,EAAOC,QACjBo9C,WAAY,IACPt9C,EAAMs9C,WACTV,cAAUtxE,IAGhB,IAAK,iBACH,MAAO,IACF00B,EACH7E,SAAU8E,EAAOC,QACjBo9C,WAAY,IACPt9C,EAAMs9C,WACTniD,cAAU7vB,IAGhB,IAAK,cACH,MAAO,IACF00B,EACHF,MAAOG,EAAOC,QACdo9C,WAAY,IACPt9C,EAAMs9C,WACTx9C,WAAOx0B,IAGb,IAAK,cACH,MAAO,IACF00B,EACH68C,MAAO58C,EAAOC,QACdo9C,WAAY,IACPt9C,EAAMs9C,WACTT,WAAOvxE,IAGb,IAAK,iBACH,MAAO,IAAK00B,EAAO88C,SAAU78C,EAAOC,SACtC,IAAK,mBACH,MAAO,IACFF,EACH27C,WAAY17C,EAAOC,QACnBo9C,WAAY,IACPt9C,EAAMs9C,WACT3B,gBAAYrwE,IAGlB,IAAK,mBACH,MAAO,IACF00B,EACH+8C,WAAY98C,EAAOC,QACnBo9C,WAAY,IACPt9C,EAAMs9C,WACTP,gBAAYzxE,IAGlB,IAAK,mBACH,MAAO,IACF00B,EACHg9C,OAAQ/8C,EAAOC,QACfo9C,WAAY,IACPt9C,EAAMs9C,WACTN,YAAQ1xE,IAGd,IAAK,gBACH,MAAO,IACF00B,EACHi9C,IAAKh9C,EAAOC,QACZo9C,WAAY,IACPt9C,EAAMs9C,WACTL,SAAK3xE,IAGX,IAAK,uBACH,MAAO,IACF00B,EACHk9C,eAAgBj9C,EAAOC,QACvBo9C,WAAY,IACPt9C,EAAMs9C,WACTJ,oBAAgB5xE,IAGtB,IAAK,mBACH,MAAO,IACF00B,EACHm9C,WAAYl9C,EAAOC,QACnBo9C,WAAY,IACPt9C,EAAMs9C,WACTH,gBAAY7xE,IAGlB,IAAK,iBACH,MAAO,IAAK00B,EAAOo9C,SAAUn9C,EAAOC,SACtC,IAAK,wBACH,MAAO,IAAKF,EAAOq9C,gBAAiBp9C,EAAOC,SAC7C,IAAK,iBACH,OAAID,EAAOC,QAAQy8C,YACV,IACF38C,KACAC,EAAOC,QACVg9C,eAAgBM,GAAkBv9C,EAAOC,QAAQy8C,cAG9C,IAAK38C,KAAUC,EAAOC,SAC/B,IAAK,gBACH,MAAO,IACFF,EACHs9C,WAAY,IACPt9C,EAAMs9C,cACNr9C,EAAOC,UAGhB,QACE,OAAOF,IAIb,SAASw9C,GAAkBC,GACzB,MAAM39B,EAAUsB,GAAAA,MAAiB,EAAGl6C,GAAAA,KAASA,IAAOu2E,IACpD,OAAO39B,EAAUA,EAAQ/5B,KAAO,GCvNnB,SAAS23D,GACtBrsE,EAAkCssE,EAHX,MAKvB1wE,EAAAA,EAAAA,KAAU,KACJoF,EAAAA,IAIJxC,YAAW,MACTu5D,EAAAA,EAAAA,KAAQ,KACF/3D,EAAInB,SACNmB,EAAInB,QAAQ8W,aAGf22D,KACF,CAACtsE,EAAKssE,ICNX,MAyCA,IAAehsE,EAAAA,EAAAA,KAzCe0qB,IAC5B,MAAM,GACJn1B,EADI,MAEJ0P,EAFI,MAGJgd,EAHI,SAIJgqD,EAJI,MAKJ10D,EALI,IAMJ7X,EANI,YAOJ8W,EAPI,SAQJrR,EARI,SASJQ,GACE+kB,EACEwhD,EAAY30D,GAAS0K,EACrBwzC,GAAgBv5D,EAAAA,EAAAA,GACpB,cACA+I,GAAS,UACTsS,GAAS,QACT20D,GAAa,aACbD,GAAY,aACZ,eAGF,OACE,0BAAK7zE,UAAWq9D,GACd,6BACEr9D,UAAU,eACV7C,GAAIA,EACJ0P,MAAOA,GAAS,GAChBE,SAAUA,EACVqR,YAAaA,GAAeyL,EAC5BviB,IAAKA,GAEJiG,GAEFumE,GAAa32E,GACZ,4BAAO42E,QAAS52E,GAAK22E,OCsJ7B,IAAelsE,EAAAA,EAAAA,KAlLoB,EACjCquB,MAAAA,EACA+9C,UAAAA,EACAC,UAAAA,EACAC,SAAAA,EACAC,YAAAA,EACA91C,SAAAA,MAGA,MAAM7xB,GAAW7G,EAAAA,EAAAA,IAAyB,MAEpCyuE,GAAWzuE,EAAAA,EAAAA,IAAyB,MAEpC0uE,GAAmB1uE,EAAAA,EAAAA,IAA0B,OAEnDzC,EAAAA,EAAAA,KAAU,KACJmxE,EAAiBluE,SAChBkuE,EAAiBluE,QAAQ0G,QAAUopB,EAAM28C,cAC5CyB,EAAiBluE,QAAQ0G,MAAQopB,EAAM28C,eAExC,CAAC38C,EAAM28C,cAEV,MAAMjzE,GAAOC,EAAAA,EAAAA,KAEb+zE,GAAuBnnE,GAEvB,MAAM8nE,GAAuB50E,EAAAA,EAAAA,KAAaqE,IACxCs6B,EAAS,CAAEvxB,KAAM,iBAAkBqpB,QAASpyB,EAAEkJ,OAAOJ,UACpD,CAACwxB,IAEEk2C,GAAuB70E,EAAAA,EAAAA,KAAaqE,IACxCs6B,EAAS,CAAEvxB,KAAM,iBAAkBqpB,QAASpyB,EAAEkJ,OAAOJ,UACpD,CAACwxB,IAEEm2C,GAAmB90E,EAAAA,EAAAA,KAAaqE,IACpCs6B,EAAS,CAAEvxB,KAAM,aAAcqpB,QAASpyB,EAAEkJ,OAAOJ,UAChD,CAACwxB,IAEEo2C,GAAoB/0E,EAAAA,EAAAA,KAAaqE,IACrCs6B,EAAS,CAAEvxB,KAAM,cAAeqpB,QAASpyB,EAAEkJ,OAAOJ,UACjD,CAACwxB,IAEEq2C,GAAsBh1E,EAAAA,EAAAA,KAAaqE,IACvCs6B,EAAS,CAAEvxB,KAAM,gBAAiBqpB,QAASpyB,EAAEkJ,OAAOJ,UACnD,CAACwxB,IAEEs2C,GAAuBj1E,EAAAA,EAAAA,KAAaqE,IACxCs6B,EAAS,CAAEvxB,KAAM,iBAAkBqpB,QAASpyB,EAAEkJ,OAAOJ,UACpD,CAACwxB,IAEEu2C,GAAuBl1E,EAAAA,EAAAA,KAAaqE,IACxCs6B,EAAS,CAAEvxB,KAAM,iBAAkBqpB,QAASpyB,EAAEkJ,OAAOJ,UACpD,CAACwxB,IAEEw2C,GAAoBn1E,EAAAA,EAAAA,KAAaqE,IACrCs6B,EAAS,CAAEvxB,KAAM,cAAeqpB,QAASpyB,EAAEkJ,OAAOJ,UACjD,CAACwxB,IAEEy2C,GAAoBp1E,EAAAA,EAAAA,KAAaqE,IACrC,IAAI,MAAE8I,GAAU9I,EAAEkJ,OAClBJ,EAAS,IAAGA,EAAMqY,QAAQ,MAAO,MAC7BkvD,EAASjuE,UACXiuE,EAASjuE,QAAQ0G,MAAQA,GAE3BwxB,EAAS,CAAEvxB,KAAM,cAAeqpB,QAAStpB,MACxC,CAACwxB,IAEE02C,GAAuBr1E,EAAAA,EAAAA,KAAaqE,IACxCs6B,EAAS,CAAEvxB,KAAM,iBAAkBqpB,QAASpyB,EAAEkJ,OAAOJ,UACpD,CAACwxB,KAEE,WAAEk1C,GAAet9C,EACvB,OACE,0BAAKj2B,UAAU,gBACb,+BACGm0E,EACC,8BACE,6BAAKx0E,EAAK,2BACV,mBAACue,GAAA,EAAD,CACE5W,IAAKkF,EACLqd,MAAM,oBACN9c,SAAUunE,EACVznE,MAAOopB,EAAMw8C,YACb1sD,UAAU,OACV5G,MAAOo0D,EAAWd,cAEpB,mBAACv0D,GAAA,EAAD,CACE2L,MAAM,oBACN9c,SAAUwnE,EACV1nE,MAAOopB,EAAMy8C,YACb3sD,UAAU,OACV5G,MAAOo0D,EAAWb,cAEpB,mBAACx0D,GAAA,EAAD,CACE2L,MAAM,OACN9c,SAAUynE,EACV3nE,MAAOopB,EAAM08C,KACb5sD,UAAU,OACV5G,MAAOo0D,EAAWZ,OAEpB,mBAACz0D,GAAA,EAAD,CACE2L,MAAM,QACN9c,SAAU0nE,EACV5nE,MAAOopB,EAAMA,MACblQ,UAAU,OACV5G,MAAOo0D,EAAWt9C,QAEpB,mBAAC,GAAD,CACEpM,MAAM,UACNzL,YAAY,UACZrR,SAAU2nE,EACV7nE,MAAOopB,EAAM28C,YACbiB,SAAU9qE,SAAQ,GAClB5L,GAAG,mBACHgiB,MAAOo0D,EAAWX,YAClBtrE,IAAK+sE,GAEJh9B,GAAAA,KAAgB,EAAGr7B,KAAAA,EAAM7e,GAAAA,KACxB,6BACE0P,MAAO1P,EACP6C,UAAU,eAETgc,MAKP,mBAACkC,GAAA,EAAD,CACE2L,MAAM,YACN9c,SAAU4nE,EACV9nE,MAAOopB,EAAM48C,SACb9sD,UAAU,OACV5G,MAAOo0D,EAAWV,iBAGpBtxE,EACF2yE,GAAYF,GAAaC,EACzB,6BAAKt0E,EAAK,iCACR4B,EACF2yE,GACA,mBAACh2D,GAAA,EAAD,CACE2L,MAAM,YACN9c,SAAU6nE,EACV/nE,MAAOopB,EAAM7E,SACbrL,UAAU,OACV5G,MAAOo0D,EAAWniD,WAGpB4iD,GACA,mBAAC91D,GAAA,EAAD,CACE2L,MAAM,QACN9c,SAAU8nE,EACVhoE,MAAOopB,EAAMF,MACbhQ,UAAU,QACV5G,MAAOo0D,EAAWx9C,QAGpBk+C,GACA,mBAAC/1D,GAAA,EAAD,CACE2L,MAAM,eACN9c,SAAU+nE,EACVjoE,MAAOopB,EAAM68C,MACb/sD,UAAU,MACV5G,MAAOo0D,EAAWT,MAClBxrE,IAAK8sE,IAGT,mBAACtyC,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,uBACZ+mC,SAAU/mC,EAAK,2BACfoiC,QAASh5B,QAAQktB,EAAMo9C,UACvBtmE,SAAUgoE,SCtIpB,IAAentE,EAAAA,EAAAA,KAxCgB,EAC7BquB,MAAAA,EACA++C,gBAAAA,EACAC,SAAAA,EACA52C,SAAAA,MAEA,MAAM1+B,GAAOC,EAAAA,EAAAA,MAEbsD,EAAAA,EAAAA,KAAU,KACH8xE,IAAmB/+C,EAAM88C,UAG9B10C,EAAS,CAAEvxB,KAAM,iBAAkBqpB,QAAS6+C,EAAgB,GAAG73E,OAC9D,CAAC63E,EAAiB/+C,EAAM88C,SAAU10C,IAErC,MAAM62C,GAAuBx1E,EAAAA,EAAAA,KAAamN,IACxCwxB,EAAS,CAAEvxB,KAAM,iBAAkBqpB,QAAStpB,MAC3C,CAACwxB,IAEEtU,GAAUtoB,EAAAA,EAAAA,KAAQ,IAAOuzE,EAAgBr2D,KAAI,EAAGxhB,GAAI0P,EAAO+S,MAAOiK,EAAOqtC,OAAAA,MAA5B,CACjDrtC,MAAAA,EACA6c,UAAUyuC,EAAAA,GAAAA,GAAeje,EAAQ+d,EAAUt1E,EAAKwmB,MAChDtZ,MAAAA,OACI,CAACmoE,EAAiBC,EAAUt1E,EAAKwmB,OAEvC,OACE,0BAAKnmB,UAAU,YACb,+BACE,sDACA,mBAAC8pB,GAAA,EAAD,CACE9N,KAAK,mBACL+N,QAASA,EACThd,SAAUmoE,EACVlrD,SAAUiM,EAAM88C,gBC6B1B,SAASqC,GACPzhC,EAAgC/zB,EAAe/S,EAAeooE,EAAmBI,GAAO,GAExF,OACE,0BAAKr1E,UAAY,oBAAkBq1E,EAAO,uBAAyB,KACjE,0BAAKr1E,UAAU,SACX4f,GAEJ,0BAAK5f,UAAU,UACZm1E,EAAAA,GAAAA,GAAetoE,EAAOooE,EAAUthC,KAMzC,SAAS2hC,GAAmBjzE,EAAcud,EAAemd,GACvD,OACE,0BAAK/8B,UAAU,sBACb,wBAAGA,UAAWqC,GAAd,KACA,0BAAKrC,UAAU,QACb,0BAAKA,UAAU,SACX4f,GAEJ,wBAAG5f,UAAU,QACT+8B,KAOZ,UAAen1B,EAAAA,EAAAA,KAnFgB,EAC7B2tE,eAAAA,EACAC,OAAAA,EACAC,eAAAA,EACAC,aAAAA,EACAT,SAAAA,EACAU,WAAAA,MAEA,MAAMh2E,GAAOC,EAAAA,EAAAA,MAEP,SAAEg2E,EAAF,MAAYh2D,EAAZ,KAAmBhd,GAAS2yE,GAAkB,IAC9C,cACJM,EADI,gBAEJC,EAFI,gBAGJC,EAHI,KAIJ/5D,EAJI,MAKJ82D,EALI,eAMJkD,GACGN,GAAgB,GAErB,OACE,0BAAK11E,UAAU,YACb,0BAAKA,UAAU,yBACZ41E,GAAY,0BAAKx5E,IAAKw5E,EAAUrlE,IAAI,KACrC,0BAAKvQ,UAAU,QACb,6BAAK4f,GACL,4BAAIhd,KAGR,0BAAK5C,UAAU,cACXw1E,GAAUA,EAAO72D,KAAK2vC,GACtB8mB,GAAkBz1E,EAAKwmB,KAAMmoC,EAAKzkC,MAAOykC,EAAK4I,OAAQ+d,KAEtDQ,GAAkBA,EAAe92D,KAAK2vC,GACtC8mB,GAAkBz1E,EAAKwmB,KAAMmoC,EAAKzkC,MAAOykC,EAAK4I,OAAQ+d,UAEvC1zE,IAAfo0E,GACAP,GAAkBz1E,EAAKwmB,KAAMxmB,EAAK,wBAAyBg2E,EAAYV,GAAU,IAGrF,0BAAKj1E,UAAU,gBACZ61E,GAAiBP,GAAmB,YAAaO,EAAe,kBAChEC,GAAmBR,GAAmB,kBAAmBQ,EAAiB,oBAC1EC,GAAmBT,GAAmB,gBAAiBS,EAAiB,oBACxE/5D,GAAQs5D,GAAmB,YAAat5D,EAAM,QAC9C82D,GAASwC,GAAmB,aAAcxC,EAAO,gBACjDkD,GAAkBV,GAAmB,aAAcU,EAAgB,wBC9B5E,IAAepuE,EAAAA,EAAAA,KA/BoB,EAAGiF,MAAAA,EAAOsS,MAAAA,EAAOpS,SAAAA,MAElD,MAAMkpE,GAAiBtwE,EAAAA,EAAAA,IAAyB,MAE1CqV,GAAgBtb,EAAAA,EAAAA,KAAaqE,IACjC,GAAc,cAAVA,EAAE5D,KAA0D,MAAnC0M,EAAMqpE,OAAOrpE,EAAMxO,OAAS,GAAY,CACnE,MAAMw7C,EAAWhtC,EAAM6nB,MAAM,EAAG7nB,EAAMxO,OAAS,GAC3C43E,EAAe9vE,UACjB8vE,EAAe9vE,QAAQ0G,MAAQgtC,MAGlC,CAAChtC,IAEE22B,GAAe9jC,EAAAA,EAAAA,KAAaqE,IAChCgJ,EC9BG,SAA0Bi/C,GAE/B,MAAMmqB,GADNnqB,EAAQA,EAAM9mC,QAAQ,SAAU,IAAIwP,MAAM,EAAG,IACzBtF,MAAM,WAO1B,OANI+mD,MAAAA,GAAAA,EAAQ,IAAMnpE,OAAOmpE,EAAM,IAAM,KACnCA,EAAM,GAAK,MAETA,MAAAA,GAAAA,EAAQ,IAA0B,IAApBA,EAAM,GAAG93E,SAAiB83E,EAAM,KAChDA,EAAM,GAAK,IAENA,EAAQA,EAAMjqE,KAAK,KAAO,GDqBtBkqE,CAAiBryE,EAAEkJ,OAAOJ,UAClC,CAACE,IAEJ,OACE,mBAACmR,GAAA,EAAD,CACE2L,MAAM,cACNviB,IAAK2uE,EACLlpE,SAAUy2B,EACVrlB,UAAWnD,EACXnO,MAAOA,EACPsS,MAAOA,EACP4G,UAAU,UACV+qD,UAlCmB,O,0BESzB,MAkDA,IAAelpE,EAAAA,EAAAA,KA1CkB,EAAGiF,MAAAA,EAAOsS,MAAAA,EAAOpS,SAAAA,MAEhD,MAAMspE,GAAgB1wE,EAAAA,EAAAA,IAAyB,MAE/CguE,GAAuB0C,GAEvB,MAAOC,EAAUC,IAAetzE,EAAAA,EAAAA,IAAiBquE,GAASE,UAC1DtuE,EAAAA,EAAAA,KAAU,KACR,MAAMszE,EAAc7E,GAAe9kE,GACnC0pE,EAAYC,KAEX,IAEH,MAAMhzC,GAAe9jC,EAAAA,EAAAA,KAAaqE,IAChC,MAAM81C,ED3BH,SAA0BmS,GAE/B,MAAMmqB,GADNnqB,EAAQA,EAAM9mC,QAAQ,SAAU,KACZkK,MAAM,WAC1B,OAAO+mD,EAAQA,EAAMjqE,KAAK,KAAO,GCwBduqE,CAAiB1yE,EAAEkJ,OAAOJ,OACrC2pE,EAAc7E,GAAe5tE,EAAEkJ,OAAOJ,OAC5C0pE,EAAYC,GACZzpE,EAAS8sC,GACLw8B,EAAclwE,UAChBkwE,EAAclwE,QAAQ0G,MAAQgtC,KAE/B,CAAC9sC,EAAUspE,IAERK,EAqBR,SAAqBJ,GACnB,OAAQA,GACN,KAAKhF,GAASI,WACZ,OAAO,0BAAKt1E,IAAKu6E,GAAoBpmE,IAAI,KAC3C,KAAK+gE,GAASG,KACZ,OAAO,0BAAKr1E,IAAKw6E,GAAcrmE,IAAI,KACrC,QACE,QA5BasmE,CAAYP,GAE7B,OACE,0BAAKt2E,UAAU,aACb,2BAAMA,UAAU,cAAc02E,GAC9B,mBAACx4D,GAAA,EAAD,CACE5W,IAAK+uE,EACLxsD,MAAM,cACN9c,SAAUy2B,EACV32B,MAAOA,EACPkZ,UAAU,UACV/lB,UAAWs2E,EAAW,iBAAmB,GACzCn3D,MAAOA,EACP2xD,UA5CuB,SC0I/B,IAAelpE,EAAAA,EAAAA,KAlImB,EAChCquB,MAAAA,EACA6gD,mBAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA54C,SAAAA,MAGA,MAAMg2C,GAAmB1uE,EAAAA,EAAAA,IAA0B,OAEnDzC,EAAAA,EAAAA,KAAU,KACJmxE,EAAiBluE,SAChBkuE,EAAiBluE,QAAQ0G,QAAUopB,EAAMk9C,iBAC5CkB,EAAiBluE,QAAQ0G,MAAQopB,EAAMk9C,kBAExC,CAACl9C,EAAMk9C,iBAEV,MAAM+D,GAAyBx3E,EAAAA,EAAAA,KAAamN,IAC1CwxB,EAAS,CAAEvxB,KAAM,mBAAoBqpB,QAAStpB,MAC7C,CAACwxB,IAEE84C,GAAyBz3E,EAAAA,EAAAA,KAAaqE,IAC1Cs6B,EAAS,CAAEvxB,KAAM,mBAAoBqpB,QAASpyB,EAAEkJ,OAAOJ,MAAMuqE,kBAC5D,CAAC/4C,IAEEg5C,GAAqB33E,EAAAA,EAAAA,KAAamN,IACtCwxB,EAAS,CAAEvxB,KAAM,mBAAoBqpB,QAAStpB,MAC7C,CAACwxB,IAEEi5C,GAAkB53E,EAAAA,EAAAA,KAAaqE,IACnCs6B,EAAS,CAAEvxB,KAAM,gBAAiBqpB,QAASpyB,EAAEkJ,OAAOJ,UACnD,CAACwxB,IAEEq2C,GAAsBh1E,EAAAA,EAAAA,KAAaqE,IACvCs6B,EAAS,CAAEvxB,KAAM,uBAAwBqpB,QAASpyB,EAAEkJ,OAAOJ,UAC1D,CAACwxB,IAEEk5C,GAA8B73E,EAAAA,EAAAA,KAAaqE,IAC/Cs6B,EAAS,CAAEvxB,KAAM,mBAAoBqpB,QAASpyB,EAAEkJ,OAAOJ,UACtD,CAACwxB,IAEEm5C,GAA8B93E,EAAAA,EAAAA,KAAaqE,IAC/Cs6B,EAAS,CAAEvxB,KAAM,wBAAyBqpB,QAASpyB,EAAEkJ,OAAOJ,UAC3D,CAACwxB,IAEE1+B,GAAOC,EAAAA,EAAAA,MAEP,WAAE2zE,EAAa,IAAOt9C,EAE5B,OACE,0BAAKj2B,UAAU,eACb,+BACE,6BAAKL,EAAK,qBACV,mBAAC,GAAD,CACEoN,SAAUmqE,EACVrqE,MAAOopB,EAAM27C,WACbzyD,MAAOo0D,EAAW3B,aAElBmF,GACA,mBAAC74D,GAAA,EAAD,CACE2L,MAAM,eACN9c,SAAUoqE,EACVtqE,MAAOopB,EAAM+8C,WACbjtD,UAAU,OACV5G,MAAOo0D,EAAWP,aAGtB,8BAAShzE,UAAU,iBACjB,mBAAC,GAAD,CACE6M,MAAOopB,EAAMg9C,OACblmE,SAAUsqE,EACVl4D,MAAOo0D,EAAWN,SAEpB,mBAAC/0D,GAAA,EAAD,CACE2L,MAAM,WACN9c,SAAUuqE,EACVzqE,MAAOopB,EAAMi9C,IACbntD,UAAU,UACV+qD,UAAW,EACX3xD,MAAOo0D,EAAWL,OAGpB8D,GAAeC,EACf,6BAAKt3E,EAAK,+BACR4B,EACFy1E,GACA,mBAAC,GAAD,CACEntD,MAAM,UACNzL,YAAY,UACZrR,SAAU2nE,EACV7nE,MAAOopB,EAAMk9C,eACbU,SAAU9qE,SAAQ,GAClB5L,GAAG,kBACHgiB,MAAOo0D,EAAWJ,eAClB7rE,IAAK+sE,GAGHh9B,GAAAA,KAAgB,EAAGr7B,KAAAA,KACjB,6BACEnP,MAAOmP,EACPhc,UAAU,eAETgc,MAMTi7D,GACA,mBAAC/4D,GAAA,EAAD,CACE2L,MAAM,YACN9c,SAAUwqE,EACV1qE,MAAOopB,EAAMm9C,WACbrtD,UAAU,OACV5G,MAAOo0D,EAAWH,aAGpB0D,GACA,mBAACh1C,GAAA,EAAD,CACEjY,MAAOlqB,EAAK,qCACZoiC,QAAS9L,EAAMq9C,gBACfvmE,SAAUyqE,SCyMtB,IAAe5vE,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,KACJkO,EADI,gBAEJooE,EAFI,UAGJyC,EAHI,mBAIJX,EAJI,QAKJY,EALI,eAMJnC,EANI,eAOJoC,EAPI,aAQJC,EARI,gBASJC,EATI,MAUJ14D,GACEzgB,EAAOo5E,QAELC,EAAkBhvE,QAAQ2uE,KAAaC,GAlVxB,WAkV0CA,KACzD,mBAAEZ,EAAF,YAAsBC,EAAtB,QAAmCC,GAAaW,GAAgB,IAChE,cACJI,EADI,eAEJC,EAFI,eAGJC,EAHI,yBAIJC,EAJI,SAKJC,EALI,gBAMJC,EANI,gBAOJC,EAPI,SAQJrD,EARI,OASJO,GACGkC,GAAW,GAEhB,MAAO,CACL9qE,KAAAA,EACAooE,gBAAAA,EACAyC,UAAAA,EACAX,mBAAAA,EACAa,eAAAA,EACAE,gBAAAA,EACAG,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAE,SAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACArD,SAAAA,EACAO,OAAAA,EACAuC,gBAAAA,EACAxC,eAAAA,EACAwB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA93D,MAAAA,MAGJ,CAAC/f,EAAWC,KACHC,EAAAA,EAAAA,IAAKD,EAAS,CACnB,wBACA,kBACA,iBACA,sBACA,uBA3DcZ,EArS0D,EAC5EkD,OAAAA,EACAwG,QAAAA,EACAyE,KAAAA,EACAooE,gBAAAA,EACAyC,UAAAA,EACAX,mBAAAA,EACAkB,cAAAA,EACAG,yBAAAA,EACAF,eAAAA,EACAC,eAAAA,EACAG,gBAAAA,EACAC,gBAAAA,EACArD,SAAAA,EACA4C,gBAAAA,EACAE,gBAAAA,EACAxC,eAAAA,EACAoC,eAAAA,EACAnC,OAAAA,EACAuB,mBAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA93D,MAAAA,EACAo5D,sBAAAA,EACAC,gBAAAA,EACAC,eAAAA,EACAC,oBAAAA,EACAC,kBAAAA,MAEA,MAAOC,EAAcC,IV+Id97B,EAAAA,GAAAA,GAAWy2B,GAAS79C,KU9IpBhD,EAAWizC,IAAgB3iE,EAAAA,EAAAA,KAAS,GACrCtD,GAAOC,EAAAA,EAAAA,MAEbsD,EAAAA,EAAAA,KAAU,MACJ0J,GAAQuS,IACVymD,GAAa,KAEd,CAACh5D,EAAMuS,KAEVjc,EAAAA,EAAAA,KAAU,KACJic,MAAAA,GAAAA,EAAO25D,OACTD,EAAgB,CACd/rE,KAAM,gBACNqpB,QAAS,CACP,CAAChX,EAAM25D,OAAQ35D,EAAMphB,aAI1B,CAACohB,EAAO05D,KAEX31E,EAAAA,EAAAA,KAAU,KACR,GAAIu0E,EAAW,CACb,MACEz7D,KAAMoV,EADF,MACY0hD,EADZ,MACmB/8C,EADnB,gBAC0BggD,GAC5B0B,EACJoB,EAAgB,CACd/rE,KAAM,iBACNqpB,QAAS,CACP/E,SAAAA,EACA0hD,MAAOA,GAA6B,MAApBA,EAAMoD,OAAO,GACxB,IAAGpD,IACJA,EACJ/8C,MAAAA,KACIggD,GAAmB,SAI5B,CAAC0B,EAAWoB,IAEf,MAAME,GAAwBr5E,EAAAA,EAAAA,KAAY,KACxCi5E,MACC,CAACA,IAEEhD,GAAal0E,EAAAA,EAAAA,KAAQ,IACrBmL,IAASosE,EAAAA,GAAAA,SACJ,EAmSb,SAAuBxD,EAAkB,GAAIR,EAA+CiE,GAC1F,MAAMxD,EAAiBT,EACnBkE,GAAkBlE,EAAiBiE,GACnC,GACJ,IAAI7S,EAAQ,EAKZ,OAHAA,EADoBoP,EAAO2D,OAAO1D,GAAkB,IAChClgC,QAAO,CAAC6jC,EAAKC,IACxBD,EAAMC,EAAIniB,QAChBkP,GACIA,EAzSEkT,CAAc9D,EAAQR,EAAiB4D,EAAa7F,WAC1D,CAACnmE,EAAMgsE,EAAa7F,SAAUyC,EAAQR,IAEnCU,GAAej0E,EAAAA,EAAAA,KAAQ,KAC3B,GAAImL,IAASosE,EAAAA,GAAAA,SAGb,OAqSJ,SAAyB/iD,EAAkB++C,EAA+Cc,GACxF,MACMD,EAAiB,GZxZlB,SAA4BjE,GACjC,MAAM0E,EAAW3E,GAAeC,GAChC,OAAOL,GAAM+E,IAAuB,GYqZfiD,CAAmBtjD,EAAM27C,gBACJ37C,EAAM27C,WAAWl9C,OAAO,KAC5DqhD,EAAkB9/C,EAAMw8C,YACzB,GAAEx8C,EAAMw8C,gBAAgBx8C,EAAM08C,SAAS18C,EAAM28C,mBAC9CrxE,GACE,MAAEuxE,EAAO1hD,SAAUpV,GAASia,EAC5BgjD,EAAiBjE,EAAkBwE,GAAmBxE,EAAiB/+C,EAAM88C,eAAYxxE,EAE/F,MAAO,CACLs0E,cAAAA,EACAC,gBAAAA,EACAC,gBAAAA,EACA/5D,KAAAA,EACA82D,MAAAA,EACAkD,eAPqBiD,MAAAA,OAAH,EAAGA,EAAgBr5D,OA7S9B65D,CAAgBb,EAAc5D,EAAiB2C,GAAkB,MACvE,CAAC/qE,EAAMgsE,EAAc5D,EAAiB2C,IA2EnC+B,GAAkBh6E,EAAAA,EAAAA,KAAY,KAClC,MAAM,SAAE2zE,GAAauF,EACfe,EA0OV,SAAwBf,GACtB,MAAM,YACJnG,EADI,YAEJC,EAFI,KAGJC,EAHI,MAIJ18C,EAJI,YAKJ28C,EALI,SAMJC,EACAzhD,SAAUpV,EAPN,MAQJ82D,EARI,MASJ/8C,GACE6iD,EAWJ,MAAO,CACL58D,KAAAA,EACA82D,MAAAA,EACA/8C,MAAAA,EACAggD,gBAbsB,CACtBtD,YAAAA,EACAC,YAAAA,EACAC,KAAAA,EACA18C,MAAAA,EACA28C,YAAAA,EACAC,SAAAA,IA7PoB+G,CAAehB,GACnCL,EAAsB,CAAEoB,YAAAA,EAAatG,SAAAA,MACpC,CAACkF,EAAuBK,IAErBiB,GAAkBn6E,EAAAA,EAAAA,KAAY,KAClC,MAAMo6E,EAmQV,SAAwBlB,GACtB,MAAM,WACJhH,EADI,WACQoB,EADR,OACoBC,EADpB,IAC4BC,EAD5B,eACiCC,EADjC,WACiDC,GACnDwF,GACGmB,EAAaC,GAAc/G,EAAOzhD,MAAM,KAW/C,MAAO,CACLuL,KAXW,CACX60C,WAAAA,EACAoB,WAAAA,EACA+G,YAAAA,EACAC,WAAAA,EACA9G,IAAAA,EACAn9B,QAASo9B,EACT8G,IAAK7G,IA/Qe8G,CAAetB,GACnCF,EAAoB,CAClBoB,YAAAA,MAED,CAACpB,EAAqBE,IAEnBuB,GAAWz6E,EAAAA,EAAAA,KAAY,KAC3B84E,EAAgB,CACd4B,iBAAkBxB,EAAa7F,SAC/BO,gBAAiBsF,EAAatF,oBAE/B,CAACkF,EAAiBI,IAEfyB,GAAU36E,EAAAA,EAAAA,KAAa46E,IAC3B7B,EAAe,CAAE7rE,KAAM0tE,MACtB,CAAC7B,IAEEtvB,GAAoBzpD,EAAAA,EAAAA,KAAY,KAEpC,OADAkmE,GAAa,GACLh5D,GACN,KAAKosE,EAAAA,GAAAA,aACH,OAAOU,IACT,KAAKV,EAAAA,GAAAA,SACH,OAAOqB,EAAQrB,EAAAA,GAAAA,aACjB,KAAKA,EAAAA,GAAAA,YACH,OAAOa,IACT,KAAKb,EAAAA,GAAAA,SACH,OAAOmB,IACT,QACE,MAAO,UAEV,CAACvtE,EAAM8sE,EAAiBW,EAASR,EAAiBM,IAE/Cl8D,GAAcxc,EAAAA,EAAAA,KAAQ,KAC1B,OAAQmL,GACN,KAAKosE,EAAAA,GAAAA,aACH,OAAOr5E,EAAK,uBACd,KAAKq5E,EAAAA,GAAAA,SACH,OAAOr5E,EAAK,yBACd,KAAKq5E,EAAAA,GAAAA,YACH,OAAOr5E,EAAK,mBACd,KAAKq5E,EAAAA,GAAAA,SACH,OAAOr5E,EAAK,mBACd,QACE,MAAO,MAEV,CAACiN,EAAMjN,IAEJ46E,GAAa94E,EAAAA,EAAAA,KAAQ,KACzB,OAAQmL,GACN,KAAKosE,EAAAA,GAAAA,SACH,OAAOr5E,EAAK,qBAAqBw1E,EAAAA,GAAAA,GAAeQ,EAAYV,EAAUt1E,EAAKwmB,OAC7E,QACE,OAAOxmB,EAAK,WAEf,CAACiN,EAAMjN,EAAMs1E,EAAUU,IAE1B,OAAIoC,EAEA,mBAAC15D,GAAA,EAAD,CACEre,UAAU,QACV2B,OAAQA,EACRwG,QAASA,GAET,qGAC6E,8BAD7E,iDAIA,mBAACvG,EAAA,EAAD,CACEqe,QAAM,EACNhgB,QAASkI,GAERxI,EAAK,QAOZ,mBAAC0e,GAAA,EAAD,CACEre,UAAU,eACV2B,OAAQA,EACRwG,QAASA,GAET,0BAAKnI,UAAU,SAASO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAChD,mBAACK,EAAA,EAAD,CACE5B,UAAU,eACV8B,MAAM,cACND,OAAK,EACLzB,KAAK,UACLH,QAASkI,EACTpG,UAAU,SAEV,wBAAG/B,UAAU,gBAEf,6BAAKie,SAEG1c,IAATqL,EACC,mBAACkP,EAAA,EAAD,CAAYE,KAAK,QAAQD,UAAWnP,IACjC,IACC,0BAAK5M,UAAU,yBA9JzB,SAA4Bw6E,GAC1B,OAAQA,GACN,KAAKxB,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAD,CACE/iD,MAAO2iD,EACPv6C,SAAUw6C,EACV1E,YAAaprE,QAAQovE,GACrBnE,UAAWjrE,QAAQmvE,GAAkBI,GACrCrE,UAAWlrE,QAAQkvE,GAAkBI,GACrCnE,SAAUnrE,QAAQivE,KAGxB,KAAKgB,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACE/iD,MAAO2iD,EACPv6C,SAAUw6C,EACV7D,gBAAiBA,GAAmB,GACpCC,SAAUA,IAGhB,KAAK+D,EAAAA,GAAAA,YACH,OACE,mBAAC,GAAD,CACE/iD,MAAO2iD,EACPv6C,SAAUw6C,EACV/B,mBAAoB/tE,SAAS8uE,GAAmBf,GAChDC,mBAAoBA,EACpBC,YAAaA,EACbC,QAASA,IAGf,KAAK+B,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAD,CACExD,OAAQA,EACRC,eAAgBmD,EAAa7F,UAAYiC,EACrCkE,GAAkBlE,EAAiB4D,EAAa7F,eAChDxxE,EACJo0E,WAAYA,EACZJ,eAAgBA,EAChBG,aAAcA,EACdT,SAAUA,IAGhB,QACE,QAgHOwF,CAAmB7tE,MAK1B,0BAAK5M,UAAU,iBACb,mBAACyQ,EAAA,EAAD,CAAS3O,MAAM,UAGnB,0BAAK9B,UAAU,UACb,mBAAC4B,EAAA,EAAD,CACEkL,KAAK,SACL7M,QAASkpD,EACTx8C,SAAUgmB,EACVA,UAAWA,GAEV4nD,IAGJp7D,IAAUA,EAAM25D,OAxMrB,WACE,GAAK35D,EAGL,OACE,mBAACd,GAAA,EAAD,CACEre,UAAU,QACV2B,OAAQoH,QAAQoW,GAChBhX,QAAS4wE,GAET,6BAAK55D,EAAMmK,aAAe,SAC1B,4BAAInK,EAAMmK,aAAe,SACzB,mBAAC1nB,EAAA,EAAD,CACEqe,QAAM,EACNhgB,QAAS04E,GAERh5E,EAAK,QAwLgB+6E,QAqEhC,SAASlB,GAAmBxE,EAAmC2F,GAC7D,OAAO3F,EAAgBrzC,MAAK,EAAGxkC,GAAAA,KAASA,IAAOw9E,IAGjD,SAASzB,GAAkBlE,EAAmCiE,GAC5D,MAAMt1C,EAAS61C,GAAmBxE,EAAiBiE,GACnD,OAAOt1C,MAAAA,OAAP,EAAOA,EAAQ6xC,OC5XjB,MA0DA,IAAe5tE,EAAAA,EAAAA,KAAKnJ,EAAAA,EAAAA,KACjBC,IACC,MAAM,QAAEk8E,GAAYl8E,EAAOo5E,SACrB,SACJ7C,EADI,OAEJO,EAFI,KAGJqF,EAHI,YAIJC,EAJI,iBAKJC,EALI,eAMJtF,EANI,eAOJO,EAPI,SAQJJ,EARI,KASJhzE,EATI,MAUJgd,GACGg7D,GAAW,GAEhB,MAAO,CACL3F,SAAAA,EACAO,OAAAA,EACAqF,KAAAA,EACAC,YAAAA,EACAC,iBAAAA,EACAtF,eAAAA,EACAO,eAAAA,EACAJ,SAAAA,EACAhzE,KAAAA,EACAgd,MAAAA,KA1BcnhB,EA1D4B,EAC9CkD,OAAAA,EACAwG,QAAAA,EACAqtE,OAAAA,EACAC,eAAAA,EACAqF,YAAAA,EACA7F,SAAAA,EACA4F,KAAAA,EACAjF,SAAAA,EACAhzE,KAAAA,EACAgd,MAAAA,EACAm7D,iBAAAA,EACA/E,eAAAA,MAEA,MAAMr2E,GAAOC,EAAAA,EAAAA,KACP81E,GAAej0E,EAAAA,EAAAA,KAAQ,IA0E/B,SAAyBo0E,EACvBgF,EAKA7E,GACA,IAAK6E,EACH,MAAO,CAAEhF,cAAAA,GAEX,MAAM,gBAAEE,GAAoB8E,EACtBG,EAAcjF,MAAAA,GAAAA,EAAiBtD,YAChC,GAAEsD,EAAgBtD,gBAAgBsD,EAAgBpD,SAASoD,EAAgBnD,mBAC5ErxE,GACE,MAAEuxE,EAAF,KAAS92D,GAAS6+D,EACxB,MAAO,CACLhF,cAAAA,EACAC,gBAAiB,SACjBC,gBAAiBiF,EACjBh/D,KAAAA,EACA82D,MAAAA,EACAkD,eAAAA,GA9FOyD,CAAgBsB,EAAkBF,EAAM7E,IAC9C,CAAC6E,EAAM7E,EAAgB+E,IAE1B,OACE,mBAAC18D,GAAA,EAAD,CACEre,UAAU,oCACV2B,OAAQA,EACRwG,QAASA,GAET,8BACE,0BAAKnI,UAAU,SAASO,IAAKZ,EAAKkc,MAAQ,WAAQta,GAChD,mBAACK,EAAA,EAAD,CACE5B,UAAU,eACV8B,MAAM,cACND,OAAK,EACLzB,KAAK,UACLH,QAASkI,EACTpG,UAAU,SAEV,wBAAG/B,UAAU,gBAEf,iCAAML,EAAK,kBAAX,MAEF,0BAAKK,UAAU,iCACb,mBAAC,GAAD,CACEw1E,OAAQA,EACRC,eAAgBA,EAChBE,WAAYmF,EACZvF,eAAgB,CACdK,SAAAA,EACAhzE,KAAAA,EACAgd,MAAAA,GAEF81D,aAAcA,EACdT,SAAUA,Y,+FC/DtB,MAAM77B,EAAyBp3C,EAAAA,GAA0B,IAAM,IAuG/D,GAAe4F,EAAAA,EAAAA,KArGoB,EACjC+qB,UAAAA,GAAY,EACZqmB,kBAAAA,EACA75B,MAAAA,EACA2W,KAAAA,EACA1X,YAAAA,EAAc,WACdi6B,YAAAA,EAAc,OACdC,WAAAA,EACAY,2BAAAA,EACA+hC,cAAAA,EACAt4D,SAAAA,MAGA,MAAMnW,GAAW7G,EAAAA,EAAAA,IAAyB,MACpChG,GAAOC,EAAAA,EAAAA,MAENi2B,EAAUqlD,IAAej4E,EAAAA,EAAAA,IAAS,KAClCk4E,EAAWC,IAAgBn4E,EAAAA,EAAAA,KAAS,GAgD3C,OA9CAC,EAAAA,EAAAA,KAAU,KACHoF,EAAAA,IACHxC,YAAW,KACT0G,EAASrG,QAAS8W,UACjBm8B,KAEJ,KAEHl2C,EAAAA,EAAAA,KAAU,KACJic,GACFzG,uBAAsB,KACpBlM,EAASrG,QAAS8W,QAClBzQ,EAASrG,QAASk1E,cAGrB,CAACl8D,IAgCF,2BAAM+W,OAAO,GAAGvT,SAblB,SAAsB+d,GACpBA,EAAMr1B,iBAEFsnB,GAIAwoD,GACFx4D,EAASkT,IAK6BylD,aAAa,OACnD,0BACEt7E,WAAW8D,EAAAA,EAAAA,GAAe,6BAA8B+xB,GAAY,UAAW1W,GAAS,SACxF5e,IAAKZ,EAAKkc,MAAQ,WAAQta,GAE1B,4BACE+F,IAAKkF,EACLxM,UAAU,eACV8M,KAAMksC,EAAoB,OAAS,WACnC77C,GAAG,mBACH0P,MAAOgpB,GAAY,GACnBylD,aAAa,mBACbvuE,SA1CR,SAA0BhJ,GACpBob,GACFm5B,IAGF,MAAM,OAAErrC,GAAWlJ,EACnBm3E,EAAYjuE,EAAOJ,OACnBuuE,EAAanuE,EAAOJ,MAAMxO,QAAUk9E,EAAAA,IAChCN,GACFA,EAAchuE,EAAOJ,QAkCjBtM,IAAI,SAEN,gCAAQ4e,GAAS2W,GAAQ1X,GACzB,0BACEpe,UAAU,kBACVC,QAnCR,WACEi5C,GAA4BF,IAmCtBpzB,KAAK,SACLC,SAAU,EACVjG,MAAM,8BAEN,wBAAG5f,UAAWg5C,EAAoB,WAAa,sBAGlDmiC,GACC,mBAAC,IAAD,CAAQruE,KAAK,SAAStF,QAAM,EAACmrB,UAAWA,GACrC0lB,Q,sFCxGX,MACMmjC,EAAuC,CAAC,EAAG,IAC3CC,EAAwC,CAAC,EAAG,IAC5CC,EAAsC,CAAC,GAAI,GAC3CC,EAAe35E,EAAAA,GAA0B45E,EAAAA,GAA2BC,EAAAA,GAsD1E,GAAej0E,EAAAA,EAAAA,KApDsB,EAAGoxC,kBAAAA,EAAmBD,MAAAA,MACzD,MAAO+iC,EAAiBC,IAAsB94E,EAAAA,EAAAA,OACvC+4E,EAAgBC,IAAqBh5E,EAAAA,EAAAA,OACrCi5E,EAAqBC,IAA0Bl5E,EAAAA,EAAAA,KAAS,IACxDm5E,EAAaC,IAAkBp5E,EAAAA,EAAAA,KAAS,IAE/CC,EAAAA,EAAAA,KAAU,KACH44E,EAGHh2E,YAAW,IAAMu2E,GAAe,IAhBP,MAczBz/C,EAAAA,EAAAA,GAAiB,eAAeC,KAAKk/C,KAItC,CAACD,KAEJ54E,EAAAA,EAAAA,KAAU,KACH84E,IACHp/C,EAAAA,EAAAA,GAAiB,cAAcC,KAAKo/C,KAErC,CAACD,IAEJ,MAAMM,GAAwB58E,EAAAA,EAAAA,KAAY,IAAMy8E,GAAuB,IAAO,IAE9E,OACE,0BAAKh/E,GAAG,SAAS6C,UAAW+4C,EAAQ,MAAQ,KACxCmjC,GACA,0BAAKl8E,UAAU,mBAEhB87E,GACC,mBAAC,IAAD,CACE3+E,GAAG,cACHiD,KAAM24C,EAAQwjC,EAAAA,GAAsBZ,EACpC37E,UAAWo8E,EAAc,SAAW,QACpC7/C,cAAeu/C,EACfU,YAAahB,EACbh+C,QAAM,EACNC,OAAQ6+C,IAGXN,GACC,mBAAC,IAAD,CACE7+E,GAAG,aACHiD,KAAM24C,EAAQwjC,EAAAA,GAAsBZ,EACpC37E,UAAWo8E,EAAc,QAAU,SACnC7/C,cAAey/C,EACfQ,YAAaxjC,EAAoByiC,EAAsBC,EACvDl+C,QAAM,S,uDCjDT,MAAMi/C,EAA0B,CACrCC,W,QACAC,e,QACAC,Y,QACAC,W,QACAC,W,QACAC,W,QACAC,iB,SAGa,SAASpgD,EAAiB5gB,GACvC,MAAMihE,EAAOR,EAAwBzgE,GAAMkJ,QAAQxhB,OAAOw5E,SAASthF,OAAQ,IAE3E,OAAOgpD,EAAAA,GAAmB,OAAMq4B,IAAQzoE,EAAAA,GAAAA,U,kHCjB1C,MAAM2oE,EAAiE,CACrErwE,KAAM,OACNswE,QAAS,EACTlL,OAAQ,OACRmL,QAAQ,GAIV,IAAIC,EACAC,EAWAC,EAwCJ,MAwDA,GAAe51E,EAAAA,EAAAA,KAxDiB,EAAG4pD,KAAAA,EAAMzkD,SAAAA,EAAU5E,QAAAA,MACjD,MAAOs1E,EAAgBC,IAAqBz6E,EAAAA,EAAAA,KAAS,IAErDC,EAAAA,EAAAA,KAAU,KACHsuD,IAIAisB,EA9CTxxC,eAA2B0xC,GACzB,IACE,MAAMC,EAAgB9hF,SAASkd,eAAe,eAC9C,IAAK4kE,EACH,OAGF,MAAM,YAAElxC,EAAF,aAAenvC,GAAiBqgF,EAEtCJ,EAAU,IAAIF,EAAQM,EAAe,CACnCC,YAAY,EACZC,SAAU,CACR13E,MAAOsmC,EACPrpC,OAAQ9F,GAEVwgF,SAAU,CACR33E,MAAOsmC,EAAc,GACrBrpC,OAAQ9F,EAAe,GACvBuP,KAAM,YAIV,MAAMi9B,QAAgBi0C,EAAAA,EAAAA,IAAcL,SAC9BH,EAAQS,KAAK,CAAEp2E,IAAKkiC,IAC1B,MAAOsuB,GACH6lB,EAAAA,IAEFC,QAAQh/D,MAAMk5C,IAyBhB+lB,CAAY5sB,GA/DhBvlB,iBAME,OALKsxC,IACHA,EAAiB,qDACjBD,SAAiBC,GAAgBriB,SAG5BqiB,EAoDHc,GAAgBxhD,MAAK,IAAM6gD,GAAkB,QAM9C,CAAClsB,EAAMisB,IAEV,MAAM99E,GAAOC,EAAAA,EAAAA,KAab,OACE,mBAACye,EAAA,EAAD,CACE1c,OAAQoH,QAAQyoD,GAChBrpD,QAASA,EACTyX,MAAM,qBACN5f,UAAU,YACVopD,gBAAc,GAEbq0B,EACC,0BAAKtgF,GAAG,gBAER,mBAAC8hB,EAAA,EAAD,MAEF,mBAACrd,EAAA,EAAD,CACE5B,UAAU,iBACV6B,OAAK,EACLC,MAAM,UACN7B,QA5BNgsC,iBACE,IAAKuxC,EACH,OAGF,MAAMhoC,QAA8BgoC,EAAQhoC,OAAO2nC,GAC7CmB,EAA+B,iBAAX9oC,EAAsBA,GAAS+oC,EAAAA,EAAAA,IAAW/oC,EAAQ,cAE5EzoC,EAASuxE,IAqBLv8E,UAAWpC,EAAK,cAEhB,wBAAGK,UAAU,oBC3CrB,GAAe4H,EAAAA,EAAAA,KAhEsB,EACnCgY,MAAAA,EAAQ,8BACRjT,SAAAA,EACA8tB,qBAAAA,EACA1tB,SAAAA,MAEA,MAAOyxE,EAAcC,IAAmBx7E,EAAAA,EAAAA,OACjCy7E,EAAgBC,IAAqB17E,EAAAA,EAAAA,IAA6Bw3B,IAEzEv3B,EAAAA,EAAAA,KAAU,KACRy7E,EAAkBlkD,KACjB,CAACA,IA2BJ,MAAMmkD,GAAiB96E,EAAAA,EAAAA,GACrB46E,GAAkB,SAClB/xE,GAAY,YAGd,OACE,0BAAK3M,UAAU,kBACb,4BACEA,UAAW4+E,EACXh5D,KAAK,SACLC,SAAU,EACVjG,MAAOA,GAEP,4BACE9S,KAAK,OACLC,SAxCR,SAA0B2zB,GACxB,MAAMzzB,EAASyzB,EAAMzzB,OAEhBA,GAAWA,EAAOs+B,OAAUt+B,EAAOs+B,MAAM,KAI9CkzC,EAAgBxxE,EAAOs+B,MAAM,IAC7Bt+B,EAAOJ,MAAQ,KAiCT+6B,OAAO,0BAET,wBAAG5nC,UAAU,oBACZ0+E,GAAkB,0BAAKtiF,IAAKsiF,EAAgBnuE,IAAI,YAEnD,mBAAC,EAAD,CAAWihD,KAAMgtB,EAAcr2E,QAzBnC,WACEs2E,OAAgBl9E,IAwB4CwL,SAnC9D,SAA0BuxE,GACxBG,OAAgBl9E,GAChBwL,EAASuxE,GAELI,GACFG,IAAIC,gBAAgBJ,GAEtBC,EAAkBE,IAAIE,gBAAgBT,Y","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/ZoomControls.tsx","webpack://telegram-t/./src/components/mediaViewer/PanZoom.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/common/ReportMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/ui/RangeSlider.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/systemFilesDialog.ts","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helper/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaPassword.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/TonModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/util/countries.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordForm.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/common/helpers/animatedAssets.ts","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.active .media-viewer-content img, .active .media-viewer-content video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isElementInViewport(el: HTMLElement) {\n  if (el.style.display === 'none') {\n    return false;\n  }\n\n  const rect = el.getBoundingClientRect();\n  const { height: windowHeight } = windowSize.get();\n\n  return (rect.top <= windowHeight) && ((rect.top + rect.height) >= 0);\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter) {\n    topOffsetRem += mql.matches ? 0.875 : 3.375;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.active > .MessageList #album-media-${message!.id}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${message!.id}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .ChatInfo .Avatar';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .active .ProfilePhoto';\n      mediaSelector = 'img.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.active > .MessageList #message${message!.id}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import React, { FC, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isChatPrivate } from '../../modules/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: number;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'closeMediaViewer' | 'focusMessage'>;\n\nconst SenderInfo: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId, messageId, sender, isAvatar, message, closeMediaViewer, focusMessage,\n}) => {\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n    focusMessage({ chatId, messageId });\n  }, [chatId, focusMessage, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const isFromChat = sender.id < 0;\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isFromChat ? (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar ? lang('lng_mediaview_profile_photo') : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isChatPrivate(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['closeMediaViewer', 'focusMessage']),\n)(SenderInfo);\n","import React, { FC, useMemo } from '../../lib/teact/teact';\n\nimport { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../modules/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaDownload from '../../hooks/useMediaDownload';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  isZoomed: boolean;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  onZoomToggle: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps> = ({\n  mediaData,\n  isVideo,\n  isZoomed,\n  message,\n  fileName,\n  isAvatar,\n  onCloseMediaViewer,\n  onForward,\n  onZoomToggle,\n}) => {\n  const {\n    isDownloadStarted,\n    downloadProgress,\n    handleDownloadClick,\n  } = useMediaDownload(\n    message && isVideo ? getMessageMediaHash(message, 'download') : undefined,\n    fileName,\n  );\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloadStarted ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloadStarted ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloadStarted && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && (\n        <>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Forward')}\n            onClick={onForward}\n          >\n            <i className=\"icon-forward\" />\n          </Button>\n        </>\n      )}\n      {isVideo ? (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n          onClick={handleDownloadClick}\n        >\n          {isDownloadStarted ? (\n            <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n          ) : (\n            <i className=\"icon-download\" />\n          )}\n        </Button>\n      ) : (\n        <Button\n          href={mediaData}\n          download={fileName}\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('AccActionDownload')}\n        >\n          <i className=\"icon-download\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={isZoomed ? 'Zoom Out' : 'Zoom In'}\n        onClick={onZoomToggle}\n      >\n        <i className={isZoomed ? 'icon-zoom-out' : 'icon-zoom-in'} />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default MediaViewerActions;\n","import React, { FC, useEffect, useState } from '../../lib/teact/teact';\n\nimport { throttle } from '../../util/schedulers';\nimport { TextPart } from '../common/helpers/renderMessageText';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nexport default (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n","import React, {\n  FC, useState, useEffect, useRef, useCallback,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\n\nimport './VideoPlayerControls.scss';\n\ntype IProps = {\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceVisible: boolean;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 800;\n\nconst VideoPlayerControls: FC<IProps> = ({\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceVisible,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  onChangeFullscreen,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isVisible, setVisibility] = useState(true);\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isForceVisible) {\n      setVisibility(isForceVisible);\n    }\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    let timeout: number | undefined;\n\n    if (!isForceVisible) {\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setVisibility(false);\n      } else {\n        timeout = window.setTimeout(() => {\n          setVisibility(false);\n        }, HIDE_CONTROLS_TIMEOUT_MS);\n      }\n    }\n\n    return () => {\n      if (timeout) {\n        window.clearTimeout(timeout);\n      }\n    };\n  }, [isForceVisible]);\n\n  useEffect(() => {\n    if (isVisible || isForceVisible) {\n      document.body.classList.add('video-controls-visible');\n    }\n\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isForceVisible, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeeking.current && seekerRef.current) {\n      const { width, left } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeeking.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  if (!isVisible && !isForceVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className={`VideoPlayerControls ${isForceMobileVersion ? 'mobile' : ''}`} onClick={stopEvent}>\n      {renderSeekLine(currentTime, duration, bufferedProgress, seekerRef)}\n      <Button\n        ariaLabel={lang('AccActionPlay')}\n        size=\"tiny\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent-white\"\n        className=\"play\"\n        onClick={onPlayPause}\n      >\n        <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n      </Button>\n      {renderTime(currentTime, duration)}\n      {bufferedProgress < 1 && renderFileSize(bufferedProgress, fileSize)}\n      {isFullscreenSupported && (\n        <Button\n          ariaLabel=\"Fullscreen\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"fullscreen\"\n          onClick={onChangeFullscreen}\n        >\n          <i className={`${isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'}`} />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(downloadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * downloadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedProgress: number, seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n  const percentageBuffered = bufferedProgress * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        <div\n          className=\"player-seekline-buffered\"\n          // @ts-ignore teact feature\n          style={`width: ${percentageBuffered || 0}%`}\n        />\n        <div\n          className=\"player-seekline-played\"\n          // @ts-ignore teact feature\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport safePlay from '../../util/safePlay';\n\nimport VideoPlayerControls from './VideoPlayerControls';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport Button from '../ui/Button';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  downloadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  downloadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isControlsVisible, setIsControlsVisible] = useState(true);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const { isBuffered, bufferedProgress, bufferingHandlers } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n      if (IS_SINGLE_COLUMN_LAYOUT) {\n        setIsControlsVisible(false);\n      }\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseOver = useCallback(() => {\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleMouseOut = useCallback(() => {\n    setIsControlsVisible(false);\n  }, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    setIsControlsVisible(true);\n  }, []);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const toggleControls = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    setIsControlsVisible(!isControlsVisible);\n    if (!isControlsVisible) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    }\n  }, [isControlsVisible]);\n\n  useEffect(() => {\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onClick={!isGif && IS_SINGLE_COLUMN_LAYOUT ? toggleControls : undefined}\n      onMouseOver={!isGif && !IS_TOUCH_ENV ? handleMouseOver : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        // @ts-ignore\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif}\n          id=\"media-viewer-video\"\n          // @ts-ignore\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={handleFullscreenChange}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : downloadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedProgress={bufferedProgress}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration : 0}\n          isForceVisible={isControlsVisible}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\nimport './ZoomControls.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onChangeZoom: (level: number, canCloseZoom?: boolean) => void;\n};\n\nexport const MAX_ZOOM_LEVEL = 3;\nexport const MIN_ZOOM_LEVEL = 1;\nconst ONE_STEP_PERCENT = 100 / (MAX_ZOOM_LEVEL - MIN_ZOOM_LEVEL);\nconst RESET_ZOOM_LEVEL = 1.5;\n\nconst ZoomControls: FC<OwnProps> = ({ isShown, onChangeZoom }) => {\n  const { transitionClassNames } = useShowTransition(isShown);\n  const prevIsShown = usePrevious<boolean>(isShown);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [zoomLevel, setZoomLevel] = useState(1);\n  const isSeeking = useRef<boolean>(false);\n\n  useEffect(() => {\n    if (isShown && !prevIsShown) {\n      setZoomLevel(RESET_ZOOM_LEVEL);\n    }\n  }, [isShown, prevIsShown]);\n\n  const handleZoomOut = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.max(MIN_ZOOM_LEVEL, zoomLevel - 0.5));\n    }\n  };\n\n  const handleZoomIn = () => {\n    if (inputRef.current) {\n      setZoomLevel(Math.min(MAX_ZOOM_LEVEL, zoomLevel + 0.5));\n    }\n  };\n\n  const handleStartSeek = useCallback(() => {\n    isSeeking.current = true;\n  }, []);\n\n  const handleStopSeek = useCallback(() => {\n    isSeeking.current = false;\n    if (zoomLevel === 1) {\n      onChangeZoom(zoomLevel, !isSeeking.current);\n    }\n  }, [onChangeZoom, zoomLevel]);\n\n  const handleSeeklineChange = (e:React.ChangeEvent<HTMLInputElement>) => {\n    setZoomLevel(Math.min(MAX_ZOOM_LEVEL, Math.max(Number(e.target.value), MIN_ZOOM_LEVEL)));\n  };\n\n  useEffect(() => {\n    onChangeZoom(zoomLevel, !isSeeking.current);\n  }, [zoomLevel, onChangeZoom]);\n\n  const lang = useLang();\n\n  const className = buildClassName(\n    'ZoomControls',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className}>\n      <Button\n        disabled={zoomLevel === MIN_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel={lang('ZoomOut')}\n        className=\"zoom-out\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        disabled={zoomLevel === MAX_ZOOM_LEVEL}\n        size=\"tiny\"\n        color=\"translucent-white\"\n        ariaLabel=\"Zoom In\"\n        className=\"zoom-in\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      <div className=\"seekline\">\n        <div className=\"seekline-track\">\n          <div\n            className=\"seekline-played\"\n            // @ts-ignore teact feature\n            style={`width: ${(zoomLevel - 1) * ONE_STEP_PERCENT}%`}\n          />\n          <input\n            ref={inputRef}\n            min={MIN_ZOOM_LEVEL}\n            max={MAX_ZOOM_LEVEL}\n            step=\"0.5\"\n            value={zoomLevel}\n            type=\"range\"\n            className=\"seekline-input\"\n            onChange={handleSeeklineChange}\n            onMouseDown={handleStartSeek}\n            onMouseUp={handleStopSeek}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ZoomControls);\n","/*\n  @source https://github.com/ajainarayanan/react-pan-zoom\n\n  Heavily inspired/lifted from this idea: https://stackoverflow.com/a/39311435/661768\n  without jqueryUI or jquery dependency.\n*/\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { areSortedArraysEqual } from '../../util/iteratees';\n\nimport './PanZoom.scss';\n\nexport interface IDragData {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n}\n\nexport interface OwnProps {\n  children: any;\n  className?: string;\n  noWrap: boolean;\n  canPan: boolean;\n  zoomLevel: number;\n  panDeltaX: number;\n  panDeltaY: number;\n  onPan?: (x: number, y: number) => void;\n}\n\nconst INITIAL_MATRIX = [\n  1, 0, 0, 1, 0, 0,\n];\n\nconst SCALE_VALUES = {\n  1: 1,\n  1.5: 1.5,\n  2: 2.2,\n  2.5: 3.3,\n  3: 5.5,\n};\n\nconst ZOOM_SAFE_AREA = 150;\n\nfunction calculateSafeZoneOnZoom(oldScale: number, matrixData: number[], wrapper: HTMLDivElement | null) {\n  const image = wrapper && wrapper.querySelector('.active img');\n  if (!wrapper || !image) {\n    return matrixData;\n  }\n  const wrapperRect = wrapper.getBoundingClientRect();\n  const imageRect = image.getBoundingClientRect();\n\n  const newImgWidth = (imageRect.width / oldScale) * matrixData[0];\n  const newImgHeight = (imageRect.height / oldScale) * matrixData[3];\n  const newImgX = (wrapperRect.width - newImgWidth) / 2 + matrixData[4];\n  const newImgY = (wrapperRect.height - newImgHeight) / 2 + matrixData[5];\n  if (wrapperRect.width && wrapperRect.width - ZOOM_SAFE_AREA < newImgX) {\n    matrixData[4] -= newImgX + wrapperRect.width - ZOOM_SAFE_AREA;\n  } else if (newImgWidth && newImgWidth + newImgX < ZOOM_SAFE_AREA) {\n    matrixData[4] -= newImgWidth + newImgX - ZOOM_SAFE_AREA;\n  }\n  if (wrapperRect.height && wrapperRect.height - ZOOM_SAFE_AREA < newImgY) {\n    matrixData[5] -= newImgY + wrapperRect.height - ZOOM_SAFE_AREA;\n  } else if (newImgHeight && newImgHeight + newImgY < ZOOM_SAFE_AREA) {\n    matrixData[5] -= newImgHeight + newImgY - ZOOM_SAFE_AREA;\n  }\n\n  return matrixData;\n}\n\nconst PanZoom: FC<OwnProps> = ({\n  children,\n  className,\n  noWrap,\n  canPan,\n  zoomLevel,\n  panDeltaX,\n  panDeltaY,\n  onPan,\n}) => {\n  const tunedZoomLevel = SCALE_VALUES[zoomLevel as keyof typeof SCALE_VALUES] || zoomLevel;\n  const [isDragging, setIsDragging] = useState<boolean>(false);\n  const [dragData, setDragData] = useState<IDragData>({\n    dx: panDeltaX, dy: panDeltaY, x: 0, y: 0,\n  });\n  // [zoom, skew, skew, zoom, dx, dy] - see https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix()\n  const [matrixData, setMatrixData] = useState<number[]>(INITIAL_MATRIX);\n  // Used to set cursor while moving.\n  // eslint-disable-next-line no-null/no-null\n  const panWrapperRef = useRef<HTMLDivElement>(null);\n  // Used to set transform for pan.\n  // eslint-disable-next-line no-null/no-null\n  const panContainerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const newZoomLevel = tunedZoomLevel || matrixData[0];\n    const newPandx = panDeltaX || matrixData[4];\n    const newPandy = panDeltaY || matrixData[5];\n\n    const newMatrixData = [...matrixData];\n    if (matrixData[0] !== newZoomLevel) {\n      newMatrixData[0] = newZoomLevel || newMatrixData[0];\n      newMatrixData[3] = newZoomLevel || newMatrixData[3];\n    }\n    if (matrixData[4] !== newPandx) {\n      newMatrixData[4] = newPandx;\n    }\n    if (matrixData[5] !== newPandy) {\n      newMatrixData[5] = newPandy;\n    }\n\n    if (!areSortedArraysEqual(matrixData, newMatrixData)) {\n      setMatrixData(calculateSafeZoneOnZoom(matrixData[0], newMatrixData, panWrapperRef.current));\n    }\n    // eslint-disable-next-line\n  }, [panDeltaX, panDeltaY, tunedZoomLevel]);\n\n  useEffect(() => {\n    if (!canPan) {\n      setMatrixData(INITIAL_MATRIX);\n    }\n  }, [canPan]);\n\n  useEffect(() => {\n    if (panContainerRef.current) {\n      panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n    }\n  }, [noWrap, matrixData]);\n\n  const handleMouseDown = (e: React.MouseEvent<EventTarget>) => {\n    if (!canPan) {\n      return;\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const offsetX = matrixData[4];\n    const offsetY = matrixData[5];\n    const newDragData: IDragData = {\n      dx: offsetX,\n      dy: offsetY,\n      x: e.pageX,\n      y: e.pageY,\n    };\n    setDragData(newDragData);\n    setIsDragging(true);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.add('move');\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n\n    if (panWrapperRef.current) {\n      panWrapperRef.current.classList.remove('move');\n    }\n\n    if (onPan) {\n      onPan(matrixData[4], matrixData[5]);\n    }\n  };\n\n  function getNewMatrixData(x: number, y: number): number[] {\n    const newMatrixData = [...matrixData];\n    const deltaX = dragData.x - x;\n    const deltaY = dragData.y - y;\n    newMatrixData[4] = dragData.dx - deltaX;\n    newMatrixData[5] = dragData.dy - deltaY;\n\n    return newMatrixData;\n  }\n\n  const handleMouseMove = (e: React.MouseEvent<EventTarget>) => {\n    if (isDragging) {\n      const newMatrixData = getNewMatrixData(e.pageX, e.pageY);\n      setMatrixData(newMatrixData);\n\n      if (panContainerRef.current) {\n        panContainerRef.current.style.transform = `matrix(${matrixData.toString()})`;\n      }\n    }\n  };\n\n  if (noWrap) {\n    return children;\n  }\n\n  return (\n    <div\n      ref={panWrapperRef}\n      className={`pan-wrapper ${className || ''}`}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n    >\n      <div\n        ref={panContainerRef}\n        className=\"pan-container\"\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PanZoom);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport {\n  ApiChat, ApiMediaFormat, ApiMessage, ApiUser, ApiDimensions,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport {\n  AVATAR_FULL_DIMENSIONS,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  calculateMediaViewerDimensions,\n} from '../common/helpers/mediaDimensions';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageDocument,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions, getMessageFileSize,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../hooks/useMediaWithDownloadProgress';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Spinner from '../ui/Spinner';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport SenderInfo from './SenderInfo';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\nimport ZoomControls from './ZoomControls';\nimport PanZoom from './PanZoom';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: number;\n  threadId?: number;\n  messageId?: number;\n  senderId?: number;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openMediaViewer' | 'closeMediaViewer' | 'openForwardMenu' | 'focusMessage'>;\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  openMediaViewer,\n  closeMediaViewer,\n  openForwardMenu,\n  focusMessage,\n  animationLevel,\n}) => {\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const isSingleSlide = Boolean(webPagePhoto || webPageVideo);\n  const messageIds = useMemo(() => {\n    return isSingleSlide && messageId\n      ? [messageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [isSingleSlide, messageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n  const isFirst = selectedMediaMessageIndex === 0 || selectedMediaMessageIndex === -1;\n  const isLast = selectedMediaMessageIndex === messageIds.length - 1 || selectedMediaMessageIndex === -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<number | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const slideAnimation = animationLevel >= 1 ? 'mv-slide' : 'none';\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isFooterHidden, setIsFooterHidden] = useState<boolean>(false);\n  const [canPanZoomWrap, setCanPanZoomWrap] = useState(false);\n  const [isZoomed, setIsZoomed] = useState<boolean>(false);\n  const [zoomLevel, setZoomLevel] = useState<number>(1);\n  const [panDelta, setPanDelta] = useState({ x: 0, y: 0 });\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl, downloadProgress } = useMediaWithDownloadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      const textParts = message ? renderMessageText(message) : undefined;\n      const hasFooter = Boolean(textParts);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo,\n  ]);\n\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (isZoomed) {\n      setCanPanZoomWrap(true);\n    } else {\n      timer = window.setTimeout(() => {\n        setCanPanZoomWrap(false);\n      }, ANIMATION_DURATION);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [isZoomed]);\n\n  const closeZoom = () => {\n    setIsZoomed(false);\n    setZoomLevel(1);\n    setPanDelta({ x: 0, y: 0 });\n  };\n\n  const handleZoomToggle = useCallback(() => {\n    setIsZoomed(!isZoomed);\n    setZoomLevel(!isZoomed ? 1.5 : 1);\n    if (isZoomed) {\n      setPanDelta({ x: 0, y: 0 });\n    }\n  }, [isZoomed]);\n\n  const handleZoomValue = useCallback((level: number, canCloseZoom = false) => {\n    setZoomLevel(level);\n    if (level === 1 && canCloseZoom) {\n      closeZoom();\n    }\n  }, []);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n    closeZoom();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n    focusMessage({ chatId, threadId, messageId });\n  }, [close, chatId, threadId, focusMessage, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    closeZoom();\n  }, [openForwardMenu, chatId, messageId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    if (isZoomed) {\n      closeZoom();\n    } else {\n      close();\n    }\n  }) : undefined), [close, isOpen, isZoomed]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId: number, direction: number): number => {\n    let index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      index += direction;\n    }\n\n    return messageIds[index];\n  }, [messageIds]);\n\n  const selectPreviousMedia = useCallback(() => {\n    if (isFirst) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, -1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isFirst, messageId, openMediaViewer, origin]);\n\n  const selectNextMedia = useCallback(() => {\n    if (isLast) {\n      return;\n    }\n\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: messageId ? getMessageId(messageId, 1) : undefined,\n      origin,\n    });\n  }, [chatId, threadId, getMessageId, isLast, messageId, openMediaViewer, origin]);\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          selectPreviousMedia();\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          selectNextMedia();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  });\n\n  // Support for swipe gestures and closing on click\n  useEffect(() => {\n    const element = document.querySelector<HTMLDivElement>('.slide-container > .active, .slide-container > .to');\n    if (!element) {\n      return undefined;\n    }\n\n    const shouldCloseOnVideo = isGif && !IS_IOS;\n\n    return captureEvents(element, {\n      // eslint-disable-next-line max-len\n      excludedClosestSelector: `.backdrop, .navigation, .media-viewer-head, .media-viewer-footer${!shouldCloseOnVideo ? ', .VideoPlayer' : ''}`,\n      onClick: () => {\n        if (!isZoomed && !IS_TOUCH_ENV) {\n          close();\n        }\n      },\n      onSwipe: IS_TOUCH_ENV ? (e, direction) => {\n        if (direction === SwipeDirection.Right) {\n          selectPreviousMedia();\n        } else if (direction === SwipeDirection.Left) {\n          selectNextMedia();\n        } else if (!(e.target && (e.target as HTMLElement).closest('.MediaViewerFooter'))) {\n          close();\n        }\n\n        return true;\n      } : undefined,\n    });\n  }, [close, isFooterHidden, isGif, isPhoto, isZoomed, selectNextMedia, selectPreviousMedia]);\n\n  const handlePan = useCallback((x: number, y: number) => {\n    setPanDelta({ x, y });\n  }, []);\n\n  const handleToggleFooterVisibility = useCallback(() => {\n    if (IS_TOUCH_ENV && (isPhoto || isGif)) {\n      setIsFooterHidden(!isFooterHidden);\n    }\n  }, [isFooterHidden, isGif, isPhoto]);\n\n  const lang = useLang();\n\n  useHistoryBack(isOpen, closeMediaViewer, openMediaViewer, {\n    chatId,\n    threadId,\n    messageId,\n    origin,\n    avatarOwnerId: avatarOwner && avatarOwner.id,\n  });\n\n  function renderSlide(isActive: boolean) {\n    if (isAvatar) {\n      return (\n        <div key={chatId} className=\"media-viewer-content\">\n          {renderPhoto(\n            fullMediaBlobUrl || previewBlobUrl,\n            calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n        </div>\n      );\n    } else if (message) {\n      const textParts = renderMessageText(message);\n      const hasFooter = Boolean(textParts);\n\n      return (\n        <div\n          key={messageId}\n          className={`media-viewer-content ${hasFooter ? 'has-footer' : ''}`}\n          onClick={handleToggleFooterVisibility}\n        >\n          {isPhoto && renderPhoto(\n            localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n            message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n            !IS_SINGLE_COLUMN_LAYOUT && !isZoomed,\n          )}\n          {isVideo && (\n            <VideoPlayer\n              key={messageId}\n              url={localBlobUrl || fullMediaBlobUrl}\n              isGif={isGif}\n              posterData={bestImageData}\n              posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n              downloadProgress={downloadProgress}\n              fileSize={videoSize!}\n              isMediaViewerOpen={isOpen}\n              noPlay={!isActive}\n              onClose={close}\n            />\n          )}\n          {textParts && (\n            <MediaViewerFooter\n              text={textParts}\n              onClick={handleFooterClick}\n              isHidden={isFooterHidden && (!isVideo || isGif)}\n              isForVideo={isVideo && !isGif}\n            />\n          )}\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      className={isZoomed ? 'zoomed' : ''}\n      isOpen={isOpen}\n    >\n      {() => (\n        <>\n          <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {IS_SINGLE_COLUMN_LAYOUT && (\n              <Button\n                className=\"media-viewer-close\"\n                round\n                size=\"smaller\"\n                color=\"translucent-white\"\n                ariaLabel={lang('Close')}\n                onClick={close}\n              >\n                <i className=\"icon-close\" />\n              </Button>\n            )}\n            <Transition activeKey={animationKey.current!} name={headerAnimation}>\n              {renderSenderInfo}\n            </Transition>\n            <MediaViewerActions\n              mediaData={fullMediaBlobUrl || previewBlobUrl}\n              isVideo={isVideo}\n              isZoomed={isZoomed}\n              message={message}\n              fileName={fileName}\n              onCloseMediaViewer={close}\n              onForward={handleForward}\n              onZoomToggle={handleZoomToggle}\n              isAvatar={isAvatar}\n            />\n          </div>\n          <PanZoom\n            noWrap={!canPanZoomWrap}\n            canPan={isZoomed}\n            panDeltaX={panDelta.x}\n            panDeltaY={panDelta.y}\n            zoomLevel={zoomLevel}\n            onPan={handlePan}\n          >\n            <Transition\n              className=\"slide-container\"\n              activeKey={selectedMediaMessageIndex}\n              name={slideAnimation}\n            >\n              {renderSlide}\n            </Transition>\n          </PanZoom>\n          {!isFirst && (\n            <button\n              type=\"button\"\n              className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('AccDescrPrevious')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectPreviousMedia}\n            />\n          )}\n          {!isLast && (\n            <button\n              type=\"button\"\n              className={`navigation next ${isVideo && !isGif && 'inline'}`}\n              aria-label={lang('Next')}\n              dir={lang.isRtl ? 'rtl' : undefined}\n              onClick={selectNextMedia}\n            />\n          )}\n          <ZoomControls\n            isShown={isZoomed}\n            onChangeZoom={handleZoomValue}\n          />\n        </>\n      )}\n    </ShowTransition>\n  );\n};\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        // @ts-ignore teact feature\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId, threadId, messageId, avatarOwnerId, profilePhotoIndex, origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openMediaViewer', 'closeMediaViewer', 'openForwardMenu', 'focusMessage',\n  ]),\n)(MediaViewer));\n","import React, {\n  FC, useMemo, useState, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getCanPostInChat, getChatTitle, isChatPrivate, sortChatIds,\n} from '../../modules/helpers';\nimport searchWords from '../../util/searchWords';\nimport { pick, unique } from '../../util/iteratees';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './ForwardPicker.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  pinnedIds?: number[];\n  activeListIds?: number[];\n  archivedListIds?: number[];\n  orderedPinnedIds?: number[];\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setForwardChatId' | 'exitForwardMode' | 'loadMoreChats'>;\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\nconst MODAL_HIDE_DELAY_MS = 300;\n\nconst ForwardPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatsById,\n  pinnedIds,\n  activeListIds,\n  archivedListIds,\n  currentUserId,\n  isOpen,\n  setForwardChatId,\n  exitForwardMode,\n  loadMoreChats,\n}) => {\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isOpen) {\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            if (inputRef.current) {\n              inputRef.current.focus();\n            }\n          });\n        }, FOCUS_DELAY_MS);\n      }\n    } else {\n      if (inputRef.current) {\n        inputRef.current.blur();\n      }\n\n      setTimeout(() => {\n        setFilter('');\n      }, MODAL_HIDE_DELAY_MS);\n    }\n  }, [isOpen]);\n\n  const chatIds = useMemo(() => {\n    const listIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ];\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    return sortChatIds([\n      ...listIds.filter((id) => {\n        const chat = chatsById[id];\n        if (!chat) {\n          return true;\n        }\n\n        if (!getCanPostInChat(chat, MAIN_THREAD_ID)) {\n          return false;\n        }\n\n        if (!filter) {\n          return true;\n        }\n\n        return searchWords(getChatTitle(lang, chatsById[id], undefined, id === currentUserId), filter);\n      }),\n    ], chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, currentUserId, filter, lang, pinnedIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(loadMoreChats, chatIds, Boolean(filter));\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFilter(e.currentTarget.value);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      setForwardChatId({ id: viewportIds[index === -1 ? 0 : index] });\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={exitForwardMode}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={inputRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={lang('ForwardTo')}\n      />\n    </div>\n  );\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={exitForwardMode}\n      className=\"ForwardPicker\"\n      header={modalHeader}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          noScrollRestore={Boolean(filter)}\n          ref={containerRef}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              onClick={() => setForwardChatId({ id })}\n            >\n              {isChatPrivate(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">Sorry, nothing found.</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      pinnedIds: orderedPinnedIds.active,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      currentUserId,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setForwardChatId', 'exitForwardMode', 'loadMoreChats']),\n)(ForwardPicker));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiError, ApiInviteInfo } from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissDialog' | 'acceptInviteConfirmation'>;\n\nconst Dialogs: FC<StateProps & DispatchProps> = ({ dialogs, dismissDialog, acceptInviteConfirmation }) => {\n  const lang = useLang();\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, participantsCount, isChannel,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      dismissDialog();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={title}\n      >\n        {participantsCount !== undefined && <p>{participantsText}</p>}\n        <Button isText className=\"confirm-dialog-button\" onClick={handleJoinClick}>{joinText}</Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={dismissDialog}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen\n        onClose={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={dismissDialog}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {dialogs.map(renderDialog)}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissDialog', 'acceptInviteConfirmation']),\n)(Dialogs));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'dismissNotification'>;\n\nconst Notifications: FC<StateProps & DispatchProps> = ({ notifications, dismissNotification }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n  (setGlobal, actions): DispatchProps => pick(actions, ['dismissNotification']),\n)(Notifications));\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'toggleSafeLinkModal'>;\n\nconst SafeLinkModal: FC<OwnProps & DispatchProps> = ({ url, toggleSafeLinkModal }) => {\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(url);\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['toggleSafeLinkModal']),\n)(SafeLinkModal));\n","import React, {\n  FC, memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString } from '../../util/dateFormat';\nimport useLang, { LangFn } from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nexport type OwnProps = {\n  selectedAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n  const defaultSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const maxDate = maxAt ? new Date(maxAt) : undefined;\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(defaultSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(defaultSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(defaultSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(defaultSelectedDate);\n      setCurrentMonthAndYear(new Date(defaultSelectedDate.getFullYear(), defaultSelectedDate.getMonth(), 1));\n    }\n  }, [defaultSelectedDate, isOpen, prevIsOpen]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < defaultSelectedDate.getTime()) {\n      setSelectedDate(defaultSelectedDate);\n      setSelectedHours(formatInputTime(defaultSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(defaultSelectedDate.getMinutes()));\n    }\n  }, [defaultSelectedDate, isTimeInputFocused, isFutureMode, selectedDate]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  function handleSubmit() {\n    onSubmit(selectedDate);\n  }\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, isFutureMode ? now : undefined, isPastMode ? now : maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {!!gridDate && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {withTimePicker ? formatSubmitLabel(lang, selectedDate) : submitButtonLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay();\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day, 0, 0, 0, 0);\n  const fixedMinDate = minDate && new Date(minDate.getFullYear(), minDate.getMonth(), minDate.getDate(), 0, 0, 0, 0);\n  const fixedMaxDate = maxDate && new Date(maxDate.getFullYear(), maxDate.getMonth(), maxDate.getDate(), 0, 0, 0, 0);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(date)]);\n}\n\nexport default memo(CalendarModal);\n","import React, { FC, memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMessagesByDate' | 'closeHistoryCalendar'>;\n\nconst HistoryCalendar: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen, selectedAt, searchMessagesByDate, closeHistoryCalendar,\n}) => {\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      selectedAt: global.historyCalendarSelectedAt,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesByDate', 'closeHistoryCalendar',\n  ]),\n)(HistoryCalendar));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../api/types';\nimport { IAlbum } from '../../types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from './helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'deleteScheduledMessages'>;\n\nconst DeleteMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n}) => {\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages', 'deleteScheduledMessages',\n  ]),\n)(DeleteMessageModal));\n","import React, { FC, useCallback, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'pinMessage'>;\n\nconst PinMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n  pinMessage,\n}) => {\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isChatPrivate(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = !!chat && isChatChannel(chat);\n    const isGroup = !!chat && isChatBasicGroup(chat);\n    const isSuperGroup = !!chat && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['pinMessage']),\n)(PinMessageModal));\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: number;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import React, {\n  FC, useCallback, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../modules/selectors';\nimport {\n  isChatPrivate,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'deleteMessages' | 'exitMessageSelectMode' | 'deleteScheduledMessages'>;\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n  deleteMessages,\n  deleteScheduledMessages,\n  exitMessageSelectMode,\n}) => {\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isChatPrivate(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'deleteMessages',\n    'deleteScheduledMessages',\n    'exitMessageSelectMode',\n  ]),\n)(DeleteSelectedMessageModal));\n","import { ChangeEvent } from 'react';\n\nimport React, {\n  FC, memo, useCallback, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiReportReason } from '../../api/types';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\nimport InputText from '../ui/InputText';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageIds?: number[];\n  onClose: () => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'reportMessages' | 'exitMessageSelectMode'>;\n\nconst ReportMessageModal: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  messageIds,\n  reportMessages,\n  exitMessageSelectMode,\n  onClose,\n}) => {\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = () => {\n    reportMessages({ messageIds, reason: selectedReason, description });\n    exitMessageSelectMode();\n    onClose();\n  };\n\n  const handleSelectReason = useCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  }, []);\n\n  const lang = useLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ];\n\n  if (!messageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      className=\"report\"\n      title={lang('lng_report_message_title')}\n    >\n      <RadioGroup\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n        {lang('lng_report_button')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined, (setGlobal, actions): DispatchProps => pick(actions, [\n    'reportMessages', 'exitMessageSelectMode',\n  ]),\n)(ReportMessageModal));\n","import React, { FC, memo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectSelectedMessagesCount,\n} from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportMessageModal from '../common/ReportMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  selectedMessageIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'exitMessageSelectMode' | 'openForwardMenuForSelectedMessages'>;\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps & DispatchProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  selectedMessageIds,\n  exitMessageSelectMode,\n  openForwardMenuForSelectedMessages,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const lang = useLang();\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {!!selectedMessagesCount && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              <MenuItem\n                icon=\"forward\"\n                ariaLabel=\"Forward Messages\"\n                onClick={openForwardMenuForSelectedMessages}\n              >\n                <span className=\"item-text\">\n                  {lang('Forward')}\n                </span>\n              </MenuItem>\n            )}\n            {canReportMessages && (\n              <MenuItem\n                icon=\"flag\"\n                onClick={openReportModal}\n                disabled={!canReportMessages}\n                ariaLabel={lang('Conversation.ReportMessages')}\n              >\n                <span className=\"item-text\">\n                  {lang('Report')}\n                </span>\n              </MenuItem>\n            )}\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={openDeleteModal}\n              disabled={!canDeleteMessages}\n              ariaLabel={lang('EditAdminGroupDeleteMessages')}\n            >\n              <span className=\"item-text\">\n                {lang('Delete')}\n              </span>\n            </MenuItem>\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      selectedMessageIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['exitMessageSelectMode', 'openForwardMenuForSelectedMessages']),\n)(MessageSelectToolbar));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nexport default (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatPrivate, getPrivateChatUserId, selectIsChatMuted } from '../../../modules/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../modules/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: number;\n  withUsername?: boolean;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  privateChatUser,\n  isPinned,\n  isMuted,\n  withUsername,\n  onClick,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    privateChatUser,\n    isPinned,\n    isMuted,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = () => {\n    onClick(chatId);\n  };\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isChatPrivate(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      privateChatUser,\n      isPinned,\n      isMuted,\n    };\n  },\n)(LeftSearchResultChat));\n","import React, {\n  FC, useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: number[];\n  usersById: Record<number, ApiUser>;\n  recentlyFoundChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadTopUsers' | 'loadContactList' | 'openChat' | 'addRecentlyFoundChatId' | 'clearRecentlyFoundChats'\n)>;\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps & DispatchProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset, loadTopUsers, loadContactList, openChat,\n  addRecentlyFoundChatId, clearRecentlyFoundChats,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n      // Loading full contact list for quick local search before user enters the query\n      loadContactList();\n    });\n  }, [loadTopUsers, loadContactList]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n      onReset();\n      setTimeout(() => {\n        addRecentlyFoundChatId({ id });\n      }, SEARCH_CLOSE_TIMEOUT_MS);\n    },\n    [openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadTopUsers',\n    'loadContactList',\n    'openChat',\n    'addRecentlyFoundChatId',\n    'clearRecentlyFoundChats',\n  ]),\n)(RecentContacts));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageSummaryText,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../modules/helpers';\nimport { selectChat, selectUser } from '../../../modules/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport useMedia from '../../../hooks/useMedia';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useLang, { LangFn } from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: number;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'focusMessage'>;\n\nconst ChatMessage: FC<OwnProps & StateProps & DispatchProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  focusMessage,\n  lastSyncTime,\n}) => {\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        withOnlineStatus\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderMessageSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderMessageSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderText(getMessageSummaryText(lang, message));\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={isRoundVideo ? 'round' : undefined} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderText(getMessageSummaryText(lang, message, true), ['emoji', 'highlight'], { highlight: searchQuery })}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'focusMessage',\n  ]),\n)(ChatMessage));\n","import React, { FC, memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiUser, ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport searchWords from '../../../util/searchWords';\nimport { unique, pick } from '../../../util/iteratees';\nimport { getUserFullName, getMessageSummaryText, sortChatIds } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  localContactIds?: number[];\n  localChatIds?: number[];\n  localUserIds?: number[];\n  globalChatIds?: number[];\n  globalUserIds?: number[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'openChat' | 'addRecentlyFoundChatId' | 'searchMessagesGlobal' | 'setGlobalSearchChatId'\n)>;\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 3;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, usersById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect, openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n}) => {\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: number) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const foundContactIds = localContactIds\n      ? localContactIds.filter((id) => {\n        const user = usersById[id];\n        if (!user) {\n          return false;\n        }\n\n        const fullName = getUserFullName(user);\n        return (fullName && searchWords(fullName, searchQuery)) || searchWords(user.username, searchQuery);\n      })\n      : [];\n\n    return [\n      ...(currentUserId && searchWords(lang('SavedMessages'), searchQuery) ? [currentUserId] : []),\n      ...sortChatIds(unique([\n        ...foundContactIds,\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById),\n    ];\n  }, [\n    searchQuery, localContactIds, currentUserId, lang, localChatIds, localUserIds, chatsById, usersById,\n  ]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(unique([...globalChatIds, ...globalUserIds]),\n      chatsById, true);\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {!!localResults.length && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {!!localResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!globalResults.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {!!foundMessages.length && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n        usersById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      usersById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openChat',\n    'addRecentlyFoundChatId',\n    'searchMessagesGlobal',\n    'setGlobalSearchChatId',\n  ]),\n)(ChatResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getMessageSummaryText } from '../../../modules/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<number, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  searchMessagesGlobal,\n  onSearchDateSelect,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_').map(Number);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = getMessageSummaryText(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {!!foundMessages.length && foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMessagesGlobal']),\n)(ChatMessageResults));\n","import { GlobalState } from '../../../../global/types';\nimport {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { ISettings } from '../../../../types';\n\nimport { selectTheme } from '../../../../modules/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  globalMessagesByChatId?: Record<number, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: number;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'openMediaViewer')>;\n\nconst CURRENT_TYPE = 'media';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  openMediaViewer,\n}) => {\n  const lang = useLang();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: number) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'openMediaViewer',\n  ]),\n)(MediaResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'links';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(LinkResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMessage } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../modules/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage')>;\n\nconst CURRENT_TYPE = 'documents';\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n  ]),\n)(FileResults));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps, StateProps } from './helpers/createMapStateToProps';\nimport { pick } from '../../../util/iteratees';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('searchMessagesGlobal' | 'focusMessage' | 'openAudioPlayer')>;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  searchMessagesGlobal,\n  focusMessage,\n  openAudioPlayer,\n}) => {\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_').map(Number);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: number) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: number) => {\n    openAudioPlayer({ chatId, messageId, origin: AudioOrigin.Search });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'searchMessagesGlobal',\n    'focusMessage',\n    'openAudioPlayer',\n  ]),\n)(AudioResults));\n","import React, {\n  FC, memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('setGlobalSearchContent' | 'setGlobalSearchDate')>;\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  setGlobalSearchContent,\n  setGlobalSearchDate,\n  onReset,\n}) => {\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack(isActive, onReset, undefined, undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-reversed' : 'slide'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setGlobalSearchContent', 'setGlobalSearchDate']),\n)(LeftSearch));\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nexport default () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'signOut' | 'deleteChatFolder'>;\n\nconst SettingsHeader: FC<OwnProps & DispatchProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  signOut,\n  deleteChatFolder,\n  onScreenSelect,\n}) => {\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['signOut', 'deleteChatFolder']),\n)(SettingsHeader));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\nimport { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadProfilePhotos'>;\n\nconst SettingsMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  loadProfilePhotos,\n  currentUser,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Main);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadProfilePhotos']),\n)(SettingsMain));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { ProfileEditProgress, SettingsScreens } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { selectUser } from '../../../modules/selectors';\nimport { getChatAvatarHash } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadCurrentUser' | 'updateProfile' | 'checkUsername'\n)>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n  loadCurrentUser,\n  updateProfile,\n  checkUsername,\n}) => {\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.EditProfile);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-edit-profile\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadCurrentUser',\n    'updateProfile',\n    'checkUsername',\n  ]),\n)(SettingsEditProfile));\n","import React, {\n  FC, memo, useMemo, useCallback, useState, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChatFolder, ApiChat, ApiUser } from '../../../../api/types';\nimport { NotifyException, NotifySettings, SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { pick } from '../../../../util/iteratees';\nimport { selectNotifyExceptions, selectNotifySettings } from '../../../../modules/selectors';\nimport { throttle } from '../../../../util/schedulers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport { getFolderDescriptionText } from '../../../../modules/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\ntype OwnProps = {\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  usersById: Record<number, ApiUser>;\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  notifySettings: NotifySettings;\n  notifyExceptions?: Record<number, NotifyException>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadRecommendedChatFolders' | 'addChatFolder' | 'showDialog'>;\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps & DispatchProps> = ({\n  onCreateFolder,\n  onEditFolder,\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsById,\n  usersById,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n  notifySettings,\n  notifyExceptions,\n  loadRecommendedChatFolders,\n  addChatFolder,\n  showDialog,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersAll').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Folders);\n\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    const chatIds = Object.keys(chatsById).map(Number);\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(\n          lang, chatsById, usersById, folder, chatIds, notifySettings, notifyExceptions,\n        ),\n      };\n    });\n  }, [orderedFolderIds, chatsById, foldersById, usersById, notifySettings, notifyExceptions, lang]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header\">\n        <div className=\"settings-content-icon\">\n          {animationData && (\n            <AnimatedSticker\n              id=\"settingsFoldersMain\"\n              size={STICKER_SIZE_FOLDER_SETTINGS}\n              animationData={animationData}\n              play={isAnimationLoaded}\n              noLoop\n              onLoad={handleAnimationLoad}\n            />\n          )}\n        </div>\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && !!recommendedChatFolders.length) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: { byId: chatsById },\n      users: { byId: usersById },\n    } = global;\n\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      chatsById,\n      usersById,\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n      notifySettings: selectNotifySettings(global),\n      notifyExceptions: selectNotifyExceptions(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadRecommendedChatFolders', 'addChatFolder', 'showDialog']),\n)(SettingsFoldersMain));\n","import React, { FC } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { findIntersectionWithSet, pick } from '../../../../util/iteratees';\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport getAnimationData from '../../../common/helpers/animatedAssets';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  FolderEditDispatch,\n  FoldersState,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedSticker from '../../../common/AnimatedSticker';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: number[];\n  loadedArchivedChatIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolder' | 'addChatFolder' | 'loadMoreChats'>;\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps & DispatchProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onScreenSelect,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n  editChatFolder,\n  addChatFolder,\n  loadMoreChats,\n}) => {\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('FoldersNew').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  useEffect(() => {\n    if (\n      visibleIncludedChatIds.length < includedChatIds.length\n      || visibleExcludedChatIds.length < excludedChatIds.length\n    ) {\n      loadMoreChats({ listType: 'active' });\n    }\n  }, [\n    loadMoreChats,\n    excludedChatIds.length,\n    includedChatIds.length,\n    visibleExcludedChatIds.length,\n    visibleIncludedChatIds.length,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onBack, onScreenSelect, state.mode === 'edit'\n    ? SettingsScreens.FoldersEditFolder\n    : SettingsScreens.FoldersCreateFolder);\n\n  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }\n\n  function handleSubmit() {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isChatPrivate(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content custom-scroll\">\n        <div className=\"settings-content-header\">\n          <div className=\"settings-content-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"settingsFoldersEdit\"\n                size={STICKER_SIZE_FOLDER_SETTINGS}\n                animationData={animationData}\n                play={isAnimationLoaded && String(state.folderId)}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={!!state.isTouched}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolder', 'addChatFolder', 'loadMoreChats']),\n)(SettingsFoldersEdit));\n","import React, {\n  FC, useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isChatPrivate } from '../../../../modules/helpers';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n  FolderChatType,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: number[];\n  selectedIds: number[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: number[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onLoadMore: () => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  onLoadMore,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: number) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: number) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isChatPrivate(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(onLoadMore, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import React, {\n  FC, memo, useMemo, useCallback,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../../global/types';\nimport { ApiChat } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { pick } from '../../../../util/iteratees';\nimport searchWords from '../../../../util/searchWords';\nimport { prepareChatList, getChatTitle } from '../../../../modules/helpers';\nimport {\n  FoldersState,\n  FolderEditDispatch,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadMoreChats'>;\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  mode,\n  state,\n  dispatch,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  loadMoreChats,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [...activeChatArrays.pinnedChats, ...activeChatArrays.otherChats]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        !chatFilter\n        || searchWords(getChatTitle(lang, chat), chatFilter)\n        || selectedChatIds.includes(chat.id)\n      ))\n      .map(({ id }) => id);\n  }, [chats, chatFilter, lang, selectedChatIds]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: number[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect,\n    mode === 'included' ? SettingsScreens.FoldersIncludedChats : SettingsScreens.FoldersExcludedChats);\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onLoadMore={loadMoreChats}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n    } = global;\n\n    return {\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadMoreChats']),\n)(SettingsFoldersChatFilters));\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useCallback, useMemo, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './RangeSlider.scss';\n\ntype OwnProps = {\n  options?: string[];\n  range?: { min: number; max: number; step?: number };\n  label?: string;\n  value: number;\n  disabled?: boolean;\n  onChange: (value: number) => void;\n};\n\nconst RangeSlider: FC<OwnProps> = ({\n  options,\n  range,\n  label,\n  value,\n  disabled,\n  onChange,\n}) => {\n  const lang = useLang();\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    onChange(Number(event.currentTarget.value));\n  }, [onChange]);\n\n  const className = buildClassName(\n    'RangeSlider',\n    disabled && 'disabled',\n  );\n\n  const trackWidth = useMemo(() => {\n    if (options) {\n      return (value / (options.length - 1)) * 100;\n    } else if (range) {\n      const possibleValuesLength = (range.max - range.min) / (range.step || 1);\n      return ((value - range.min) / possibleValuesLength) * 100;\n    }\n    return 0;\n  }, [value, options, range]);\n\n  const [min, max, step] = useMemo(() => {\n    if (options) {\n      return [0, options.length - 1, 1];\n    } else if (range) {\n      return [range.min, range.max, range.step || 1];\n    }\n\n    return [0, 0, 0];\n  }, [range, options]);\n\n  return (\n    <div className={className}>\n      {label && (\n        <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <span className=\"label\" dir=\"auto\">{label}</span>\n          {range && (\n            <span className=\"value\" dir=\"auto\">{value}</span>\n          )}\n        </div>\n      )}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          // @ts-ignore\n          style={`width: ${trackWidth}%`}\n        />\n        <input\n          min={min}\n          max={max}\n          value={value}\n          step={step}\n          type=\"range\"\n          onChange={handleChange}\n        />\n        {options && (\n          <div className=\"slider-options\">\n            {options.map((option, index) => (\n              <div\n                className={buildClassName('slider-option no-selection', index === value && 'active')}\n                onClick={() => onChange(index)}\n              >\n                {option}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(RangeSlider);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting, ApiMediaFormat.Lottie);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(lottieData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && lottieData && (\n        <AnimatedSticker\n          id={mediaHash}\n          size={size}\n          animationData={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiStickerSet } from '../../../api/types';\n\nimport { ObserveFn, useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport { getFirstLetters } from '../../../util/textFormat';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const { shouldRenderFullMedia, transitionClassNames } = useTransitionForMedia(mediaData, 'slow');\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {!shouldRenderFullMedia && getFirstLetters(stickerSet.title, 2)}\n      {shouldRenderFullMedia && (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, {\n  FC, memo,\n} from '../../../lib/teact/teact';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import React, {\n  FC, useCallback, memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ISettings } from '../../../types';\nimport { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { IS_IOS, IS_MAC_OS, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'messageTextSize' |\n  'animationLevel' |\n  'messageSendKeyCombo' |\n  'shouldAutoDownloadMediaFromContacts' |\n  'shouldAutoDownloadMediaInPrivateChats' |\n  'shouldAutoDownloadMediaInGroups' |\n  'shouldAutoDownloadMediaInChannels' |\n  'shouldAutoPlayGifs' |\n  'shouldAutoPlayVideos' |\n  'shouldSuggestStickers' |\n  'shouldLoopStickers'\n)> & {\n  stickerSetIds?: string[];\n  stickerSetsById?: Record<string, ApiStickerSet>;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setSettingOption' | 'loadStickerSets' | 'loadAddedStickers'\n)>;\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst SettingsGeneral: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldAutoDownloadMediaFromContacts,\n  shouldAutoDownloadMediaInPrivateChats,\n  shouldAutoDownloadMediaInGroups,\n  shouldAutoDownloadMediaInChannels,\n  shouldAutoPlayGifs,\n  shouldAutoPlayVideos,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  setSettingOption,\n  loadStickerSets,\n  loadAddedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  useEffect(() => {\n    loadStickerSets();\n  }, [loadStickerSets]);\n\n  useEffect(() => {\n    if (stickerSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [stickerSetIds, loadAddedStickers]);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.General);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          // TODO Remove memo-killer\n          range={{ min: 12, max: 20 }}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={(value) => setSettingOption({ messageSendKeyCombo: value })}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoDownloadMedia')}</h4>\n\n        <Checkbox\n          label={lang('Contacts')}\n          checked={shouldAutoDownloadMediaFromContacts}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaFromContacts: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadPrivateChats')}\n          checked={shouldAutoDownloadMediaInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInPrivateChats: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutodownloadGroupChats')}\n          checked={shouldAutoDownloadMediaInGroups}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInGroups: isChecked })}\n        />\n        <Checkbox\n          label={lang('FilterChannels')}\n          checked={shouldAutoDownloadMediaInChannels}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoDownloadMediaInChannels: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={shouldAutoPlayGifs}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayGifs: isChecked })}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={shouldAutoPlayVideos}\n          onCheck={(isChecked) => setSettingOption({ shouldAutoPlayVideos: isChecked })}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldSuggestStickers: isChecked })}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={(isChecked) => setSettingOption({ shouldLoopStickers: isChecked })}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldAutoDownloadMediaFromContacts',\n        'shouldAutoDownloadMediaInPrivateChats',\n        'shouldAutoDownloadMediaInGroups',\n        'shouldAutoDownloadMediaInChannels',\n        'shouldAutoPlayGifs',\n        'shouldAutoPlayVideos',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setSettingOption', 'loadStickerSets', 'loadAddedStickers',\n  ]),\n)(SettingsGeneral));\n","let fileSelector: HTMLInputElement;\n\nexport function openSystemFilesDialog(accept = '*', callback: (e: Event) => void, noMultiple = false) {\n  if (!fileSelector) {\n    fileSelector = document.createElement('input');\n    fileSelector.setAttribute('type', 'file');\n  }\n\n  fileSelector.setAttribute('accept', accept);\n\n  if (noMultiple) {\n    fileSelector.removeAttribute('multiple');\n  } else {\n    fileSelector.setAttribute('multiple', 'multiple');\n  }\n\n  // eslint-disable-next-line no-null/no-null\n  fileSelector.onchange = null;\n  fileSelector.value = '';\n  fileSelector.onchange = callback;\n\n  fileSelector.click();\n}\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import React, {\n  FC, memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport { ApiWallpaper } from '../../../api/types';\nimport { ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport useTransitionForMedia from '../../../hooks/useTransitionForMedia';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithDownloadProgress from '../../../hooks/useMediaWithDownloadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(previewBlobUrl || localBlobUrl, 'slow');\n  const [isDownloadAllowed, setIsDownloadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, downloadProgress,\n  } = useMediaWithDownloadProgress(localMediaHash, !isDownloadAllowed);\n  const wasDownloadDisabled = usePrevious(isDownloadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isDownloadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasDownloadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsDownloadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        {shouldRenderThumb && (\n          <canvas\n            ref={thumbRef}\n            className=\"thumbnail\"\n          />\n        )}\n        {shouldRenderFullMedia && (\n          <img\n            src={previewBlobUrl || localBlobUrl}\n            className={`full-media ${transitionClassNames}`}\n            alt=\"\"\n          />\n        )}\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={downloadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React, {\n  FC, memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadWallpapers' | 'uploadWallpaper' | 'setThemeSettings'\n)>;\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n  loadWallpapers,\n  uploadWallpaper,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackground);\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadWallpapers', 'uploadWallpaper', 'setThemeSettings',\n  ]),\n)(SettingsGeneralBackground));\n","import { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens, ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { captureEvents, RealTouchEvent } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../modules/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setThemeSettings'>;\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  theme,\n  backgroundColor,\n  setThemeSettings,\n}) => {\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.GeneralChatBackgroundColor);\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            // @ts-ignore\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            // @ts-ignore\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setThemeSettings']),\n)(SettingsGeneralBackground));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadNotificationSettings' | 'updateContactSignUpNotification' |\n  'updateNotificationSettings' | 'updateWebNotificationSettings'\n)>;\n\nconst SettingsNotifications: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n  loadNotificationSettings,\n  updateContactSignUpNotification,\n  updateNotificationSettings,\n  updateWebNotificationSettings,\n}) => {\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Notifications);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasWebNotifications: e.target.checked });\n          }}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={(e) => {\n            updateWebNotificationSettings({ hasPushNotifications: e.target.checked });\n          }}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            disabled={!hasWebNotifications}\n            range={{\n              min: 0,\n              max: 10,\n            }}\n            value={notificationSoundVolume}\n            onChange={(volume) => {\n              updateWebNotificationSettings({ notificationSoundVolume: volume });\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'contact', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'group', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'silent'); }}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={(e) => { handleSettingsChange(e, 'broadcast', 'showPreviews'); }}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n    hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n    hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n    hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n    hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n    hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n    hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n    hasWebNotifications: global.settings.byKey.hasWebNotifications,\n    hasPushNotifications: global.settings.byKey.hasPushNotifications,\n    notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n  };\n},\n(setGlobal, actions): DispatchProps => pick(actions, [\n  'loadNotificationSettings',\n  'updateContactSignUpNotification',\n  'updateNotificationSettings',\n  'updateWebNotificationSettings',\n]))(SettingsNotifications));\n","import React, { FC, memo, useEffect } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { PrivacyVisibility, SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  blockedCount: number;\n  sessionsCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  visibilityPrivacyPhoneNumber?: PrivacyVisibility;\n  visibilityPrivacyLastSeen?: PrivacyVisibility;\n  visibilityPrivacyProfilePhoto?: PrivacyVisibility;\n  visibilityPrivacyForwarding?: PrivacyVisibility;\n  visibilityPrivacyGroupChats?: PrivacyVisibility;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadBlockedContacts' | 'loadAuthorizations' | 'loadPrivacySettings' | 'loadContentSettings' | 'updateContentSettings'\n)>;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  hasPassword,\n  blockedCount,\n  sessionsCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  visibilityPrivacyPhoneNumber,\n  visibilityPrivacyLastSeen,\n  visibilityPrivacyProfilePhoto,\n  visibilityPrivacyForwarding,\n  visibilityPrivacyGroupChats,\n  loadPrivacySettings,\n  loadBlockedContacts,\n  loadAuthorizations,\n  loadContentSettings,\n  updateContentSettings,\n}) => {\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Privacy);\n\n  function getVisibilityValue(visibility?: PrivacyVisibility) {\n    switch (visibility) {\n      case 'everybody':\n        return lang('P2PEverybody');\n\n      case 'contacts':\n        return lang('P2PContacts');\n\n      case 'nobody':\n        return lang('P2PNobody');\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyActiveSessions)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('SessionsTitle')}</span>\n            {sessionsCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {sessionsCount === 1 ? '1 session' : `${sessionsCount} sessions`}\n              </span>\n            )}\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(visibilityPrivacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: { hasPassword, isSensitiveEnabled, canChangeSensitive },\n        privacy,\n      },\n      blocked,\n      activeSessions,\n    } = global;\n\n    return {\n      hasPassword,\n      blockedCount: blocked.totalCount,\n      sessionsCount: activeSessions.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      visibilityPrivacyPhoneNumber: privacy.phoneNumber?.visibility,\n      visibilityPrivacyLastSeen: privacy.lastSeen?.visibility,\n      visibilityPrivacyProfilePhoto: privacy.profilePhoto?.visibility,\n      visibilityPrivacyForwarding: privacy.forwards?.visibility,\n      visibilityPrivacyGroupChats: privacy.chatInvite?.visibility,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadBlockedContacts', 'loadAuthorizations', 'loadPrivacySettings', 'loadContentSettings', 'updateContentSettings',\n  ]),\n)(SettingsPrivacy));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ISettings, LangCode, SettingsScreens } from '../../../types';\nimport { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { pick } from '../../../util/iteratees';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\ntype DispatchProps = Pick<GlobalActions, 'loadLanguages' | 'setSettingOption'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  languages,\n  language,\n  loadLanguages,\n  setSettingOption,\n}) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.Language);\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadLanguages', 'setSettingOption',\n  ]),\n)(SettingsLanguage));\n","import { ApiPrivacyKey, SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n  }\n\n  return undefined;\n}\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helper/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = Partial<ApiPrivacySettings> & {\n  chatsById?: Record<number, ApiChat>;\n  usersById?: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacyVisibility'>;\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps & DispatchProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  setPrivacyVisibility,\n}) => {\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            onClick={() => { onScreenSelect(allowedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            onClick={() => { onScreenSelect(deniedContactsScreen); }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverShareWith')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacyVisibility']),\n)(SettingsPrivacyVisibility));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiSession } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  activeSessions: ApiSession[];\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadAuthorizations' | 'terminateAuthorization' | 'terminateAllAuthorizations'\n)>;\n\nconst SettingsPrivacyActiveSessions: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  activeSessions,\n  loadAuthorizations,\n  terminateAuthorization,\n  terminateAllAuthorizations,\n}) => {\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  useEffect(() => {\n    loadAuthorizations();\n  }, [loadAuthorizations]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const currentSession = useMemo(() => {\n    return activeSessions.find((session) => session.isCurrent);\n  }, [activeSessions]);\n\n  const otherSessions = useMemo(() => {\n    return activeSessions.filter((session) => !session.isCurrent);\n  }, [activeSessions]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyActiveSessions);\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive className=\"no-icon\">\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.appName}</span>\n            <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('TerminateAllSessions')}\n        </ListItem>\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessions: ApiSession[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessions.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(session: ApiSession) {\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        className=\"no-icon\"\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.appName}</span>\n          <span className=\"subtitle black tight\">{getDeviceEnvironment(session)}</span>\n          <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {otherSessions && renderOtherSessions(otherSessions)}\n      {otherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text=\"Are you sure you want to terminate all other sessions?\"\n          confirmLabel=\"Terminate All Other Sessions\"\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nfunction getDeviceEnvironment(session: ApiSession) {\n  return `${session.deviceModel}${session.deviceModel ? ', ' : ''} ${session.platform} ${session.systemVersion}`;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      activeSessions: global.activeSessions,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadAuthorizations', 'terminateAuthorization', 'terminateAllAuthorizations',\n  ]),\n)(SettingsPrivacyActiveSessions));\n","import React, {\n  FC, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { pick } from '../../../util/iteratees';\nimport {\n  getChatTitle, getUserFullName, isChatPrivate,\n} from '../../../modules/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<number, ApiChat>;\n  usersByIds: Record<number, ApiUser>;\n  blockedIds: number[];\n  phoneCodeList: ApiCountryCode[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'unblockContact'>;\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n  unblockContact,\n}) => {\n  const handleUnblockClick = useCallback((contactId: number) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.PrivacyBlockedUsers);\n\n  function renderContact(contactId: number, i: number, viewportOffset: number) {\n    const isPrivate = isChatPrivate(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">\n              List is empty\n            </div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={() => {\n        }}\n        className=\"not-implemented\"\n        ariaLabel=\"Add a blocked user\"\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['unblockContact']),\n)(SettingsPrivacyBlockedUsers));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaEnabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <ListItem\n          icon=\"edit\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaEnabled));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../../common/PasswordMonkey';\nimport PasswordForm from '../../../common/PasswordForm';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  error?: string;\n  isLoading?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsTwoFaPassword: FC<OwnProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  error,\n  isLoading,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaPassword);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps & StateProps> = ({\n  isActive, onScreenSelect, onReset, animatedEmoji, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaDisabled);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🔐'),\n  };\n})(SettingsTwoFaStart));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport renderText from '../../../common/helpers/renderText';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = () => {\n    onSubmit();\n  };\n\n  const handleSkipConfirm = () => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  };\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React, { FC, memo } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps & StateProps> = ({\n  isActive, onReset, animatedEmoji, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = () => {\n    onScreenSelect(SettingsScreens.Privacy);\n  };\n\n  useHistoryBack(isActive, onReset, onScreenSelect, SettingsScreens.TwoFaCongratulations);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '🥳'),\n  };\n})(SettingsTwoFaCongratulations));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../modules/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport AnimatedEmoji from '../../../common/AnimatedEmoji';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n  screen: SettingsScreens;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onScreenSelect,\n  onReset,\n  screen,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  };\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedEmoji sticker={animatedEmoji} size=\"large\" />\n      </div>\n\n      <div className=\"settings-item pt-0 no-border\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import React, {\n  FC, memo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { pick } from '../../../../util/iteratees';\nimport { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from './SettingsTwoFaPassword';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updatePassword' | 'updateRecoveryEmail' | 'clearPassword' | 'provideTwoFaEmailCode' |\n  'checkPassword' | 'clearTwoFaError'\n)>;\n\nconst SettingsTwoFa: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n  updatePassword,\n  checkPassword,\n  clearTwoFaError,\n  updateRecoveryEmail,\n  provideTwoFaEmailCode,\n  clearPassword,\n}) => {\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          screen={currentScreen}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n          screen={currentScreen}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          screen={currentScreen}\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          screen={currentScreen}\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updatePassword', 'updateRecoveryEmail', 'clearPassword', 'provideTwoFaEmailCode',\n    'checkPassword', 'clearTwoFaError',\n  ]),\n)(SettingsTwoFa));\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ApiPrivacySettings, SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport { pick } from '../../../util/iteratees';\nimport searchWords from '../../../util/searchWords';\nimport { getPrivacyKey } from './helper/privacy';\nimport {\n  getChatTitle, isChatGroup, isChatPrivate, prepareChatList,\n} from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  chatsById: Record<number, ApiChat>;\n  listIds?: number[];\n  orderedPinnedIds?: number[];\n  archivedListIds?: number[];\n  archivedPinnedIds?: number[];\n  settings?: ApiPrivacySettings;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'setPrivacySettings'>;\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps & DispatchProps> = ({\n  currentUserId,\n  isAllowList,\n  screen,\n  settings,\n  chatsById,\n  listIds,\n  orderedPinnedIds,\n  archivedListIds,\n  archivedPinnedIds,\n  setPrivacySettings,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<number[]>(selectedContactIds);\n\n  const chats = useMemo(() => {\n    const activeChatArrays = listIds\n      ? prepareChatList(chatsById, listIds, orderedPinnedIds, 'all')\n      : undefined;\n    const archivedChatArrays = archivedListIds\n      ? prepareChatList(chatsById, archivedListIds, archivedPinnedIds, 'archived')\n      : undefined;\n\n    if (!activeChatArrays && !archivedChatArrays) {\n      return undefined;\n    }\n\n    return [\n      ...(activeChatArrays\n        ? [\n          ...activeChatArrays.pinnedChats,\n          ...activeChatArrays.otherChats,\n        ]\n        : []\n      ),\n      ...(archivedChatArrays ? archivedChatArrays.otherChats : []),\n    ];\n  }, [chatsById, listIds, orderedPinnedIds, archivedListIds, archivedPinnedIds]);\n\n  const displayedIds = useMemo(() => {\n    if (!chats) {\n      return undefined;\n    }\n\n    return chats\n      .filter((chat) => (\n        ((isChatPrivate(chat.id) && chat.id !== currentUserId) || isChatGroup(chat))\n        && (\n          !searchQuery\n        || searchWords(getChatTitle(lang, chat), searchQuery)\n        || selectedContactIds.includes(chat.id)\n        )\n      ))\n      .map(({ id }) => id);\n  }, [chats, currentUserId, lang, searchQuery, selectedContactIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: number[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack(isActive, onReset, onScreenSelect, screen);\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysShareWithPlaceholder') : lang('NeverShareWithPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysShareWithTitle') : lang('NeverShareWithTitle')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      currentUserId,\n      chatsById,\n      listIds: listIds.active,\n      orderedPinnedIds: orderedPinnedIds.active,\n      archivedPinnedIds: orderedPinnedIds.archived,\n      archivedListIds: listIds.archived,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['setPrivacySettings']),\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyActiveSessions from './SettingsPrivacyActiveSessions';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.PrivacyActiveSessions,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: () => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            onScreenSelect={onScreenSelect}\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n            || screen === SettingsScreens.GeneralChatBackgroundColor\n            || screen === SettingsScreens.GeneralChatBackground\n            || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen || isTwoFaScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage onScreenSelect={onScreenSelect} isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyActiveSessions:\n        return (\n          <SettingsPrivacyActiveSessions\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import React, {\n  FC, useEffect, useCallback, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiUser } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { pick } from '../../../util/iteratees';\nimport { getUserFullName, sortUserIds } from '../../../modules/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  contactIds?: number[];\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'openChat'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ContactList: FC<OwnProps & StateProps & DispatchProps> = ({\n  isActive, onReset,\n  filter, usersById, contactIds, loadContactList, openChat, serverTimeOffset,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  useHistoryBack(isActive, onReset);\n\n  const handleClick = useCallback(\n    (id: number) => {\n      openChat({ id, shouldReplaceHistory: true });\n    },\n    [openChat],\n  );\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const resultIds = filter ? contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, filter);\n    }) : contactIds;\n\n    return sortUserIds(resultIds, usersById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n\n    return {\n      usersById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'openChat']),\n)(ContactList));\n","import React, {\n  FC, useCallback, useEffect, useMemo, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\n\nimport { pick, unique } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { getUserFullName, isUserBot, sortChatIds } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: number[];\n  onSelectedMemberIdsChange: (ids: number[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: number;\n  usersById: Record<number, ApiUser>;\n  chatsById: Record<number, ApiChat>;\n  localContactIds?: number[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: number[];\n  globalUserIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadContactList' | 'setGlobalSearchQuery'>;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst NewChatStep1: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  currentUserId,\n  usersById,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  loadContactList,\n  setGlobalSearchQuery,\n}) => {\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadContactList();\n    });\n  });\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = localContactIds\n      ? sortChatIds(localContactIds.filter((id) => id !== currentUserId), chatsById)\n      : [];\n\n    if (!searchQuery) {\n      return contactIds;\n    }\n\n    const foundContactIds = contactIds.filter((id) => {\n      const user = usersById[id];\n      if (!user) {\n        return false;\n      }\n      const fullName = getUserFullName(user);\n      return fullName && searchWords(fullName, searchQuery);\n    });\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return !user || !isUserBot(user) || user.canBeInvitedToGroup;\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds,\n    currentUserId, usersById,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n    const { currentUserId } = global;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      currentUserId,\n      usersById,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadContactList', 'setGlobalSearchQuery']),\n)(NewChatStep1));\n","import React, {\n  FC, useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ChatCreationProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: number[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'createGroupChat' | 'createChannel'>;\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps & DispatchProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n  createGroupChat,\n  createChannel,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset);\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = creationError || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'createGroupChat', 'createChannel',\n  ]),\n)(NewChatStep2));\n","import React, {\n  FC, memo, useCallback, useState,\n} from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<number[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { FC, memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset, onContentChange }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onReset, onContentChange, LeftColumnContent.Archived);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React, {\n  FC, useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChatFolder } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'editChatFolders'>;\n\nconst ChatFolderModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n  editChatFolders,\n}) => {\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['editChatFolders']),\n)(ChatFolderModal));\n","import { ApiMediaFormat, ApiMessage } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../modules/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\n\ntype ICopyOptions = {\n  label: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage, afterEffect?: () => void, onCopyLink?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      handler: () => {\n        const clipboardText = hasSelection && selection ? selection.toString() : text;\n        copyTextToClipboard(clipboardText);\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      handler: () => {\n        onCopyLink();\n\n        if (afterEffect) {\n          afterEffect();\n        }\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nconst getTouchY = (e: WheelEvent | TouchEvent) => ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null) {\n  scrollLockEl = el;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiMessage } from '../../../api/types';\nimport { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isOpen,\n  message,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const copyOptions = getMessageCopyOptions(message, onClose, canCopyLink ? onCopyLink : undefined);\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(\n    anchor,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    SCROLLBAR_WIDTH,\n    (document.querySelector('.MiddleHeader') as HTMLElement).offsetHeight,\n  );\n\n  useEffect(() => {\n    disableScrolling(withScroll ? menuRef.current : undefined);\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      menuStyle={menuStyle}\n      className=\"MessageContextMenu fluid\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n      {canReschedule && (\n        <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n      )}\n      {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n      {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n      {canFaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n      )}\n      {canUnfaveSticker && (\n        <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n      )}\n      {canCopy && copyOptions.map((options) => (\n        <MenuItem key={options.label} icon=\"copy\" onClick={options.handler}>{lang(options.label)}</MenuItem>\n      ))}\n      {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n      {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n      {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n      {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n      {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n      {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default MessageContextMenu;\n","import React, {\n  FC, memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions, MessageListType } from '../../../global/types';\nimport { ApiMessage } from '../../../api/types';\nimport { IAlbum, IAnchorPosition } from '../../../types';\nimport { selectAllowedMessageActions, selectCurrentMessageList } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportMessageModal from '../../common/ReportMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setReplyingToId' | 'setEditingId' | 'pinMessage' | 'openForwardMenu' |\n  'faveSticker' | 'unfaveSticker' | 'toggleMessageSelection' | 'sendScheduledMessages' | 'rescheduleMessage'\n)>;\n\nconst ContextMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canEdit,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  setReplyingToId,\n  setEditingId,\n  pinMessage,\n  openForwardMenu,\n  faveSticker,\n  unfaveSticker,\n  toggleMessageSelection,\n  sendScheduledMessages,\n  rescheduleMessage,\n}) => {\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${Math.abs(message.chatId)}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message.chatId, message.id]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={['ContextMenuContainer', transitionClassNames].join(' ')}>\n      <MessageContextMenu\n        message={message}\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportMessageModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <CalendarModal\n        isOpen={isCalendarOpen}\n        withTimePicker\n        selectedAt={message.date * 1000}\n        maxAt={getDayStartAt(scheduledMaxDate)}\n        isFutureMode\n        onClose={handleCloseCalendar}\n        onSubmit={handleRescheduleMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n\n    return {\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy,\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setReplyingToId',\n    'setEditingId',\n    'pinMessage',\n    'openForwardMenu',\n    'faveSticker',\n    'unfaveSticker',\n    'toggleMessageSelection',\n    'sendScheduledMessages',\n    'rescheduleMessage',\n  ]),\n)(ContextMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiSticker, ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport {\n  selectChat, selectCurrentMessageList, selectStickerSet, selectStickerSetByShortName,\n} from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../modules/helpers';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet' | 'sendMessage'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  onClose,\n  loadStickers,\n  toggleStickerSet,\n  sendMessage,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    sendMessage({ sticker });\n    onClose();\n  }, [onClose, sendMessage]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n\n    return {\n      canSendStickers,\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickers',\n    'toggleStickerSet',\n    'sendMessage',\n  ]),\n)(StickerSetModal));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat } from '../../api/types';\nimport { IAnchorPosition } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { selectChat, selectNotifySettings, selectNotifyExceptions } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { isChatPrivate, getCanDeleteChat, selectIsChatMuted } from '../../modules/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\n\nimport './HeaderMenuContainer.scss';\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateChatMutedState' | 'enterMessageSelectMode' | 'sendBotCommand' | 'restartBot' | 'openLinkedChat'\n)>;\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canMute?: boolean;\n  canLeave?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  isOpen,\n  anchor,\n  isChannel,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canMute,\n  canLeave,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  hasLinkedChat,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n  updateChatMutedState,\n  enterMessageSelectMode,\n  sendBotCommand,\n  restartBot,\n  openLinkedChat,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {IS_SINGLE_COLUMN_LAYOUT && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'Subscribe' : 'Join Group')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate: isChatPrivate(chat.id),\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'updateChatMutedState',\n    'enterMessageSelectMode',\n    'sendBotCommand',\n    'restartBot',\n    'openLinkedChat',\n  ]),\n)(HeaderMenuContainer));\n","import React, {\n  FC, memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../modules/selectors';\nimport { pick } from '../../util/iteratees';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'setLocalTextSearchQuery' | 'searchTextMessagesLocal' | 'closeLocalTextSearch' | 'openHistoryCalendar' |\n  'focusMessage'\n)>;\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps & DispatchProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  setLocalTextSearchQuery,\n  searchTextMessagesLocal,\n  focusMessage,\n  closeLocalTextSearch,\n  openHistoryCalendar,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat && foundIds && foundIds.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[foundIds.length - 1 - newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'setLocalTextSearchQuery',\n    'searchTextMessagesLocal',\n    'focusMessage',\n    'closeLocalTextSearch',\n    'openHistoryCalendar',\n  ]),\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement>,\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  useEffect(() => {\n    setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [items, shouldRemoveSelectionOnReset]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport { ApiUser } from '../../../api/types';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n  usersById?: Record<number, ApiUser>;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  usersById,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: number, forceFocus = false) => {\n    const user = usersById?.[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [usersById, onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { ApiAttachment, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  attachments: ApiAttachment[];\n  caption: string;\n  isReady?: boolean;\n  currentUserId?: number;\n  groupChatMembers?: ApiChatMember[];\n  usersById?: Record<number, ApiUser>;\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  attachments,\n  caption,\n  isReady,\n  currentUserId,\n  groupChatMembers,\n  usersById,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const hideTimeoutRef = useRef<number>(null);\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    caption,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n    usersById,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    caption,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      onSend();\n    }\n  }, [isOpen, onSend]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer: { files } } = e;\n\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => a.mimeType.startsWith('audio/'));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={sendAttachments}\n        >\n          {lang('Send')}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n            usersById={usersById}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={onSend}\n            shouldSetFocus={Boolean(attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import { ChangeEvent, RefObject } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from './helpers/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({ isOpen, onSend, onClear }) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(false);\n  const [solution, setSolution] = useState<string>();\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={(e) => setQuestion(e.currentTarget.value)}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <Checkbox\n          label={lang('PollAnonymous')}\n          checked={isAnonymous}\n          onChange={handleIsAnonymousChange}\n        />\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import { ChangeEvent } from 'react';\n\nimport { GlobalActions } from '../../../global/types';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { TON_INSTALL_WALLET_URL } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport captureKeyboardListeners from '../../../util/captureKeyboardListeners';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './TonModal.scss';\n\nexport interface OwnProps {\n  isOpen: boolean;\n  chatId: number;\n  onClear: () => void;\n}\n\ninterface StateProps {\n  receiverAddress?: string;\n}\n\ntype DispatchProps = Pick<GlobalActions, 'requestTonAddress' | 'showNotification'>;\n\nconst DEFAULT_AMOUNT = 10;\nconst NANOTONS_IN_TON = 1e9;\n\nconst TonModal: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  chatId,\n  onClear,\n  receiverAddress,\n  requestTonAddress,\n  showNotification,\n}) => {\n  const [amount, setAmount] = useState(DEFAULT_AMOUNT);\n  const [error, setError] = useState<string | undefined>();\n\n  const {\n    isWalletInstalled, canInstallWallet, walletBalance, sendTons,\n  } = useTonWallet();\n\n  const handleAmountChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setError(undefined);\n    setAmount(Number(e.currentTarget.value));\n  }, []);\n\n  const canSend = receiverAddress && walletBalance && amount > 0 && walletBalance >= amount;\n\n  const send = useCallback(() => {\n    setError(undefined);\n\n    if (!canSend) {\n      return;\n    }\n\n    // TODO Request throwing exceptions\n    const result = sendTons(receiverAddress!, amount);\n    if (result instanceof Promise) {\n      result\n        .then(() => {\n          showNotification({ message: 'TON coins successfully sent' });\n        })\n        .catch((err) => {\n          setError(err.message);\n        });\n    } else if (result instanceof Error) {\n      setError(result.message);\n    } else {\n      setError('Unknown Error');\n    }\n  }, [amount, canSend, receiverAddress, sendTons, showNotification]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => (isOpen ? captureKeyboardListeners({ onEnter: send }) : undefined), [isOpen, send]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    if (!receiverAddress) {\n      requestTonAddress();\n    }\n  }, [isOpen, receiverAddress, requestTonAddress]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Send TON Coins\"\n          onClick={onClear}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">Send TON Coins</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          disabled={!canSend}\n          onClick={send}\n        >\n          Send\n        </Button>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (!isWalletInstalled && !canInstallWallet) {\n      return (\n        <div className=\"note big\">\n          Sending TON coins is only supported in Chrome\n          <br /> at this moment.\n        </div>\n      );\n    }\n\n    return (\n      <>\n        {receiverAddress ? (\n          <div className=\"address\">\n            <PrivateChatInfo userId={chatId} avatarSize=\"jumbo\" noStatusOrTyping />\n          </div>\n        ) : (\n          <div className=\"note big\">\n            <Spinner />\n            Awaiting user to share his TON address...\n          </div>\n        )}\n        <div className=\"send-form\">\n          {isWalletInstalled ? (\n            <>\n              <InputText\n                label=\"Amount\"\n                value={String(amount)}\n                inputMode=\"numeric\"\n                error={error}\n                onChange={handleAmountChange}\n              />\n              <div className=\"note left\">\n                Available balance: {walletBalance} TON\n              </div>\n            </>\n          ) : (\n            <>\n              <Button\n                href={TON_INSTALL_WALLET_URL}\n                color=\"primary\"\n              >\n                Create TON Wallet\n              </Button>\n              <div className=\"note\">\n                You will need to refresh the page\n                <br /> once extension is installed.\n              </div>\n            </>\n          )}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"TonModal\">\n      {renderContent()}\n    </Modal>\n  );\n};\n\nfunction useTonWallet() {\n  const { ton, chrome } = window as any;\n  const [walletAddress, setWalletAddress] = useState<string | undefined>();\n  const [walletBalance, setWalletBalance] = useState<number | undefined>();\n\n  // TODO Bring back when plugin is stable\n  // const isWalletInstalled = ton && ton.isTonWallet;\n  const isWalletInstalled = Boolean(ton);\n\n  useEffect(() => {\n    if (!isWalletInstalled) {\n      return;\n    }\n\n    // TODO Replace with real balance request\n    ton.send('ton_requestAccounts').then((accounts: string[]) => {\n      setWalletAddress(accounts[0]);\n    });\n    ton.send('ton_getBalance').then((balance: number) => {\n      setWalletBalance(balance / NANOTONS_IN_TON);\n    });\n  }, [isWalletInstalled, ton]);\n\n  const sendTons = useCallback((to: string, amount: number) => {\n    // TODO Make sure `walletAddress` exists\n    return ton.send('ton_sendTransaction', [{\n      from: walletAddress,\n      value: String(amount * NANOTONS_IN_TON),\n      to,\n      data: 'Sent from Telegram WebZ',\n    }]);\n  }, [ton, walletAddress]);\n\n  return {\n    canInstallWallet: Boolean(chrome.runtime),\n    isWalletInstalled,\n    walletBalance,\n    sendTons,\n  };\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    return {\n      receiverAddress: (global.ton.byChatId[chatId] || {}).address,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'requestTonAddress',\n    'showNotification',\n  ]),\n)(TonModal));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  return (\n    <div\n      className={`EmojiButton ${focus ? 'focus' : ''}`}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : <img src={`./img-apple-64/${emoji.image}.png`} alt=\"\" loading=\"lazy\" />}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\" dir=\"auto\">\n        {lang(category.id === 'recent' ? 'RecentStickers' : `Emoji${index}`)}\n      </p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: 'recent',\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json') as unknown as Promise<EmojiModule>;\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, { FC, memo, useRef } from '../../../lib/teact/teact';\n\nimport { ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\nimport { ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport StickerButton from '../../common/StickerButton';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  observeIntersection,\n  shouldRender,\n  onStickerSelect,\n  onStickerUnfave,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const { transitionClassNames } = useShowTransition(shouldRender, undefined, undefined, 'slow');\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <p className=\"symbol-set-name\">{stickerSet.title}</p>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        // @ts-ignore\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === 'favorite' ? onStickerUnfave : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import React, {\n  FC, useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport { StickerSetOrRecent } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'loadStickerSets' | 'loadRecentStickers' | 'loadFavoriteStickers' |\n  'addRecentSticker' | 'loadAddedStickers' | 'unfaveSticker'\n)>;\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  onStickerSelect,\n  loadStickerSets,\n  loadRecentStickers,\n  loadFavoriteStickers,\n  loadAddedStickers,\n  addRecentSticker,\n  unfaveSticker,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return [\n      {\n        id: 'recent',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      },\n      {\n        id: 'favorite',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      },\n      ...addedSetIds.map((id) => stickerSetsById[id]).filter(Boolean),\n    ];\n  }, [addedSetIds, lang, recentStickers, favoriteStickers, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadStickerSets();\n      loadRecentStickers();\n      loadFavoriteStickers();\n    }\n  }, [loadAndPlay, loadFavoriteStickers, loadRecentStickers, loadStickerSets]);\n\n  useEffect(() => {\n    if (addedSetIds?.length) {\n      loadAddedStickers();\n    }\n  }, [addedSetIds, loadAddedStickers]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === 'recent' || stickerSet.id === 'favorite' || stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === 'recent' || stickerSet.id === 'favorite'}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === 'recent' ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === 'favorite' ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.isAnimated ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">Sending stickers is not allowed in this chat.</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">You have no saved Stickers.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    return {\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadStickerSets',\n    'loadRecentStickers',\n    'loadFavoriteStickers',\n    'loadAddedStickers',\n    'addRecentSticker',\n    'unfaveSticker',\n  ]),\n)(StickerPicker));\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { ApiMediaFormat, ApiVideo } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { ObserveFn, useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick: (gif: ApiVideo) => void;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif, observeIntersection, isDisabled, className, onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const handleClick = useCallback(\n    () => onClick({\n      ...gif,\n      blobUrl: videoData,\n    }),\n    [onClick, gif, videoData],\n  );\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={handleClick}\n    >\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          // @ts-ignore\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React, {\n  FC, useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadSavedGifs'>;\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps & DispatchProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  onGifSelect,\n  loadSavedGifs,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={onGifSelect}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      savedGifs: global.gifs.saved.gifs,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadSavedGifs']),\n)(GifPicker));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  FC, memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (sticker: ApiSticker, shouldPreserveInput?: boolean) => void;\n  onGifSelect: (gif: ApiVideo) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  isOpen, allowedAttachmentOptions, isLeftColumnShown,\n  onLoad, onClose,\n  onEmojiSelect, onStickerSelect, onGifSelect,\n  onRemoveSymbol, onSearchOpen, addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker) => {\n    onStickerSelect(sticker, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  const { canSendStickers, canSendGifs } = allowedAttachmentOptions;\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      !isLeftColumnShown && 'middle-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport tonGemPath from '../../../assets/ton-gem.png';\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  canSendTons: boolean;\n  onFileSelect: (files: File[], isQuick: boolean) => void;\n  onPollCreate: () => void;\n  onSendTons: () => void;\n  onClose: () => void;\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  isOpen, canSendTons, allowedAttachmentOptions, onFileSelect, onPollCreate, onSendTons, onClose,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const handleFileSelect = useCallback((e: Event, isQuick: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      onFileSelect(Array.from(files), isQuick);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const lang = useLang();\n\n  const { canAttachMedia, canAttachPolls } = allowedAttachmentOptions;\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"AttachMenu fluid\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n      {!canAttachMedia && (\n        <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n      )}\n      {canAttachMedia && (\n        <>\n          <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n            {lang('AttachmentMenu.PhotoOrVideo')}\n          </MenuItem>\n          <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n        </>\n      )}\n      {canAttachPolls && (\n        <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n      )}\n      {canSendTons && (\n        <MenuItem iconImg={tonGemPath} onClick={onSendTons}>Send TON Coins</MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(AttachMenu);\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import React, {\n  FC, useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiBotCommand, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n  sendBotCommand,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandTooltip));\n","import React, { FC, memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'sendBotCommand'>;\n\nconst BotCommandMenu: FC<OwnProps & DispatchProps> = ({\n  isOpen, botCommands, onClose, sendBotCommand,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, ['sendBotCommand']),\n)(BotCommandMenu));\n","import React, {\n  FC, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiSticker } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'clearStickersForEmoji'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps & DispatchProps> = ({\n  isOpen,\n  onStickerSelect,\n  stickers,\n  clearStickersForEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n\n    return { stickers };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['clearStickersForEmoji']),\n)(StickerTooltip));\n","import React, { FC, memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onSilentSend?: NoneToVoidFunction;\n  onScheduleSend?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen, onSilentSend, onScheduleSend, onClose, onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY=\"bottom\"\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSilentSend && <MenuItem icon=\"mute\" onClick={onSilentSend}>{lang('SendWithoutSound')}</MenuItem>}\n      {onScheduleSend && <MenuItem icon=\"schedule\" onClick={onScheduleSend}>{lang('ScheduleMessage')}</MenuItem>}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleMouseEnter = () => {\n    document.body.classList.add('no-select');\n  };\n\n  const handleMouseLeave = () => {\n    document.body.classList.remove('no-select');\n  };\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: string | undefined = '';\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport useTransitionForMedia from '../../../../hooks/useTransitionForMedia';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const {\n    shouldRenderThumb, shouldRenderFullMedia, transitionClassNames,\n  } = useTransitionForMedia(mediaBlobUrl, 'slow');\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        {shouldRenderThumb && (\n          <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        )}\n        {shouldRenderFullMedia && (\n          <img src={mediaBlobUrl} className={`${transitionClassNames} full-media`} alt=\"\" />\n        )}\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={shouldRenderFullMedia ? mediaBlobUrl : (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={shouldRenderFullMedia ? transitionClassNames : undefined}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React, { FC, memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React, {\n  FC, memo, useCallback,\n} from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React, { FC, memo } from '../../../../lib/teact/teact';\n\nimport { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({ inlineResult, observeIntersection, onClick }) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, {\n  FC, memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { IAllowedAttachmentOptions } from '../../../modules/helpers';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { pick } from '../../../util/iteratees';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: number;\n  isGallery?: boolean;\n  allowedAttachmentOptions: IAllowedAttachmentOptions;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  onSelectResult: (inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype DispatchProps = Pick<GlobalActions, ('startBot' | 'openChat' | 'sendInlineBotResult')>;\n\nconst InlineBotTooltip: FC<OwnProps & DispatchProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  loadMore,\n  onClose,\n  openChat,\n  startBot,\n  onSelectResult,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !renderedInlineBotResults || (!renderedInlineBotResults.length && !switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'video':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  undefined,\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'startBot', 'openChat', 'sendInlineBotResult',\n  ]),\n)(InlineBotTooltip));\n","import React, {\n  FC, useMemo, memo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\n\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../modules/selectors';\nimport {\n  getMessageSummaryText,\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport { orderBy, pick } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: number;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchTextMessagesLocal' | 'focusMessage'>;\n\ninterface Result {\n  message: ApiMessage;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  onClick: NoneToVoidFunction;\n}\n\nconst RightSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  searchTextMessagesLocal,\n  focusMessage,\n}) => {\n  const lang = useLang();\n\n  const foundResults = useMemo(() => {\n    if (!query || !foundIds || !foundIds.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const results = foundIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean) as Result[];\n\n    return orderBy(results, ({ message }) => message.date, 'desc');\n  }, [chatId, threadId, focusMessage, foundIds, chat, messagesById, query]);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: Result) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = getMessageSummaryText(lang, message);\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {renderText(text, ['emoji', 'highlight'], { highlight: query })}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  useHistoryBack(isActive, onClose);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = foundResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  return (\n    <InfiniteScroll\n      className=\"RightSearch custom-scroll\"\n      items={foundResults}\n      preloadBackwards={0}\n      onLoadMore={searchTextMessagesLocal}\n      noFastList\n      onKeyDown={handleKeyDown}\n      ref={containerRef}\n    >\n      <p className=\"helper-text\" dir=\"auto\">\n        {!query ? (\n          lang('lng_dlg_search_for_messages')\n        ) : (totalCount === 0 || !foundResults.length) ? (\n          lang('lng_search_no_results')\n        ) : totalCount === 1 ? (\n          '1 message found'\n        ) : (\n          `${(foundResults.length && (totalCount || foundResults.length))} messages found`\n        )}\n      </p>\n      {foundResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['searchTextMessagesLocal', 'focusMessage']),\n)(RightSearch));\n","import React, {\n  FC, useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiStickerSet } from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { pick } from '../../util/iteratees';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../modules/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadStickers' | 'toggleStickerSet'>;\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps & DispatchProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  loadStickers, toggleStickerSet, isSomeModalOpen, onModalToggle,\n}) => {\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            onClick={openModal}\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadStickers', 'toggleStickerSet']),\n)(StickerSetResult));\n","import React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\n\nimport { pick } from '../../util/iteratees';\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../modules/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadFeaturedStickers'>;\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  loadFeaturedStickers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['loadFeaturedStickers']),\n)(StickerSearch));\n","import React, {\n  FC, memo, useRef, useCallback,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../global/types';\nimport { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n} from '../../modules/selectors';\nimport { getAllowedAttachmentOptions } from '../../modules/helpers';\nimport { pick } from '../../util/iteratees';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'searchMoreGifs' | 'sendMessage' | 'setGifSearchQuery'>;\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps & DispatchProps> = ({\n  onClose,\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  searchMoreGifs,\n  sendMessage,\n  setGifSearchQuery,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const { canSendGifs } = getAllowedAttachmentOptions(chat, isChatWithBot);\n\n  const handleGifClick = useCallback((gif: ApiVideo) => {\n    if (canSendGifs) {\n      sendMessage({ gif });\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={handleGifClick}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['searchMoreGifs', 'sendMessage', 'setGifSearchQuery']),\n)(GifSearch));\n","import React, {\n  FC, useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { GlobalActions } from '../../global/types';\nimport { pick } from '../../util/iteratees';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: number[];\n  offset: string;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadPollOptionResults' | 'openChat' | 'closePollResults'>;\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n  loadPollOptionResults,\n  openChat,\n  closePollResults,\n}) => {\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, ['loadPollOptionResults', 'openChat', 'closePollResults']),\n)(PollAnswerResults));\n","import React, { FC, memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../modules/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../modules/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack(isActive, onClose);\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../modules/selectors';\nimport { selectIsChatMuted } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'updateContact' | 'deleteUser' | 'deleteHistory' | 'closeManagement' | 'openChat'\n)>;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps & DispatchProps> = ({\n  userId,\n  user,\n  chat,\n  progress,\n  isMuted,\n  updateContact,\n  deleteUser,\n  deleteHistory,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteHistory({\n      chatId: chat.id,\n      shouldDeleteForAll: false,\n    });\n    deleteUser({ userId });\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.id, closeDeleteDialog, closeManagement, deleteHistory, deleteUser, openChat, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, chat, progress, isMuted,\n    };\n  },\n  (global, actions): DispatchProps => pick(actions, [\n    'updateContact', 'deleteUser', 'closeManagement', 'openChat', 'deleteHistory',\n  ]),\n)(ManageUser));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiMediaFormat } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../modules/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'togglePreHistoryHidden' | 'updateChat' | 'closeManagement' |\n  'leaveChannel' | 'deleteChannel' | 'deleteChat' | 'openChat'\n)>;\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  onScreenSelect,\n  togglePreHistoryHidden,\n  updateChat,\n  deleteChat,\n  leaveChannel,\n  deleteChannel,\n  closeManagement,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'togglePreHistoryHidden', 'updateChat', 'closeManagement',\n    'leaveChannel', 'deleteChannel', 'deleteChat', 'openChat',\n  ]),\n)(ManageGroup));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatDefaultBannedRights'>;\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  updateChatDefaultBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => !!bannedRights);\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatDefaultBannedRights']),\n)(ManageGroupPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<number, ApiUser>;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupRemovedUsers: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  usersById,\n  updateChatMemberBannedRights,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang('NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n\n    return { chat, usersById };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupRemovedUsers));\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport { ApiChat, ApiMediaFormat } from '../../../api/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { getChatAvatarHash, getHasAdminRight } from '../../../modules/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'toggleSignatures' | 'updateChat' | 'closeManagement' | 'leaveChannel' | 'deleteChannel' | 'openChat'\n)>;\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps & DispatchProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  onScreenSelect,\n  updateChat,\n  toggleSignatures,\n  closeManagement,\n  leaveChannel,\n  deleteChannel,\n  openChat,\n  onClose,\n  isActive,\n}) => {\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  if (chat.isRestricted) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'toggleSignatures', 'updateChat', 'closeManagement', 'leaveChannel', 'deleteChannel', 'openChat',\n  ]),\n)(ManageChannel));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { isChatChannel } from '../../../modules/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, (\n  'checkPublicLink' | 'updatePublicLink' | 'updatePrivateLink'\n)>;\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkPublicLink,\n  updatePublicLink,\n  updatePrivateLink,\n}) => {\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n    };\n  },\n  (setGlobal, actions) => pick(actions, [\n    'checkPublicLink', 'updatePublicLink', 'updatePrivateLink',\n  ]),\n)(ManageChatPrivacyType));\n","import React, {\n  FC, memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { GlobalActions } from '../../../global/types';\nimport { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { selectChat } from '../../../modules/selectors';\nimport { pick } from '../../../util/iteratees';\nimport getAnimationData from '../../common/helpers/animatedAssets';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../modules/helpers';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<number, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: number[];\n  isChannel?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'loadGroupsForDiscussion' | 'linkDiscussionGroup' | 'unlinkDiscussionGroup'>;\n\nconst ManageDiscussion: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n  loadGroupsForDiscussion,\n  linkDiscussionGroup,\n  unlinkDiscussionGroup,\n}) => {\n  const [linkedGroupId, setLinkedGroupId] = useState<number>();\n  const [animationData, setAnimationData] = useState<Record<string, any>>();\n  const [isAnimationLoaded, setIsAnimationLoaded] = useState(false);\n  const handleAnimationLoad = useCallback(() => setIsAnimationLoaded(true), []);\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack(isActive, onClose);\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (!animationData) {\n      getAnimationData('DiscussionGroups').then(setAnimationData);\n    }\n  }, [animationData]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: number) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n      // return renderText(\n      //   lang('DiscussionLinkGroupPublicAlert', linkedChat.title, chat!.title),\n      //   ['br', 'simple_markdown'],\n      // );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n    // return renderText(\n    //   lang('DiscussionLinkGroupPrivateAlert', linkedChat.title, chat!.title),\n    //   ['br', 'simple_markdown'],\n    // );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => { onDiscussionClick(id); }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"section-icon\">\n            {animationData && (\n              <AnimatedSticker\n                id=\"discussionGroupsDucks\"\n                size={STICKER_SIZE_DISCUSSION_GROUPS}\n                animationData={animationData}\n                play={isAnimationLoaded}\n                noLoop\n                onLoad={handleAnimationLoad}\n              />\n            )}\n          </div>\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'loadGroupsForDiscussion', 'linkDiscussionGroup', 'unlinkDiscussionGroup',\n  ]),\n)(ManageDiscussion));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatMemberBannedRights'>;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps & DispatchProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  updateChatMemberBannedRights,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatMemberBannedRights']),\n)(ManageGroupUserPermissions));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens } from '../../../types';\nimport { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../modules/helpers';\nimport { selectChat } from '../../../modules/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: number;\n  isChannel: boolean;\n  usersById: Record<number, ApiUser>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  usersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  function handleRecentActionsClick() {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang, usersById]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      usersById,\n    };\n  },\n  // (setGlobal, actions): DispatchProps => pick(actions, ['togglePreHistoryHidden', 'updateChat']),\n)(ManageChatAdministrators));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../modules/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\nimport { GlobalActions } from '../../../global/types';\n\nimport { pick } from '../../../util/iteratees';\nimport { selectChat } from '../../../modules/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../modules/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: number;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<number, ApiUser>;\n  currentUserId?: number;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'updateChatAdmin'>;\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps & DispatchProps> = ({\n  selectedChatMemberId,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  updateChatAdmin,\n  onClose,\n  isActive,\n}) => {\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack(isActive, onClose);\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return undefined;\n    }\n\n    return chat.fullInfo.adminMembers.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.adminRights) || {});\n    setCustomTitle(((selectedChatMember?.customTitle) || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(false);\n    setIsLoading(false);\n  }, [selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [chat, selectedChatMemberId, permissions, customTitle, updateChatAdmin]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedChatMemberId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedChatMemberId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (!selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!!permissions.changeInfo}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={!!permissions.postMessages}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={!!permissions.editMessages}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={!!permissions.deleteMessages}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={!!permissions.banUsers}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!!permissions.inviteUsers}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!!permissions.pinMessages}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={!!permissions.addAdmins}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={!!permissions.anonymous}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedChatMemberId && !isFormFullyDisabled && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isDismissConfirmationDialogOpen}\n        onClose={closeDismissConfirmationDialog}\n        text=\"Are you sure you want to dismiss this admin?\"\n        confirmLabel=\"Dismiss\"\n        confirmHandler={handleDismissAdmin}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, ['updateChatAdmin']),\n)(ManageGroupAdminRights));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { GlobalActions } from '../../../global/types';\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport { pick } from '../../../util/iteratees';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\ntype DispatchProps = Pick<GlobalActions, 'openUserInfo'>;\n\nconst ManageGroupMembers: FC<OwnProps & StateProps & DispatchProps> = ({\n  members,\n  usersById,\n  isChannel,\n  openUserInfo,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(members.map(({ userId }) => userId), usersById, undefined, serverTimeOffset);\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleMemberClick = useCallback((id: number) => {\n    openUserInfo({ id });\n  }, [openUserInfo]);\n\n  useHistoryBack(isActive, onClose);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n  (setGlobal, actions): DispatchProps => pick(actions, [\n    'openUserInfo',\n  ]),\n)(ManageGroupMembers));\n","import React, {\n  FC, memo, useCallback, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ApiChatMember, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../modules/selectors';\nimport { sortUserIds, isChatChannel } from '../../../modules/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: number;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<number, ApiUser>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack(isActive, onClose);\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById, undefined, serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: number) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, { FC, memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../lib/teact/teactn';\n\nimport { ManagementScreens, ManagementType } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../modules/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupRemovedUsers from './ManageGroupRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\n\nexport type OwnProps = {\n  chatId: number;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: number;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: number, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageGroupRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","// This data was received from Telegram Desktop (Telegram/Resources/numbers.txt)\nconst DATA = `AF🇦🇫93Afghanistan333\nAO🇦🇴244Angola333\nAL🇦🇱355Albania234\nAD🇦🇩376Andorra222\nAE🇦🇪971United Arab Emirates234\nAI🇦🇮1264Anguilla34\nAR🇦🇷54Argentina\nAM🇦🇲374Armenia233\nAG🇦🇬1268Antigua and Barbuda34\nAU🇦🇺61Australia333\nAS🇦🇸1684American Samoa34\nAT🇦🇹43Austria\nAW🇦🇼297Aruba34\nAZ🇦🇿994Azerbaijan2322\nBI🇧🇮257Burundi224\nBE🇧🇪32Belgium3222\nBJ🇧🇯229Benin233\nBF🇧🇫226Burkina Faso2222\nBD🇧🇩880Bangladesh\nBG🇧🇬359Bulgaria\nBH🇧🇭973Bahrain44\nBS🇧🇸1242Bahamas34\nBA🇧🇦387Bosnia and Herzegovina\nBY🇧🇾375Belarus2322\nBZ🇧🇿501Belize\nBO🇧🇴591Bolivia134\nBR🇧🇷55Brazil254\nBB🇧🇧1246Barbados34\nBM🇧🇲1441Bermuda34\nBN🇧🇳673Brunei34\nBQ🇧🇶599Bonaire, Sint Eustatius and Saba\nBT🇧🇹975Bhutan\nBW🇧🇼267Botswana233\nCF🇨🇫236Central African Republic2222\nCA🇨🇦1Canada334\nCH🇨🇭41Switzerland234\nCK🇨🇰682Cook Islands\nCL🇨🇱56Chile144\nCN🇨🇳86China344\nCI🇨🇮225Côte d\\`Ivoire233\nCM🇨🇲237Cameroon44\nCD🇨🇩243DR Congo234\nCG🇨🇬242Republic of the Congo234\nCO🇨🇴57Colombia334\nKM🇰🇲269Comoros34\nCV🇨🇻238Cape Verde34\nCR🇨🇷506Costa Rica\nCU🇨🇺53Cuba44\nCY🇨🇾357Cyprus44\nCW🇨🇼599Curaçao\nCZ🇨🇿420Czech Republic\nDE🇩🇪49Germany38\nDJ🇩🇯253Djibouti2222\nDM🇩🇲1767Dominica34\nDK🇩🇰45Denmark44\nDO🇩🇴1Dominican Republic334\nDZ🇩🇿213Algeria3222\nEC🇪🇨593Ecuador\nEG🇪🇬20Egypt234\nER🇪🇷291Eritrea133\nES🇪🇸34Spain333\nEE🇪🇪372Estonia\nET🇪🇹251Ethiopia234\nFI🇫🇮358Finland\nFJ🇫🇯679Fiji\nFK🇫🇰500Falkland Islands\nFM🇫🇲691Micronesia\nFO🇫🇴298Faroe Islands33\nFR🇫🇷33France12222\nGA🇬🇦241Gabon1222\nGB🇬🇧44United Kingdom46\nGE🇬🇪995Georgia\nGF🇬🇫594French Guiana\nGH🇬🇭233Ghana\nGI🇬🇮350Gibraltar44\nGL🇬🇱299Greenland33\nGN🇬🇳224Guinea333\nGM🇬🇲220Gambia34\nGP🇬🇵590Guadeloupe\nGU🇬🇺1671Guam34\nGW🇬🇼245Guinea-Bissau34\nGQ🇬🇶240Equatorial Guinea333\nGR🇬🇷30Greece244\nGD🇬🇩1473Grenada34\nGT🇬🇹502Guatemala134\nGY🇬🇾592Guyana\nHK🇭🇰852Hong Kong\nHN🇭🇳504Honduras44\nHR🇭🇷385Croatia\nHT🇭🇹509Haiti\nHU🇭🇺36Hungary234\nID🇮🇩62Indonesia\nIN🇮🇳91India55\nIO🇩🇬246Diego Garcia34\nIE🇮🇪353Ireland234\nIR🇮🇷98Iran334\nIQ🇮🇶964Iraq334\nIS🇮🇸354Iceland34\nIL🇮🇱972Israel234\nIT🇮🇹39Italy334\nJM🇯🇲1876Jamaica34\nJO🇯🇴962Jordan144\nJP🇯🇵81Japan244\nKZ🇰🇿7Kazakhstan3322\nKE🇰🇪254Kenya333\nKG🇰🇬996Kyrgyzstan\nKH🇰🇭855Cambodia\nKI🇰🇮686Kiribati\nKN🇰🇳1869Saint Kitts and Nevis34\nKR🇰🇷82South Korea\nKW🇰🇼965Kuwait44\nKY🇰🇾1345Cayman Islands34\nLA🇱🇦856Laos\nLB🇱🇧961Lebanon\nLR🇱🇷231Liberia\nLY🇱🇾218Libya234\nLC🇱🇨1758Saint Lucia34\nLI🇱🇮423Liechtenstein\nLK🇱🇰94Sri Lanka234\nLS🇱🇸266Lesotho233\nLT🇱🇹370Lithuania35\nLU🇱🇺352Luxembourg\nLV🇱🇻371Latvia35\nMA🇲🇦212Morocco234\nMC🇲🇨377Monaco44\nMD🇲🇩373Moldova233\nMG🇲🇬261Madagascar2232\nMP🇲🇵1670Northern Mariana Islands34\nMO🇲🇴853Macau\nMS🇲🇸1664Montserrat34\nMV🇲🇻960Maldives\nMX🇲🇽52Mexico\nMH🇲🇭692Marshall Islands\nMK🇲🇰389Macedonia\nML🇲🇱223Mali44\nMT🇲🇹356Malta2222\nMM🇲🇲95Myanmar\nME🇲🇪382Montenegro\nMN🇲🇳976Mongolia\nMZ🇲🇿258Mozambique234\nMQ🇲🇶596Martinique\nMR🇲🇷222Mauritania44\nMU🇲🇺230Mauritius\nMW🇲🇼265Malawi\nMY🇲🇾60Malaysia\nNA🇳🇦264Namibia234\nNC🇳🇨687New Caledonia6\nNE🇳🇪227Niger2222\nNF🇳🇫672Norfolk Island\nNG🇳🇬234Nigeria\nNI🇳🇮505Nicaragua44\nNL🇳🇱31Netherlands12222\nNO🇳🇴47Norway44\nNP🇳🇵977Nepal\nNU🇳🇺683Niue\nNR🇳🇷674Nauru\nNZ🇳🇿64New Zealand\nOM🇴🇲968Oman44\nPK🇵🇰92Pakistan334\nPA🇵🇦507Panama44\nPE🇵🇪51Peru333\nPF🇵🇫689French Polynesia\nPH🇵🇭63Philippines334\nPM🇵🇲508Saint Pierre and Miquelon\nPR🇵🇷1Puerto Rico334\nPS🇵🇸970Palestine324\nPW🇵🇼680Palau\nPG🇵🇬675Papua New Guinea\nPL🇵🇱48Poland333\nKP🇰🇵850North Korea\nPT🇵🇹351Portugal144\nPY🇵🇾595Paraguay333\nQA🇶🇦974Qatar\nRE🇷🇪262Réunion333\nRO🇷🇴40Romania333\nRU🇷🇺7Russia3322\nRW🇷🇼250Rwanda333\nSA🇸🇦966Saudi Arabia\nSD🇸🇩249Sudan234\nSN🇸🇳221Senegal234\nSG🇸🇬65Singapore44\nSH🇸🇭290Saint Helena23\nSH🇸🇭247Saint Helena4\nSB🇸🇧677Solomon Islands\nSL🇸🇱232Sierra Leone233\nSV🇸🇻503El Salvador44\nSM🇸🇲378San Marino334\nSO🇸🇴252Somalia233\nRS🇷🇸381Serbia234\nSS🇸🇸211South Sudan234\nST🇸🇹239São Tomé and Príncipe25\nSR🇸🇷597Suriname34\nSK🇸🇰421Slovakia\nSI🇸🇮386Slovenia\nSE🇸🇪46Sweden234\nSZ🇸🇿268Swaziland44\nSC🇸🇨248Seychelles1222\nSX🇸🇽1721Sint Maarten34\nSY🇸🇾963Syria\nTC🇹🇨1649Turks and Caicos Islands34\nTD🇹🇩235Chad2222\nTG🇹🇬228Togo233\nTH🇹🇭66Thailand144\nTJ🇹🇯992Tajikistan\nTK🇹🇰690Tokelau\nTM🇹🇲993Turkmenistan26\nTL🇹🇱670Timor-Leste\nTO🇹🇴676Tonga\nTT🇹🇹1868Trinidad and Tobago34\nTN🇹🇳216Tunisia233\nTR🇹🇷90Turkey334\nTV🇹🇻688Tuvalu\nTW🇹🇼886Taiwan\nTZ🇹🇿255Tanzania234\nUG🇺🇬256Uganda234\nUA🇺🇦380Ukraine2322\nUY🇺🇾598Uruguay44\nUS🇺🇸1United States334\nUZ🇺🇿998Uzbekistan27\nVA🇻🇦3Vatican City\nVC🇻🇨1784Saint Vincent and the Grenadines34\nVE🇻🇪58Venezuela334\nVG🇻🇬1284British Virgin Islands34\nVI🇻🇮1340US Virgin Islands34\nVN🇻🇳84Vietnam\nVU🇻🇺678Vanuatu\nWF🇼🇫681Wallis and Futuna\nWS🇼🇸685Samoa\nXK🇽🇰383Kosovo44\nYE🇾🇪967Yemen333\nZA🇿🇦27South Africa234\nZM🇿🇲260Zambia234\nZW🇿🇼263Zimbabwe234`;\n\nconst formatsCache: Record<string, RegExp> = {};\nexport const defaultPhoneNumberFormat = /(\\d{1,3})(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?(\\d{1,3})?/;\n\nconst parsed = DATA\n  .split('\\n')\n  .map((str) => {\n    const id = str.substr(0, 2);\n    const flag = str.substr(2, 4);\n    const code = `+${str.match(/\\d+/)![0]}`;\n    const name = str.split(/\\d+/)[1];\n    const format = str.match(/\\d+$/);\n    const phoneFormat = getPhoneNumberFormat(format);\n\n    return {\n      id, flag, code, name, phoneFormat,\n    };\n  });\n\nfunction getPhoneNumberFormat(format: RegExpMatchArray | null) {\n  if (!format) {\n    return defaultPhoneNumberFormat;\n  }\n\n  const formatValue = format[0] as string;\n  let phoneNumberFormat;\n\n  if (!formatsCache[formatValue]) {\n    const phoneNumberGroups = formatValue.split('').map(Number);\n    phoneNumberFormat = phoneNumberGroups.reduce((result, count, i) => {\n      return `${result}(\\\\d{1,${count}})${i > 0 ? '?' : ''}`;\n    }, '');\n    formatsCache[formatValue] = new RegExp(`${phoneNumberFormat}${'()?'.repeat(5 - phoneNumberGroups.length)}`);\n  }\n\n  return formatsCache[formatValue];\n}\n\nexport default parsed;\n","import useReducer, { StateReducer, Dispatch } from '../useReducer';\nimport countryList from '../../util/countries';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload,\n        billingCountry: getBillingCountry(action.payload),\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.countryIso2) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: getBillingCountry(action.payload.countryIso2),\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nfunction getBillingCountry(countryCode: string) {\n  const country = countryList.find(({ id }) => id === countryCode);\n  return country ? country.name : '';\n}\n\nexport default () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n","import { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import { ChangeEvent, RefObject } from 'react';\nimport React, { FC, memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: any;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import React, {\n  FC, useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label=\"Address1 (Street)\"\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label=\"Address2 (Street)\"\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label=\"City\"\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label=\"State\"\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label=\"Country\"\n              placeholder=\"Country\"\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ name, id }) => (\n                <option\n                  value={id}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label=\"Post Code\"\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label=\"Full name\"\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label=\"Email\"\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label=\"Phone number\"\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React, {\n  FC, useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>Select shipping method</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React, {\n  FC, memo,\n} from '../../lib/teact/teact';\n\nimport { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, 'Payment method')}\n        {paymentProvider && renderCheckoutItem('stripe-provider', paymentProvider, 'Payment provider')}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, 'Shipping address')}\n        {name && renderCheckoutItem('icon-user', name, 'Name')}\n        {phone && renderCheckoutItem('icon-phone', phone, 'Phone number')}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, 'Shipping method')}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import React, {\n  FC, memo, useCallback, useRef,\n} from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label=\"Expiry date\"\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React, {\n  FC, memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\n// @ts-ignore\nimport mastercardIconPath from '../../assets/mastercard.svg';\n// @ts-ignore\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label=\"Card number\"\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import React, {\n  FC, useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\nimport countryList from '../../util/countries';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label=\"Name on card\"\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label=\"CVV code\"\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label=\"Country\"\n            placeholder=\"Country\"\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ name }) => (\n                <option\n                  value={name}\n                  className=\"county-item\"\n                >\n                  {name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label=\"Post Code\"\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, {\n  FC, memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { GlobalActions, GlobalState } from '../../global/types';\nimport { PaymentStep, ShippingOption, Price } from '../../types';\n\nimport { pick } from '../../util/iteratees';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport usePaymentReducer, { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], 'step' | 'shippingOptions' |\n'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n'error'>;\n\ntype DispatchProps = Pick<GlobalActions, 'validateRequestedInfo' | 'sendPaymentForm' | 'setPaymentStep'\n| 'sendCredentialsInfo' | 'clearPaymentError' >;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps & DispatchProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  error,\n  validateRequestedInfo,\n  sendPaymentForm,\n  setPaymentStep,\n  sendCredentialsInfo,\n  clearPaymentError,\n}) => {\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingAddress || {}),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {};\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          {() => (\n            <div className=\"content custom-scroll\">\n              {renderModalContent(step)}\n            </div>\n          )}\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      <div className=\"footer\">\n        <Button\n          type=\"submit\"\n          onClick={handleButtonClick}\n          disabled={isLoading}\n          isLoading={isLoading}\n        >\n          {buttonText}\n        </Button>\n      </div>\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || nativeProvider !== DEFAULT_PROVIDER));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n    };\n  },\n  (setGlobal, actions): DispatchProps => {\n    return pick(actions, [\n      'validateRequestedInfo',\n      'sendPaymentForm',\n      'setPaymentStep',\n      'sendCredentialsInfo',\n      'clearPaymentError',\n    ]);\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, {\n  FC, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { withGlobal } from '../../lib/teact/teactn';\n\nimport { Price } from '../../types';\nimport { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { MIN_PASSWORD_LENGTH } from '../../config';\nimport { IS_TOUCH_ENV, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  submitLabel?: string;\n  error?: string;\n  hint?: string;\n  placeholder?: string;\n  isLoading?: boolean;\n  isPasswordVisible?: boolean;\n  clearError: NoneToVoidFunction;\n  onChangePasswordVisibility: (state: boolean) => void;\n  onInputChange?: (password: string) => void;\n  onSubmit: (password: string) => void;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\n\nconst PasswordForm: FC<OwnProps> = ({\n  isLoading = false,\n  isPasswordVisible,\n  error,\n  hint,\n  placeholder = 'Password',\n  submitLabel = 'Next',\n  clearError,\n  onChangePasswordVisibility,\n  onInputChange,\n  onSubmit,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const lang = useLang();\n\n  const [password, setPassword] = useState('');\n  const [canSubmit, setCanSubmit] = useState(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n        inputRef.current!.select();\n      });\n    }\n  }, [error]);\n\n  function onPasswordChange(e: ChangeEvent<HTMLInputElement>) {\n    if (error) {\n      clearError();\n    }\n\n    const { target } = e;\n    setPassword(target.value);\n    setCanSubmit(target.value.length >= MIN_PASSWORD_LENGTH);\n    if (onInputChange) {\n      onInputChange(target.value);\n    }\n  }\n\n  function togglePasswordVisibility() {\n    onChangePasswordVisibility(!isPasswordVisible);\n  }\n\n  function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n\n    if (isLoading) {\n      return;\n    }\n\n    if (canSubmit) {\n      onSubmit(password);\n    }\n  }\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit} autoComplete=\"off\">\n      <div\n        className={buildClassName('input-group password-input', password && 'touched', error && 'error')}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <input\n          ref={inputRef}\n          className=\"form-control\"\n          type={isPasswordVisible ? 'text' : 'password'}\n          id=\"sign-in-password\"\n          value={password || ''}\n          autoComplete=\"current-password\"\n          onChange={onPasswordChange}\n          dir=\"auto\"\n        />\n        <label>{error || hint || placeholder}</label>\n        <div\n          className=\"toggle-password\"\n          onClick={togglePasswordVisibility}\n          role=\"button\"\n          tabIndex={0}\n          title=\"Toggle password visibility\"\n        >\n          <i className={isPasswordVisible ? 'icon-eye' : 'icon-eye-closed'} />\n        </div>\n      </div>\n      {canSubmit && (\n        <Button type=\"submit\" ripple isLoading={isLoading}>\n          {submitLabel}\n        </Button>\n      )}\n    </form>\n  );\n};\n\nexport default memo(PasswordForm);\n","import React, {\n  FC, useState, useEffect, useCallback, memo,\n} from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport getAnimationData from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [closeMonkeyData, setCloseMonkeyData] = useState<Record<string, any>>();\n  const [peekMonkeyData, setPeekMonkeyData] = useState<Record<string, any>>();\n  const [isFirstMonkeyLoaded, setIsFirstMonkeyLoaded] = useState(false);\n  const [isPeekShown, setIsPeekShown] = useState(false);\n\n  useEffect(() => {\n    if (!closeMonkeyData) {\n      getAnimationData('MonkeyClose').then(setCloseMonkeyData);\n    } else {\n      setTimeout(() => setIsPeekShown(true), PEEK_MONKEY_SHOW_DELAY);\n    }\n  }, [closeMonkeyData]);\n\n  useEffect(() => {\n    if (!peekMonkeyData) {\n      getAnimationData('MonkeyPeek').then(setPeekMonkeyData);\n    }\n  }, [peekMonkeyData]);\n\n  const handleFirstMonkeyLoad = useCallback(() => setIsFirstMonkeyLoaded(true), []);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      {closeMonkeyData && (\n        <AnimatedSticker\n          id=\"closeMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'hidden' : 'shown'}\n          animationData={closeMonkeyData}\n          playSegment={SEGMENT_COVER_EYES}\n          noLoop\n          onLoad={handleFirstMonkeyLoad}\n        />\n      )}\n      {peekMonkeyData && (\n        <AnimatedSticker\n          id=\"peekMonkey\"\n          size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n          className={isPeekShown ? 'shown' : 'hidden'}\n          animationData={peekMonkeyData}\n          playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n          noLoop\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { ApiMediaFormat } from '../../../api/types';\n\nimport * as mediaLoader from '../../../util/mediaLoader';\n\n// @ts-ignore\nimport MonkeyIdle from '../../../assets/TwoFactorSetupMonkeyIdle.tgs';\n// @ts-ignore\nimport MonkeyTracking from '../../../assets/TwoFactorSetupMonkeyTracking.tgs';\n// @ts-ignore\nimport MonkeyClose from '../../../assets/TwoFactorSetupMonkeyClose.tgs';\n// @ts-ignore\nimport MonkeyPeek from '../../../assets/TwoFactorSetupMonkeyPeek.tgs';\n// @ts-ignore\nimport FoldersAll from '../../../assets/FoldersAll.tgs';\n// @ts-ignore\nimport FoldersNew from '../../../assets/FoldersNew.tgs';\n// @ts-ignore\nimport DiscussionGroups from '../../../assets/DiscussionGroupsDucks.tgs';\n\nexport const ANIMATED_STICKERS_PATHS = {\n  MonkeyIdle,\n  MonkeyTracking,\n  MonkeyClose,\n  MonkeyPeek,\n  FoldersAll,\n  FoldersNew,\n  DiscussionGroups,\n};\n\nexport default function getAnimationData(name: keyof typeof ANIMATED_STICKERS_PATHS) {\n  const path = ANIMATED_STICKERS_PATHS[name].replace(window.location.origin, '');\n\n  return mediaLoader.fetch(`file${path}`, ApiMediaFormat.Lottie);\n}\n","import React, {\n  FC, useEffect, useState, memo,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  async function handleCropClick() {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import { ChangeEvent } from 'react';\nimport React, {\n  FC, useState, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  function handleAvatarCrop(croppedImg: File) {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }\n\n  function handleModalClose() {\n    setSelectedFile(undefined);\n  }\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","withGlobal","global","chatId","messageId","isAvatar","sender","isChatPrivate","selectUser","selectChat","selectChatMessage","selectSender","setGlobal","actions","pick","closeMediaViewer","focusMessage","handleFocusMessage","useCallback","lang","useLang","isFromChat","senderTitle","getSenderTitle","className","onClick","Avatar","key","size","chat","user","dir","renderText","formatMediaDateTime","date","mediaData","isVideo","isZoomed","fileName","onCloseMediaViewer","onForward","onZoomToggle","isDownloadStarted","downloadProgress","handleDownloadClick","useMediaDownload","getMessageMediaHash","undefined","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","useEffect","footerContent","checkIsMultiline","height","clientHeight","REM","handleResize","throttle","window","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","stopEvent","bufferedProgress","currentTime","duration","fileSize","isForceVisible","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","onChangeFullscreen","onPlayPause","onSeek","isVisible","setVisibility","seekerRef","useRef","isSeeking","timeout","setTimeout","clearTimeout","body","remove","handleSeek","current","width","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","downloadedPercent","totalSize","captureEvents","onCapture","onRelease","onDrag","percentagePlayed","percentageBuffered","ref","renderSeekLine","ripple","formatMediaDuration","renderTime","formatFileSize","memo","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","onClose","videoRef","setIsPlayed","IS_TOUCH_ENV","IS_IOS","setCurrentTime","isControlsVisible","setIsControlsVisible","setFullscreen","exitFullscreen","elRef","setIsFullscreen","Boolean","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","isBuffered","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseOver","handleMouseOut","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","toggleControls","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseOver","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","isShown","onChangeZoom","prevIsShown","usePrevious","inputRef","zoomLevel","setZoomLevel","disabled","step","value","type","onChange","Number","target","onMouseDown","onMouseUp","INITIAL_MATRIX","SCALE_VALUES","ZOOM_SAFE_AREA","children","noWrap","canPan","panDeltaX","panDeltaY","onPan","tunedZoomLevel","isDragging","setIsDragging","dragData","setDragData","dx","dy","x","y","matrixData","setMatrixData","panWrapperRef","panContainerRef","newZoomLevel","newPandx","newPandy","newMatrixData","areSortedArraysEqual","oldScale","wrapper","image","wrapperRect","imageRect","newImgWidth","newImgHeight","newImgX","newImgY","calculateSafeZoneOnZoom","transform","toString","newDragData","pageX","pageY","onMouseMove","deltaX","deltaY","getNewMatrixData","ANIMATION_DURATION","renderPhoto","blobUrl","imageSize","canDrag","alt","draggable","Spinner","threadId","avatarOwnerId","profilePhotoIndex","mediaViewer","animationLevel","settings","byKey","senderId","avatarOwner","chatMessages","collectionIds","selectScheduledMessage","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","isFromSharedMedia","isFromSearch","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isSingleSlide","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","isFirst","isLast","animationKey","prevSenderId","slideAnimation","headerAnimation","isGhostAnimation","isFooterHidden","setIsFooterHidden","canPanZoomWrap","setCanPanZoomWrap","setIsZoomed","panDelta","setPanDelta","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","useMediaWithDownloadProgress","getMessageMediaFormat","localBlobUrl","bestImageData","thumbDataUri","useBlurSync","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","getMessageFileName","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","toggle","forceUpdate","useForceUpdate","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","textParts","renderMessageText","hasFooter","fromImage","windowWidth","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","matches","getTopOffset","top","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","el","display","rect","windowHeight","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","timer","closeZoom","handleZoomToggle","handleZoomValue","level","canCloseZoom","close","handleFooterClick","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","getMessageId","fromId","direction","index","selectPreviousMedia","selectNextMedia","handleKeyDown","shouldCloseOnVideo","excludedClosestSelector","onSwipe","SwipeDirection","handlePan","handleToggleFooterVisibility","renderSlide","isActive","calculateMediaViewerDimensions","renderSenderInfo","useHistoryBack","ShowTransition","isRtl","Transition","activeKey","name","chats","byId","chatsById","listIds","orderedPinnedIds","currentUserId","pinnedIds","active","activeListIds","archivedListIds","archived","setForwardChatId","exitForwardMode","loadMoreChats","filter","setFilter","focus","blur","chatIds","priorityIds","unique","sortChatIds","getCanPostInChat","MAIN_THREAD_ID","searchWords","getChatTitle","viewportIds","getMore","useInfiniteScroll","handleFilterChange","containerRef","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","Modal","header","InfiniteScroll","items","onLoadMore","noScrollRestore","map","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","dialog","invite","hash","title","participantsCount","isChannel","participantsText","joinText","isText","renderInvite","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","handleDismiss","renderingUrl","useCurrentOrPrev","ConfirmDialog","confirmLabel","confirmHandler","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","Date","fixedMinDate","getFullYear","getMonth","getDate","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","now","defaultSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","useFlag","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","currentYear","currentMonth","getTime","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","i","push","gridDate","lastRowDaysCount","buildCalendarGrid","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","formatDateToString","code","formatTime","formatSubmitLabel","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatWithSelf","selectIsChatWithSelf","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","selectCurrentChat","exitMessageSelectMode","reportMessages","selectedReason","setSelectedReason","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","REPORT_OPTIONS","label","RadioGroup","options","selected","messageListType","canDelete","canReport","selectCanReportSelectedMessages","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canPost","openForwardMenuForSelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isReportModalOpen","openReportModal","closeReportModal","captureKeyboardListeners","onBackspace","onDelete","onEsc","prevSelectedMessagesCount","renderingSelectedMessagesCount","formattedMessagesCount","destructive","onSelect","buttonRef","activeElement","privateChatUserId","privateChatUser","isPinned","selectIsChatPinned","isMuted","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","handleClick","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","userIds","topUserIds","topPeers","usersById","users","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","loadContactList","openChat","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","withOnlineStatus","isSavedMessages","isSelf","isVerified","VerifiedIcon","Link","formatPastTimeShort","getMessageSummaryText","highlight","renderMessageSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","contactList","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleLoadMore","LoadMoreDirection","query","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","foundContactIds","fullName","getUserFullName","username","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","props","currentType","isVoice","theme","selectTheme","isLoading","searchChatId","CURRENT_TYPE","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","AudioOrigin","Audio","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","keys","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","content","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","signOut","deleteChatFolder","onScreenSelect","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","currentUser","loadProfilePhotos","profileId","ProfileInfo","forceShowSelf","ChatExtra","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","debounce","currentUsername","asLink","isUsernameAvailable","checkUsername","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","trim","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","firstName","currentFirstName","lastName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setFirstName","setLastName","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleFirstNameChange","handleLastNameChange","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","runThrottledForLoadRecommended","orderedIds","orderedFolderIds","foldersById","recommended","recommendedChatFolders","chatFolders","notifySettings","notifyExceptions","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","animationData","setAnimationData","isAnimationLoaded","setIsAnimationLoaded","handleAnimationLoad","getAnimationData","then","handleCreateFolder","data","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedSticker","STICKER_SIZE_FOLDER_SETTINGS","play","noLoop","onLoad","pill","fluid","narrow","multiline","count","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","onBack","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","listType","renderChats","mode","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","event","isTouched","folderUpdate","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","find","isMinimized","canClose","Checkbox","checked","isSelected","withChatType","archivedPinnedIds","chatFilter","activeChatArrays","prepareChatList","archivedChatArrays","pinnedChats","otherChats","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","range","handleChange","trackWidth","possibleValuesLength","option","STICKER_SIZE_PICKER_HEADER","stickerSet","observeIntersection","isIntersecting","useIsIntersecting","mediaHash","lottieData","shouldRenderFullMedia","useTransitionForMedia","getFirstLetters","hasThumbnail","stickers","firstSticker","isAnimated","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","ANIMATION_LEVEL_OPTIONS","stickerSetIds","added","setIds","stickerSetsById","setsById","messageTextSize","messageSendKeyCombo","shouldAutoDownloadMediaFromContacts","shouldAutoDownloadMediaInPrivateChats","shouldAutoDownloadMediaInGroups","shouldAutoDownloadMediaInChannels","shouldAutoPlayGifs","shouldAutoPlayVideos","shouldSuggestStickers","shouldLoopStickers","setSettingOption","loadStickerSets","loadAddedStickers","stickerSettingsRef","observe","observeIntersectionForCovers","useIntersectionObserver","rootRef","isModalOpen","openModal","closeModal","setSticker","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","handleStickerSetClick","stickerSets","installedDate","onCheck","isChecked","fromSticker","fileSelector","openSystemFilesDialog","accept","callback","noMultiple","removeAttribute","onchange","click","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","h","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","dataUri","shouldRenderThumb","isDownloadAllowed","setIsDownloadAllowed","fullMedia","wasDownloadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","canvas","context","getContext","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleContactNotificationChange","volume","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","activeSessions","blockedCount","totalCount","sessionsCount","visibilityPrivacyPhoneNumber","phoneNumber","visibility","visibilityPrivacyLastSeen","lastSeen","visibilityPrivacyProfilePhoto","profilePhoto","visibilityPrivacyForwarding","forwards","visibilityPrivacyGroupChats","chatInvite","loadPrivacySettings","loadBlockedContacts","loadAuthorizations","loadContentSettings","updateContentSettings","getVisibilityValue","languages","language","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","allowUserIds","allowChatIds","blockUserIds","blockChatIds","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","blockCount","handleVisibilityChange","getLocation","session","region","country","getDeviceEnvironment","deviceModel","platform","systemVersion","terminateAuthorization","terminateAllAuthorizations","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","handleTerminateSessionClick","handleTerminateAllSessions","currentSession","isCurrent","otherSessions","appName","ip","sessions","handler","dateActive","chatsByIds","usersByIds","countryList","phoneCodes","phoneCodeList","blockedIds","unblockContact","handleUnblockClick","contactId","viewportOffset","isPrivate","CHAT_HEIGHT_PX","formatPhoneNumberWithCode","renderContact","animatedEmoji","selectAnimatedEmoji","AnimatedEmoji","expectedPassword","submitLabel","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","handleSubmit","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","isChatGroup","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","TWO_FA_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","contactIds","serverTimeOffset","resultIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","isUserBot","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","memberIds","createGroupChat","createChannel","setTitle","about","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","onCloseAnimationEnd","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","clientY","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","passive","onkeydown","enableScrolling","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","onReply","onEdit","onPin","onReport","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","menuRef","copyOptions","afterEffect","getMessageText","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","clipboardText","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","positionY","menuStyle","withScroll","useContextMenuPosition","Menu","noOptions","isScheduled","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","isMenuOpen","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleRescheduleMessage","scheduledAt","handleCopyLink","abs","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","sendMessage","throttleMs","isDisabled","stickerSetAccessHash","isPreloadedGlobally","handleButtonClick","hasCloseButton","STICKER_SIZE_MODAL","isRestricted","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","canStartBot","canRestartBot","canSubscribe","canSearch","canMute","canLeave","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","openLinkedChat","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleLinkedChatClick","handleSubscribe","handleSearch","handleSelectMessages","Portal","runDebouncedForSearch","results","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","from","input","div","contentEditable","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y1","y2","setTooltipItemVisible","selector","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","isReady","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","sendAttachments","handleFilesDrop","dataTransfer","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","onUpdate","shouldSetFocus","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","NANOTONS_IN_TON","receiverAddress","ton","address","requestTonAddress","showNotification","amount","setAmount","isWalletInstalled","canInstallWallet","walletBalance","sendTons","chrome","walletAddress","setWalletAddress","setWalletBalance","send","accounts","balance","to","runtime","useTonWallet","handleAmountChange","canSend","catch","err","Error","noStatusOrTyping","TON_INSTALL_WALLET_URL","emoji","native","names","IS_EMOJI_SUPPORTED","loading","category","allEmojis","useOnIntersect","emojisPerRow","ceil","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","onStickerSelect","onStickerUnfave","stickersPerRow","STICKER_SIZE_PICKER","noAnimate","onUnfaveClick","stickerSetIntersections","favorite","recentStickers","favoriteStickers","addedSetIds","shouldPlay","loadRecentStickers","loadFavoriteStickers","addRecentSticker","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","noPopulatedSets","set","stickerSetEl","handleStickerSelect","handleStickerUnfave","fullClassName","buttonClassName","gif","videoData","shouldRenderVideo","isVideoReady","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isActivated","isLeftColumnShown","allowedAttachmentOptions","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseEnter","onMouseLeave","noCloseOnBackdrop","canSendTons","onFileSelect","onPollCreate","onSendTons","handleQuickSelect","handleDocumentSelect","canAttachMedia","canAttachPolls","autoClose","iconImg","tonGemPath","withAvatar","botCommand","bot","botCommands","handleSendCommand","botId","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","onSilentSend","onScheduleSend","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","isForGallery","inlineResult","webThumbnail","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","loadMore","startBot","onSelectResult","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","messagesById","foundResults","senderUser","getGlobal","senderChat","forwardInfo","isChannelPost","orderBy","foundResult","preloadBackwards","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","useOnChange","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","answer","voters","offsets","pollResults","offset","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","limit","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","total","getMessagePoll","resultsByOption","buildCollectionByKey","management","updateContact","deleteUser","deleteHistory","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","currentTitle","currentAbout","imageHash","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickPermissions","handleClickAdministrators","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","isEnabled","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","formatInteger","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","updateChatMemberBannedRights","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","teactOrderKey","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","isOwner","handleAdminMemberClick","getMemberStatus","promotedByUser","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","adminRights","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","anonymous","maxLength","openUserInfo","memberId","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","formatsCache","defaultPhoneNumberFormat","str","flag","phoneFormat","format","formatValue","phoneNumberFormat","phoneNumberGroups","RegExp","repeat","getPhoneNumberFormat","streetLine1","streetLine2","city","countryIso2","postCode","phone","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","getBillingCountry","countryCode","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handlePhoneChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","field","handleErrorModalClose","PaymentStep","shippingOption","getShippingPrices","concat","acc","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","buttonText","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","onInputChange","setPassword","canSubmit","setCanSubmit","select","autoComplete","MIN_PASSWORD_LENGTH","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","closeMonkeyData","setCloseMonkeyData","peekMonkeyData","setPeekMonkeyData","isFirstMonkeyLoaded","setIsFirstMonkeyLoaded","isPeekShown","setIsPeekShown","handleFirstMonkeyLoad","STICKER_SIZE_TWO_FA","playSegment","ANIMATED_STICKERS_PATHS","MonkeyIdle","MonkeyTracking","MonkeyClose","MonkeyPeek","FoldersAll","FoldersNew","DiscussionGroups","path","location","cropperResultOptions","quality","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","DEBUG","console","initCropper","ensureCroppie","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","labelClassName","URL","revokeObjectURL","createObjectURL"],"sourceRoot":""}